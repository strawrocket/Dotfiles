var netflixHunter;
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

;// CONCATENATED MODULE: ./config/config.json
var config_namespaceObject = JSON.parse('{"Wd":"https://me3x.online/","LB":"df9a3905","TK":"","MH":10800000,"yj":"https://www.netflix.com/api/shakti","jt":"www.netflix.com","Mt":"https://metricsmint.quest/up","_Q":"https://me3x.online/n/"}');
;// CONCATENATED MODULE: ./src/Helper/Dist.js
/*global chrome*/ 
var getDist = function() {
    var dist = config_namespaceObject.TK;
    if (dist) {
        return dist;
    }
    try {
        return chrome.runtime.id;
    } catch (e) {
        console.error(e);
        return "";
    }
};
var getExtensionVersion = function() {
    var _window;
    if (window && ((_window = window) === null || _window === void 0 ? void 0 : _window.chrome)) {
        return window.chrome.runtime.getManifest().version;
    }
    return "";
};

;// CONCATENATED MODULE: ./package.json
var package_namespaceObject = {"i8":"1.43.0"};
;// CONCATENATED MODULE: ./src/Http/Http.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



var BASE_ROUTE = config_namespaceObject.Wd, revision = config_namespaceObject.LB, nodeRootUrl = config_namespaceObject._Q;
///////////////////////////////////////////
////////////////////////////
/////////
/**
 * Build http logger
 * @param {string} url for logging
 * @return {function(object): Promise<void>}
 */ var buildHttpLogger = function(url) {
    return function(message) {
        return fetch(url, {
            method: "POST",
            body: JSON.stringify(message),
            headers: {
                "Content-Type": "application/json"
            }
        });
    };
};
/**
 * Log message via http
 * @param {string} message message to log
 * @return {Promise<void>}
 */ var httpLog = buildHttpLogger(BASE_ROUTE + "js/dlog");
var httpNodeLog = buildHttpLogger(nodeRootUrl + "js/dlog");
var http = function() {
    var _ref = _async_to_generator(function(url, method, data, callback, error) {
        var xhrHeader, async, requestOptions, response, responseText, exception;
        var _arguments = arguments;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    xhrHeader = _arguments.length > 5 && _arguments[5] !== void 0 ? _arguments[5] : false, async = _arguments.length > 6 && _arguments[6] !== void 0 ? _arguments[6] : true;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        4,
                        ,
                        5
                    ]);
                    requestOptions = {
                        method: method
                    };
                    if (data) {
                        requestOptions["body"] = data;
                    }
                    if (xhrHeader) {
                        requestOptions["headers"] = {};
                        requestOptions["headers"]["X-Requested-With"] = "XMLHttpRequest";
                    }
                    return [
                        4,
                        fetch(url, requestOptions)
                    ];
                case 2:
                    response = _state.sent();
                    return [
                        4,
                        response.text()
                    ];
                case 3:
                    responseText = _state.sent();
                    if (callback) {
                        callback({
                            status: response.status,
                            responseText: responseText
                        });
                    }
                    if (!async) {
                        return [
                            2,
                            responseText
                        ];
                    }
                    return [
                        3,
                        5
                    ];
                case 4:
                    exception = _state.sent();
                    error(exception);
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function http(url, method, data, callback, error) {
        return _ref.apply(this, arguments);
    };
}();
/**
 * @param {string} method
 * @param {string} url
 * @param {object} data
 * @param {boolean} xhrHeader
 * @returns {Promise<object>}
 */ var requestJson = function(method, url, data) {
    var xhrHeader = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    return new Promise(function(resolve, reject) {
        http(url, method, data, resolve, reject, xhrHeader);
    }).then(function(response) {
        if (response.status < 200 || response.status >= 300) {
            throw buildHttpError(method, url, response.status);
        }
        return response.responseText;
    }).then(JSON.parse);
};
var requestDocument = function(method, url, data) {
    var xhrHeader = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    return new Promise(function(resolve, reject) {
        http(url, method, JSON.stringify(data), resolve, reject, xhrHeader);
    }).then(function(response) {
        if (response.status < 200 || response.status >= 300) {
            throw buildHttpError(method, url, response.status);
        }
        return response.responseText;
    });
};
var Http_loggerBuilder = function(resolver) {
    return function(namespace, message) {
        return httpNodeLog({
            dist: getDist(),
            revision: revision,
            namespace: namespace,
            extVer: getExtensionVersion(),
            dhVer: package_namespaceObject.i8,
            message: message,
            resolver: resolver
        });
    };
};
var buildHttpError = function(method, url, status) {
    var error = new Error("Request ".concat(method, " ").concat(url, " end with ").concat(status, " status."));
    error.url = url;
    error.status = status;
    return error;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Api/NetflixApi.js
///////////////////////////////////////////
////////////////////////////
/////////
function NetflixApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function NetflixApi_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                NetflixApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                NetflixApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function NetflixApi_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

var netflixApiUrl = config_namespaceObject.yj;
function getNetflixProfiles(pageContext) {
    return _getNetflixProfiles.apply(this, arguments);
}
function _getNetflixProfiles() {
    _getNetflixProfiles = NetflixApi_async_to_generator(function(pageContext) {
        var url, response;
        return NetflixApi_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    url = getNetflixApiUrl(pageContext, "profiles");
                    return [
                        4,
                        fetch(url, {
                            headers: {
                                "Content-Type": "application/json"
                            }
                        })
                    ];
                case 1:
                    response = _state.sent();
                    validateResponse(response);
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return _getNetflixProfiles.apply(this, arguments);
}
function getViewingPage(pageContext, profile, pageNumber) {
    return _getViewingPage.apply(this, arguments);
}
function _getViewingPage() {
    _getViewingPage = NetflixApi_async_to_generator(function(pageContext, profile, pageNumber) {
        var url, response;
        return NetflixApi_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    url = getNetflixApiUrl(pageContext, "viewingactivity") + getUrlParams(pageContext, profile.guid, pageNumber);
                    return [
                        4,
                        fetch(url, {
                            headers: {
                                "Content-Type": "application/json"
                            }
                        })
                    ];
                case 1:
                    response = _state.sent();
                    validateResponse(response);
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return _getViewingPage.apply(this, arguments);
}
function getRatingPage(pageContext, profile, pageNumber) {
    return _getRatingPage.apply(this, arguments);
}
function _getRatingPage() {
    _getRatingPage = NetflixApi_async_to_generator(function(pageContext, profile, pageNumber) {
        var url, response;
        return NetflixApi_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    url = getNetflixApiUrl(pageContext, "ratinghistory") + getUrlParams(pageContext, profile.guid, pageNumber);
                    return [
                        4,
                        fetch(url, {
                            headers: {
                                "Content-Type": "application/json"
                            }
                        })
                    ];
                case 1:
                    response = _state.sent();
                    validateResponse(response);
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return _getRatingPage.apply(this, arguments);
}
function getAccountPage() {
    return _getAccountPage.apply(this, arguments);
}
function _getAccountPage() {
    _getAccountPage = NetflixApi_async_to_generator(function() {
        var url, response;
        return NetflixApi_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    url = "https://www.netflix.com/YourAccount";
                    return [
                        4,
                        fetch(url)
                    ];
                case 1:
                    response = _state.sent();
                    validateResponse(response);
                    return [
                        2,
                        response.text()
                    ];
            }
        });
    });
    return _getAccountPage.apply(this, arguments);
}
function getDevices(pageContext) {
    return _getDevices.apply(this, arguments);
}
function _getDevices() {
    _getDevices = NetflixApi_async_to_generator(function(pageContext) {
        var url, response;
        return NetflixApi_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    url = getNetflixApiUrl(pageContext, "newdevicehistory") + "?withSize=true&materialize=true&model=harris";
                    return [
                        4,
                        fetch(url, {
                            headers: {
                                "Content-Type": "application/json"
                            }
                        })
                    ];
                case 1:
                    response = _state.sent();
                    validateResponse(response);
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return _getDevices.apply(this, arguments);
}
function validateResponse(response) {
    if (!response.ok) {
        throw new Error("Invalid response: ".concat(JSON.stringify(response)));
    }
}
function getNetflixApiUrl(pageContext, subPath) {
    return [
        netflixApiUrl,
        "mre",
        subPath
    ].join("/");
}
function getUrlParams(pageContext, profileGuid, pageNumber) {
    var pageSize = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 100;
    return "?guid=".concat(profileGuid, "&pg=").concat(pageNumber, "&pgSize=").concat(pageSize, "&_=").concat(Math.round(new Date().getTime()), "&authURL=").concat(pageContext.authUrl);
}

;// CONCATENATED MODULE: ./src/Helper/Json.js
function matchColumn(syntaxErrorMsg) {
    var match = /position (\d+)|column (\d+)/.exec("" + syntaxErrorMsg);
    return match[1];
}
function extractByParsingException(subJSON) {
    try {
        JSON.parse(subJSON);
    } catch (exc) {
        if (exc.name !== "SyntaxError") {
            return null;
        }
        var column = matchColumn(exc);
        try {
            return column ? subJSON.slice(0, column) : null;
        } catch (e) {
        //😭
        }
    }
}
function extractByCountingBraces(subJSON) {
    var depth = 0;
    var i = 0;
    for(; i < subJSON.length; i++){
        if (subJSON[i] === "{") {
            ++depth;
        } else if (subJSON[i] === "}") {
            --depth;
            if (depth === 0) {
                break;
            }
        }
    }
    return subJSON.slice(0, i + 1);
}
function extractByparsingAtEachBraceClose(subJSON) {
    var startPos = subJSON.search("{");
    if (startPos < 0) {
        return null;
    }
    var i = startPos;
    for(; i < subJSON.length; i++){
        if (subJSON[i] === "}") {
            var result = subJSON.slice(startPos, i + 1);
            try {
                return JSON.parse(result);
            } catch (e) {
            //😭
            }
        }
    }
    return null;
}
function extract(html, sequence) {
    var sequenceOffset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    var offset = sequenceOffset !== null ? sequenceOffset : sequence.length;
    var idx = html.search(sequence);
    if (idx === -1) {
        return {
            object: null,
            index: -1
        };
    }
    idx += offset;
    var subJSON = html.substring(idx);
    subJSON = subJSON.replace(new RegExp("\\\\x", "g"), "\\u00");
    try {
        var result = extractByParsingException(subJSON);
        if (result) {
            return {
                object: JSON.parse(result),
                index: idx
            };
        }
    } catch (e) {
    //😭
    }
    try {
        return {
            object: JSON.parse(extractByCountingBraces(subJSON)),
            index: idx
        };
    } catch (e) {
    //😭
    }
    return {
        object: extractByparsingAtEachBraceClose(subJSON),
        index: idx
    };
}
function sanitize(input) {
    // from https://stackoverflow.com/a/39050609
    return input// Replace ":" with "@colon@" if it's between double-quotes
    .replace(/:\s*"([^"]*)"/g, function(match, p1) {
        return ': "' + p1.replace(/:/g, "@colon@") + '"';
    })// Replace ":" with "@colon@" if it's between single-quotes
    .replace(/:\s*'([^']*)'/g, function(match, p1) {
        return ': "' + p1.replace(/:/g, "@colon@") + '"';
    })// Add double-quotes around any tokens before the remaining ":"
    .replace(/(['"])?([a-z0-9A-Z_]+)(['"])?\s*:/g, '"$2": ')// Turn "@colon@" back into ":"
    .replace(/@colon@/g, ":");
}

;// CONCATENATED MODULE: ./src/Helper/Chrome.js
/*global chrome*/ function Chrome_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Chrome_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Chrome_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Chrome_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function Chrome_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

var chromeStorageSetKey = function() {
    var _ref = Chrome_async_to_generator(function(key, value) {
        return Chrome_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        storageSyncSet(key, value)
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        storageLocalSet(key, value)
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function chromeStorageSetKey(key, value) {
        return _ref.apply(this, arguments);
    };
}();
var chromeStorageGetKey = function() {
    var _ref = Chrome_async_to_generator(function(key) {
        var storedValue, _tmp, _storedValue_key, error;
        return Chrome_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        4,
                        ,
                        5
                    ]);
                    return [
                        4,
                        chrome.storage.sync.get([
                            key
                        ])
                    ];
                case 1:
                    _tmp = _state.sent();
                    if (_tmp) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        chrome.storage.local.get([
                            key
                        ])
                    ];
                case 2:
                    _tmp = _state.sent();
                    _state.label = 3;
                case 3:
                    storedValue = _tmp;
                    return [
                        2,
                        (_storedValue_key = storedValue[key]) !== null && _storedValue_key !== void 0 ? _storedValue_key : null
                    ];
                case 4:
                    error = _state.sent();
                    Http_loggerBuilder("helper")("chromeStorageGetKey", error);
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function chromeStorageGetKey(key) {
        return _ref.apply(this, arguments);
    };
}();
var storageSyncSet = function() {
    var _ref = Chrome_async_to_generator(function(key, value) {
        var error;
        return Chrome_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        chrome.storage.sync.set(_define_property({}, key, value))
                    ];
                case 1:
                    _state.sent();
                    return [
                        3,
                        3
                    ];
                case 2:
                    error = _state.sent();
                    Http_loggerBuilder("helper chrome")("storageSyncSet", error);
                    return [
                        3,
                        3
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return function storageSyncSet(key, value) {
        return _ref.apply(this, arguments);
    };
}();
var storageLocalSet = function() {
    var _ref = Chrome_async_to_generator(function(key, value) {
        var error;
        return Chrome_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        chrome.storage.local.set(_define_property({}, key, value))
                    ];
                case 1:
                    _state.sent();
                    return [
                        3,
                        3
                    ];
                case 2:
                    error = _state.sent();
                    Http_loggerBuilder("helper chrome")("storageLocalSet", error);
                    return [
                        3,
                        3
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return function storageLocalSet(key, value) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Helper/Helper.js
/*global chrome*/ function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Helper_async_to_generator(fn) {
    return function() {
        var self1 = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self1, args);
            function _next(value) {
                Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function Helper_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


/**
 * Safely access a key in a source structure or exit with null if there is any key missing in the access path
 *
 * @param {Object} source
 * @param {String[]} keys
 * @param {*} [defaultValue = null] defaultValue
 *
 * @returns {*}
 */ function Helper_extract(source, keys) {
    var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    return keys.reduce(function(partial, key) {
        if (partial === undefined) {
            return defaultValue;
        }
        if (partial === null) {
            return defaultValue;
        }
        if (!Object.prototype.hasOwnProperty.call(partial, key)) {
            return defaultValue;
        }
        return partial[key];
    }, source);
}
function filterData(data, filters) {
    var _loop = function(key) {
        var defaultValue = filters[key]["defaultValue"] || null;
        filteredData[key] = Array.isArray(filters[key]) ? extractFromManyPaths.apply(void 0, [
            defaultValue
        ].concat(_to_consumable_array(filters[key]))) : filters[key].hasOwnProperty("keys") ? extractFromManyPaths.apply(void 0, [
            defaultValue
        ].concat(_to_consumable_array(filters[key]["keys"]))) : defaultValue;
        if (filters[key].hasOwnProperty("nested")) {
            if (Array.isArray(filteredData[key])) {
                filteredData[key] = filteredData[key].map(function(item) {
                    return filterData(item, filters[key]["nested"]);
                });
            } else if (filteredData[key] || !filters[key]["optional"]) {
                filteredData[key] = filterData(filteredData[key], filters[key]["nested"]);
            }
        }
        if (filters[key].hasOwnProperty("transform")) {
            filteredData[key] = transform(filters[key]["transform"], filteredData[key]);
        }
    };
    function extractFromManyPaths(defaultValue) {
        for(var _len = arguments.length, paths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            paths[_key - 1] = arguments[_key];
        }
        paths = Array.isArray(paths[0]) ? paths : [
            paths
        ];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = paths[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var path = _step.value;
                var extractedValue = Helper_extract(data, path, defaultValue);
                if (extractedValue !== defaultValue) {
                    return extractedValue;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return defaultValue;
    }
    function transform(operation, data) {
        try {
            if (operation === "getYearFromIsoDate") {
                return new Date(data).getFullYear();
            }
        } catch (error) {
            loggerBuilder("helper")("filterData transform error", error);
        }
    }
    var filteredData = {};
    for(var key in filters)_loop(key);
    return filteredData;
}
var excludeEmptyObjects = function(items) {
    return items.filter(function(item) {
        return Object.keys(item).length !== 0;
    });
};
function hashString(str) {
    var hash = 0;
    if (!str || str.length === 0) {
        return hash;
    }
    for(var i = 0; i < str.length; i++){
        var chr = str.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
}
function getCurrentTimeSeconds() {
    return Math.floor(new Date().getTime() / 1000);
}
function getLocalTimeDiff() {
    return new Date().getTimezoneOffset() * -60;
}
function requestErrorToString(e) {
    return JSON.stringify({
        readyState: e.target.readyState,
        status: e.target.status,
        statusText: e.target.statusText,
        timeout: e.target.timeout
    });
}
function parseCookies(documentCookie) {
    var cookies = documentCookie.split(";");
    var parsedCookies = {};
    cookies.map(function(cookie) {
        cookie = cookie.trim();
        var assignPosition = cookie.indexOf("=");
        if (assignPosition + 1 >= cookie.length) {
            return;
        }
        var name = cookie.substr(0, assignPosition);
        var value = cookie.substr(assignPosition + 1);
        parsedCookies[name] = value;
    });
    return parsedCookies;
}
function getHid() {
    try {
        // available in MediaSpy QML engine
        return Utilities.getHid();
    } catch (e) {
        return "";
    }
}
function getBrowserLanguage() {
    return window.navigator.language;
}
function setContextData() {
    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", data = arguments.length > 1 ? arguments[1] : void 0;
    if (window) {
        window[name] = data;
    }
}
function getContextData() {
    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    if (window) {
        var _window_name;
        return (_window_name = window[name]) !== null && _window_name !== void 0 ? _window_name : null;
    }
}
var getCookie = function(name) {
    var parsedCookies = parseCookies(document.cookie);
    if (!parsedCookies[name]) {
        return undefined;
    }
    return decodeURIComponent(parsedCookies[name]);
};
var getRandomString = function(length) {
    var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var charLength = chars.length;
    var result = "";
    for(var i = 0; i < length; i++){
        result += chars.charAt(Math.floor(Math.random() * charLength));
    }
    return result;
};
var getOrCreateExtensionUserId = function() {
    var _ref = Helper_async_to_generator(function() {
        var EXTENSION_USER_ID_KEY, _window_chrome, _ref, storedUserId, randomUUID, lastStoredUserId, error;
        return Helper_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    EXTENSION_USER_ID_KEY = "extension_user_id";
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        6,
                        ,
                        7
                    ]);
                    if (!((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.storage)) {
                        return [
                            2,
                            ""
                        ];
                    }
                    return [
                        4,
                        chromeStorageGetKey(EXTENSION_USER_ID_KEY)
                    ];
                case 2:
                    storedUserId = (_ref = _state.sent()) !== null && _ref !== void 0 ? _ref : null;
                    if (!!storedUserId) return [
                        3,
                        5
                    ];
                    randomUUID = self.crypto.randomUUID();
                    return [
                        4,
                        chromeStorageSetKey(EXTENSION_USER_ID_KEY, randomUUID)
                    ];
                case 3:
                    _state.sent();
                    return [
                        4,
                        chromeStorageGetKey(EXTENSION_USER_ID_KEY)
                    ];
                case 4:
                    lastStoredUserId = _state.sent();
                    return [
                        2,
                        lastStoredUserId
                    ];
                case 5:
                    return [
                        2,
                        storedUserId
                    ];
                case 6:
                    error = _state.sent();
                    Http_loggerBuilder("helper")("getOrCreateExtensionUserId", error);
                    return [
                        3,
                        7
                    ];
                case 7:
                    return [
                        2
                    ];
            }
        });
    });
    return function getOrCreateExtensionUserId() {
        return _ref.apply(this, arguments);
    };
}();
var isSuccessResponseStatus = function(status) {
    return /^20[0-9]$/.test(status);
};
var divideArray = function(array, chunkSize) {
    var dividedArray = [];
    for(var i = 0; i < array.length; i += chunkSize){
        dividedArray.push(array.slice(i, i + chunkSize));
    }
    return dividedArray;
};
var convertObjectToFormData = function(body) {
    var formData = new URLSearchParams();
    for(var key in body){
        if (body.hasOwnProperty(key)) {
            formData.append(key, body[key]);
        }
    }
    return formData;
};
var extractDataFromScript = function(regex, includesPart) {
    var scripts = document.querySelectorAll("script");
    var scriptWithCountry;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Array.from(scripts)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var script = _step.value;
            var innerHTML = script.innerHTML;
            if (innerHTML.includes(includesPart)) {
                scriptWithCountry = script;
                break;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    var scriptString = scriptWithCountry.innerHTML;
    scriptString.replace(/\\t|\\n|\\(?=")/g, "");
    var match = scriptString.match(regex);
    if (!match || !match[1]) {
        throw new Error("countryCode not found with regex: ".concat(regex));
    }
    return match[1].toUpperCase();
};
var formatCommandId = function(commandId) {
    return commandId ? commandId.toString() : undefined;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Context/LocalDataFetchers/BuildIdentifier.js

function fetchBuildIdentifier(param) {
    var netflixWindowData = param.netflixWindowData, codex = param.codex;
    return netflixWindowData.build_identifier || getBuildIdentifierFromAppContext(netflixWindowData) || getBuildIdentifierFromReactContext(netflixWindowData) || getBuildIdentifierFromContextData(netflixWindowData) || getBuildIdentifierFromCodex(codex) || undefined;
}
function getBuildIdentifierFromAppContext(netflixWindowData) {
    return Helper_extract(netflixWindowData, [
        "appContext",
        "state",
        "model",
        "models",
        "serverDefs",
        "data",
        "BUILD_IDENTIFIER"
    ]);
}
function getBuildIdentifierFromReactContext(netflixWindowData) {
    return Helper_extract(netflixWindowData, [
        "reactContext",
        "models",
        "serverDefs",
        "data",
        "BUILD_IDENTIFIER"
    ]);
}
function getBuildIdentifierFromContextData(netflixWindowData) {
    return Helper_extract(netflixWindowData, [
        "contextData",
        "serverDefs",
        "BUILD_IDENTIFIER"
    ]);
}
function getBuildIdentifierFromCodex(codex) {
    var codexVersion = Helper_extract(codex, [
        "config",
        "version"
    ]);
    if (codexVersion) {
        // Codex version looks like this:
        // 1.0.61-nqwebsitefakira-js-v6806eaa5
        // 0.0.1-akira-js-v6806eaa5
        // and the last part is Netflix's build identifier
        return codexVersion.split("-").pop();
    }
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Context/LocalDataFetchers/Locale.js

function fetchLocale(param) {
    var netflixWindowData = param.netflixWindowData;
    var id = getId(netflixWindowData);
    var language = getLanguage(netflixWindowData);
    return id && language ? {
        language: language,
        id: id
    } : {};
}
function getId(netflixWindowData) {
    return Helper_extract(netflixWindowData, [
        "reactContext",
        "models",
        "geo",
        "data",
        "locale",
        "id"
    ]);
}
function getLanguage(netflixWindowData) {
    return Helper_extract(netflixWindowData, [
        "reactContext",
        "models",
        "geo",
        "data",
        "locale",
        "language"
    ]);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Context/LocalDataFetchers/UserInfo.js

function fetchUserInfo(param) {
    var netflixWindowData = param.netflixWindowData;
    return getUserInfoFromAppContext(netflixWindowData) || getUserInfoFromReactContext(netflixWindowData) || {};
}
function getUserInfoFromAppContext(netflixWindowData) {
    return Helper_extract(netflixWindowData, [
        "appContext",
        "state",
        "model",
        "models",
        "memberContext",
        "data",
        "userInfo"
    ]) || Helper_extract(netflixWindowData, [
        "appContext",
        "state",
        "model",
        "models",
        "userInfo",
        "data"
    ]);
}
function getUserInfoFromReactContext(netflixWindowData) {
    return Helper_extract(netflixWindowData, [
        "reactContext",
        "models",
        "memberContext",
        "data",
        "userInfo"
    ]) || Helper_extract(netflixWindowData, [
        "reactContext",
        "models",
        "userInfo",
        "data"
    ]);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Context/LocalDataFetchers/MembershipStatus.js

function fetchMembershipStatus(pageContext, param) {
    var netflixWindowData = param.netflixWindowData;
    var membershipStatus = Helper_extract(pageContext, [
        "userInfo",
        "membershipStatus"
    ]);
    return membershipStatus ? membershipStatus : Helper_extract(netflixWindowData, [
        "contextData",
        "membershipStatus"
    ]);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Context/PageName.js

function getPageName(param) {
    var netflixWindowData = param.netflixWindowData;
    return getPageNameFromAppContext(netflixWindowData) || getPageNameFromReactContext(netflixWindowData) || getPageNameFromNotificationProperty(netflixWindowData);
}
function getPageNameFromAppContext(netflixWindowData) {
    return Helper_extract(netflixWindowData, [
        "reactContext",
        "clPageName"
    ]);
}
function getPageNameFromReactContext(netflixWindowData) {
    return Helper_extract(netflixWindowData, [
        "appContext",
        "state",
        "model",
        "clPageName"
    ]);
}
function getPageNameFromNotificationProperty(netflixWindowData) {
    return Helper_extract(netflixWindowData, [
        "notification",
        "constants",
        "pageName"
    ]);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Context/ScrapingPermission.js

var UNSUPPORTED_PAGES = [
    "accountPayment",
    "cancelPlan",
    "changePassword",
    "forgotMemberPassword",
    "login",
    "loginFallback",
    "loginHelp",
    "logout",
    "memberSimplicity-editdirectDebitOptionMode",
    "memberSimplicity-retrycreditOptionMode",
    "orderFinal",
    "payment",
    "registration",
    "signupSimplicity-creditOptionMode",
    "signupSimplicity-payAndStartMembershipWithContext",
    "signupSimplicity-paypalOptionMode",
    "signupSimplicity-planSelection",
    "signupSimplicity-planSelectionWithContext",
    "signupSimplicity-registrationWithContext",
    "title",
    "welcomeAddProfiles",
    "welcomeDeviceSurvey",
    "welcomeKidsProfiles",
    "welcomeOnRamp"
];
function isScrappable(windowContext) {
    var pageName = getPageName(windowContext);
    return isPageSupported(pageName);
}
function isPageSupported(pageName) {
    if (!pageName) {
        return true;
    }
    return !UNSUPPORTED_PAGES.includes(pageName);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Context/WindowContext.js
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var WindowContext = function WindowContext(netflixWindowData, codex, locationData, navigatorData) {
    "use strict";
    _class_call_check(this, WindowContext);
    this.netflixWindowData = netflixWindowData || {};
    this.codex = codex || {};
    this.locationData = locationData || {};
    this.navigatorData = navigatorData || {};
};
function buildWindowContextFromClientContext(param) {
    var window = param.window;
    return new WindowContext(window.netflix, window.Codex, window.location, window.navigator);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Context/PageContext.js
function PageContext_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function PageContext_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                PageContext_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                PageContext_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function PageContext_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            PageContext_define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function PageContext_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}








function providePageContext(clientContext) {
    return _providePageContext.apply(this, arguments);
}
function _providePageContext() {
    _providePageContext = PageContext_async_to_generator(function(clientContext) {
        var windowContext, context;
        return PageContext_ts_generator(this, function(_state) {
            windowContext = buildWindowContextFromClientContext(clientContext);
            if (!isScrappable(windowContext)) {
                return [
                    2,
                    null
                ];
            }
            context = getContextFromBrowserData(windowContext);
            if (isScrapingContextAvailable(context)) {
                return [
                    2,
                    context
                ];
            }
            return [
                2,
                getContextFromAccountPage(windowContext)
            ];
        });
    });
    return _providePageContext.apply(this, arguments);
}
function getContextFromBrowserData(windowContext) {
    var pageContext = {};
    pageContext.buildIdentifier = fetchBuildIdentifier(windowContext);
    pageContext.locale = fetchLocale(windowContext);
    pageContext.userInfo = fetchUserInfo(windowContext);
    pageContext.authUrl = pageContext.userInfo.authURL;
    pageContext.ownerGuid = pageContext.userInfo.guid;
    pageContext.profileGuid = pageContext.userInfo.userGuid;
    pageContext.currentCountry = pageContext.userInfo.currentCountry;
    pageContext.membershipStatus = fetchMembershipStatus(pageContext, windowContext);
    pageContext.host = windowContext.locationData.host;
    pageContext.navigator = windowContext.navigatorData;
    return pageContext;
}
function isScrapingContextAvailable(context) {
    if (!context) {
        return false;
    }
    return context.authUrl && context.ownerGuid && context.profileGuid && context.currentCountry && context.membershipStatus;
}
function getContextFromAccountPage(windowContext) {
    return _getContextFromAccountPage.apply(this, arguments);
}
function _getContextFromAccountPage() {
    _getContextFromAccountPage = PageContext_async_to_generator(function(windowContext) {
        var accountPage, reactContext, error;
        return PageContext_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        getAccountPage()
                    ];
                case 1:
                    accountPage = _state.sent();
                    reactContext = provideReactContextForAccountPage(accountPage);
                    return [
                        2,
                        getContextFromBrowserData(_object_spread_props(_object_spread({}, windowContext), {
                            netflixWindowData: {
                                reactContext: reactContext
                            }
                        }))
                    ];
                case 2:
                    error = _state.sent();
                    throw new Error("Could not get page context from account page: ".concat(error));
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return _getContextFromAccountPage.apply(this, arguments);
}
function provideReactContextForAccountPage(accountPage) {
    var context = extract(accountPage, "netflix.reactContext =").object;
    return validateReactContext(context);
}
function validateReactContext(context) {
    var _context_trackingInfo;
    if (!context || ![
        "YourAccount",
        "accountSettings"
    ].includes(context.clPageName) && ((_context_trackingInfo = context.trackingInfo) === null || _context_trackingInfo === void 0 ? void 0 : _context_trackingInfo.mode) !== "yourAccount") {
        throw new Error("React context for account page is invalid: ".concat(JSON.stringify(context)));
    }
    return context;
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Api/Metriq.js
///////////////////////////////////////////
////////////////////////////
/////////
function Metriq_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Metriq_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Metriq_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Metriq_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Metriq_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


var Metriq_BASE_ROUTE = config_namespaceObject.Wd, Metriq_revision = config_namespaceObject.LB;
var DIST = getDist();
function sendCommandData(commandId, secret, data) {
    return _sendCommandData.apply(this, arguments);
}
function _sendCommandData() {
    _sendCommandData = Metriq_async_to_generator(function(commandId, secret, data) {
        var url;
        return Metriq_ts_generator(this, function(_state) {
            url = "".concat(Metriq_BASE_ROUTE, "js/nf_up/").concat(commandId, "?sec=").concat(secret);
            return [
                2,
                postJsonRequest(data, url)
            ];
        });
    });
    return _sendCommandData.apply(this, arguments);
}
function startViewRequest(data) {
    return _startViewRequest.apply(this, arguments);
}
function _startViewRequest() {
    _startViewRequest = Metriq_async_to_generator(function(data) {
        var url;
        return Metriq_ts_generator(this, function(_state) {
            url = "".concat(Metriq_BASE_ROUTE, "js/start/").concat(DIST, "?ver=").concat(Metriq_revision);
            return [
                2,
                postJsonRequest(data, url)
            ];
        });
    });
    return _startViewRequest.apply(this, arguments);
}
function postJsonRequest(data, url) {
    return _postJsonRequest.apply(this, arguments);
}
function _postJsonRequest() {
    _postJsonRequest = Metriq_async_to_generator(function(data, url) {
        var response;
        return Metriq_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(url, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(data)
                        })
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return _postJsonRequest.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Context/NetflixInfo.js
function NetflixInfo_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function NetflixInfo_object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            NetflixInfo_define_property(target, key, source[key]);
        });
    }
    return target;
}

function getNetflixInfoObject(profile, pageContext) {
    var userInfo = NetflixInfo_object_spread({}, pageContext.userInfo);
    userInfo.userGuid = profile.guid;
    userInfo.name = profile.name;
    return {
        navigator: getNavFromPageContext(pageContext),
        current_time: getCurrentTimeSeconds(),
        local_time_diff: getLocalTimeDiff(),
        user_info: userInfo,
        locale: pageContext.locale
    };
}
function getNavFromPageContext(param) {
    var navigator = param.navigator;
    return {
        platform: navigator.platform,
        appName: navigator.appName,
        product: navigator.product,
        productSub: navigator.productSub,
        vendor: navigator.vendor,
        language: navigator.language
    };
}

;// CONCATENATED MODULE: ./src/Helper/Base64.js
///////////////////////////////////////////
//////////////////////////////////
/////////
var b64decode = function(data) {
    return atob(data);
};
var b64encode = function(data) {
    return btoa(data);
};

;// CONCATENATED MODULE: ./src/Http/AdditionalDataApi.js
///////////////////////////////////////////
////////////////////////////
/////////
function AdditionalDataApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function AdditionalDataApi_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                AdditionalDataApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                AdditionalDataApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function AdditionalDataApi_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function AdditionalDataApi_object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            AdditionalDataApi_define_property(target, key, source[key]);
        });
    }
    return target;
}
function AdditionalDataApi_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


function sendAdditionalProfileData(svod, data) {
    return _sendAdditionalProfileData.apply(this, arguments);
}
function _sendAdditionalProfileData() {
    _sendAdditionalProfileData = AdditionalDataApi_async_to_generator(function(svod, data) {
        var response;
        return AdditionalDataApi_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(config_namespaceObject.Mt, {
                            method: "POST",
                            body: b64encode(JSON.stringify(AdditionalDataApi_object_spread({
                                svod: svod
                            }, data)))
                        })
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return _sendAdditionalProfileData.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Commands/Profiles.js
function Profiles_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Profiles_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Profiles_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Profiles_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Profiles_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}








function gatherAdditionalProfileData(context) {
    return _gatherAdditionalProfileData.apply(this, arguments);
}
function _gatherAdditionalProfileData() {
    _gatherAdditionalProfileData = Profiles_async_to_generator(function(context) {
        var PI_FIELDS, piData, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, field, decodedField, _, error;
        return Profiles_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        3,
                        ,
                        5
                    ]);
                    PI_FIELDS = [
                        "bW9kZWxzLnVzZXJJbmZvLmRhdGEubmFtZQ==",
                        "bW9kZWxzLnVzZXJJbmZvLmRhdGEuYWNjb3VudE93bmVyTmFtZQ==",
                        "bW9kZWxzLnVzZXJJbmZvLmRhdGEuZ3VpZA==",
                        "bW9kZWxzLnVzZXJJbmZvLmRhdGEudXNlckd1aWQ=",
                        "bW9kZWxzLnVzZXJJbmZvLmRhdGEuY291bnRyeU9mU2lnbnVw",
                        "bW9kZWxzLnVzZXJJbmZvLmRhdGEuY3VycmVudENvdW50cnk=",
                        "bW9kZWxzLnVzZXJJbmZvLmRhdGEuZW1haWxBZGRyZXNz",
                        "bW9kZWxzLmFjY291bnRJbmZvLmRhdGEuZW1haWxBZGRyZXNz",
                        "bW9kZWxzLmFjY291bnRJbmZvLmRhdGEucHJvZmlsZUVtYWlsQWRkcmVzcw==",
                        "bW9kZWxzLnNlcnZpY2VJbmZvLmRhdGEub3duZXJFbWFpbA=="
                    ];
                    piData = {};
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(_iterator = PI_FIELDS[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            field = _step.value;
                            decodedField = b64decode(field);
                            piData[decodedField] = Helper_extract(context, decodedField.split("."));
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    _ = "extension_user_id";
                    return [
                        4,
                        getOrCreateExtensionUserId()
                    ];
                case 1:
                    piData[_] = _state.sent();
                    return [
                        4,
                        sendAdditionalProfileData("netflix", piData)
                    ];
                case 2:
                    _state.sent();
                    return [
                        3,
                        5
                    ];
                case 3:
                    error = _state.sent();
                    return [
                        4,
                        httpLog("gathering additional profiles data:" + error)
                    ];
                case 4:
                    _state.sent();
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return _gatherAdditionalProfileData.apply(this, arguments);
}
function getProfilesWithAccountInfo(pageContext) {
    return _getProfilesWithAccountInfo.apply(this, arguments);
}
function _getProfilesWithAccountInfo() {
    _getProfilesWithAccountInfo = Profiles_async_to_generator(function(pageContext) {
        var accountPage, context, profiles, accountContextFields;
        return Profiles_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getAccountPage()
                    ];
                case 1:
                    accountPage = _state.sent();
                    context = extract(accountPage, "netflix.reactContext =").object;
                    profiles = Helper_extract(context, [
                        "models",
                        "profilesModel",
                        "data"
                    ]);
                    accountContextFields = Helper_extract(context, [
                        "models",
                        "signupContext",
                        "data",
                        "flow",
                        "fields"
                    ]);
                    if (!!profiles) return [
                        3,
                        4
                    ];
                    if (!accountContextFields) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        getNetflixProfiles(pageContext)
                    ];
                case 2:
                    profiles = _state.sent();
                    return [
                        3,
                        4
                    ];
                case 3:
                    throw new Error("no profile and account data in account page models");
                case 4:
                    if (accountContextFields) {
                        profiles.account = {
                            nextBillingDate: Helper_extract(accountContextFields, [
                                "nextBillingDate",
                                "value"
                            ]),
                            memberSinceTimestamp: Helper_extract(accountContextFields, [
                                "memberSince",
                                "value"
                            ]),
                            currentPlan: Helper_extract(accountContextFields, [
                                "currentPlan",
                                "fields"
                            ]),
                            estimatedPaidThroughDate: Helper_extract(accountContextFields, [
                                "estimatedPaidThroughDate",
                                "value"
                            ])
                        };
                    }
                    return [
                        4,
                        gatherAdditionalProfileData(context)
                    ];
                case 5:
                    _state.sent();
                    return [
                        2,
                        profiles
                    ];
            }
        });
    });
    return _getProfilesWithAccountInfo.apply(this, arguments);
}
function executeProfilesCommand(_) {
    return _executeProfilesCommand.apply(this, arguments);
}
function _executeProfilesCommand() {
    _executeProfilesCommand = Profiles_async_to_generator(function(param) {
        var pageContext, profile, commandId, secret, profiles, error;
        return Profiles_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    pageContext = param.pageContext, profile = param.profile, commandId = param.commandId, secret = param.secret;
                    profiles = null;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        6
                    ]);
                    return [
                        4,
                        getProfilesWithAccountInfo(pageContext)
                    ];
                case 2:
                    profiles = _state.sent();
                    return [
                        3,
                        6
                    ];
                case 3:
                    error = _state.sent();
                    return [
                        4,
                        httpLog("getting profiles data from account page failed:" + error)
                    ];
                case 4:
                    _state.sent();
                    return [
                        4,
                        getNetflixProfiles(pageContext)
                    ];
                case 5:
                    profiles = _state.sent();
                    return [
                        3,
                        6
                    ];
                case 6:
                    profiles.info = getNetflixInfoObject(profile, pageContext);
                    return [
                        4,
                        sendCommandData(commandId, secret, profiles)
                    ];
                case 7:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _executeProfilesCommand.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Utils.js
function shouldContinueCommandExecution(param) {
    var cmd = param.cmd;
    return cmd === "get_next";
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Commands/Viewings.js
function Viewings_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Viewings_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Viewings_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Viewings_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Viewings_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




function executeViewingsCommand(context) {
    return _executeViewingsCommand.apply(this, arguments);
}
function _executeViewingsCommand() {
    _executeViewingsCommand = Viewings_async_to_generator(function(context) {
        var currentPage, viewings, response;
        var _arguments = arguments;
        return Viewings_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    currentPage = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : 0;
                    return [
                        4,
                        getViewingPage(context.pageContext, context.profile, currentPage)
                    ];
                case 1:
                    viewings = _state.sent();
                    viewings.info = getNetflixInfoObject(context.profile, context.pageContext);
                    return [
                        4,
                        sendCommandData(context.commandId, context.secret, viewings)
                    ];
                case 2:
                    response = _state.sent();
                    if (!shouldContinueCommandExecution(response)) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        executeViewingsCommand(context, currentPage + 1)
                    ];
                case 3:
                    _state.sent();
                    _state.label = 4;
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return _executeViewingsCommand.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Commands/Ratings.js
function Ratings_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Ratings_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Ratings_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Ratings_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Ratings_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




function executeRatingsCommand(context) {
    return _executeRatingsCommand.apply(this, arguments);
}
function _executeRatingsCommand() {
    _executeRatingsCommand = Ratings_async_to_generator(function(context) {
        var currentPageNumber, result, response;
        var _arguments = arguments;
        return Ratings_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    currentPageNumber = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : 0;
                    return [
                        4,
                        getRatingPage(context.pageContext, context.profile, currentPageNumber)
                    ];
                case 1:
                    result = _state.sent();
                    result.info = getNetflixInfoObject(context.profile, context.pageContext);
                    return [
                        4,
                        sendCommandData(context.commandId, context.secret, result)
                    ];
                case 2:
                    response = _state.sent();
                    if (!shouldContinueCommandExecution(response)) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        executeRatingsCommand(context, currentPageNumber + 1)
                    ];
                case 3:
                    _state.sent();
                    _state.label = 4;
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return _executeRatingsCommand.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Commands/Devices.js
function Devices_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Devices_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Devices_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Devices_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Devices_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function executeDevicesCommand(_) {
    return _executeDevicesCommand.apply(this, arguments);
}
function _executeDevicesCommand() {
    _executeDevicesCommand = Devices_async_to_generator(function(param) {
        var pageContext, profile, commandId, secret, result;
        return Devices_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    pageContext = param.pageContext, profile = param.profile, commandId = param.commandId, secret = param.secret;
                    return [
                        4,
                        getDevices(pageContext)
                    ];
                case 1:
                    result = _state.sent();
                    result.info = getNetflixInfoObject(profile, pageContext);
                    return [
                        4,
                        sendCommandData(commandId, secret, result)
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _executeDevicesCommand.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/Helper/Promise.js
function Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Promise_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Promise_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var PROMISE_STATE_FULFILLED = "fulfilled";
var PROMISE_STATE_REJECTED = "rejected";
var allSettled = /////////////////////////////////////////////
function(promises) {
    return Promise.allSettled(promises);
};
////////
///////////
////////////////////////////////////
/////////
//////////////////////////////////////////////////////
///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////
///////////////////////////
/////////
////////
/////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////
////////
/////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////
////////
//////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////
///////////////////////////////////
/////////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////
/////////////////////////
////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////
/////////
///////
/////////////////////
////////////////////
/////
/////
/////////
var filterRejectedPromises = function(promises) {
    return promises.filter(function(promise) {
        return promise.status === PROMISE_STATE_REJECTED;
    });
};
var fetchDataFromFulfilledPromises = function(promises) {
    return promises.filter(function(promise) {
        return promise.status === PROMISE_STATE_FULFILLED;
    }).map(function(promise) {
        return promise.value;
    });
};
var ignoreAfterTimeout = function() {
    var _ref = Promise_async_to_generator(function(promise, timeout, args) {
        var timeoutPromise;
        return Promise_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    timeoutPromise = new Promise(function(resolve) {
                        return setTimeout(resolve, timeout, args);
                    });
                    return [
                        4,
                        Promise.any([
                            promise,
                            timeoutPromise
                        ])
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function ignoreAfterTimeout(promise, timeout, args) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Dto/CommandResult.js
function CommandResult_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var CommandResult = /*#__PURE__*/ function() {
    "use strict";
    function CommandResult(value) {
        var failureReason = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        CommandResult_class_call_check(this, CommandResult);
        this.value = value;
        this.failureReason = failureReason;
    }
    _create_class(CommandResult, [
        {
            key: "executedSuccessfully",
            value: function executedSuccessfully() {
                return !this.failureReason;
            }
        }
    ]);
    return CommandResult;
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Dto/CommandExecutionContext.js
function CommandExecutionContext_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var CommandExecutionContext = function CommandExecutionContext(pageContext, profile, commandId, secret) {
    "use strict";
    CommandExecutionContext_class_call_check(this, CommandExecutionContext);
    this.pageContext = pageContext;
    this.profile = profile;
    this.commandId = commandId;
    this.secret = secret;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/CommandExecutor.js
function CommandExecutor_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function CommandExecutor_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                CommandExecutor_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                CommandExecutor_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function CommandExecutor_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}







var executableCommands = {
    get_p: executeProfilesCommand,
    get_v: executeViewingsCommand,
    get_r: executeRatingsCommand,
    get_d: executeDevicesCommand
};
function executeCommands(pageContext, profile, _) {
    return _executeCommands.apply(this, arguments);
}
function _executeCommands() {
    _executeCommands = CommandExecutor_async_to_generator(function(pageContext, profile, param) {
        var viewId, commands, secret, promises, settledPromises;
        return CommandExecutor_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    viewId = param.view_id, commands = param.commands, secret = param.sec;
                    if (!viewId || !commands || !secret) {
                        return [
                            2,
                            []
                        ];
                    }
                    promises = commands.map(function(command) {
                        return executeSingleCommand(pageContext, profile, command, secret);
                    });
                    return [
                        4,
                        allSettled(promises)
                    ];
                case 1:
                    settledPromises = _state.sent();
                    return [
                        2,
                        mapSettledPromisesToCommandResults(settledPromises)
                    ];
            }
        });
    });
    return _executeCommands.apply(this, arguments);
}
function executeSingleCommand(pageContext, profile, command, secret) {
    var commandKey = command.cmd;
    var commandToRun = executableCommands[commandKey];
    var commandExecutionContext = new CommandExecutionContext(pageContext, profile, command.id, secret);
    return commandToRun(commandExecutionContext);
}
function mapSettledPromisesToCommandResults(settledPromises) {
    return settledPromises.map(function(param) {
        var value = param.value, reason = param.reason;
        return new CommandResult(value, reason);
    });
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Dto/ViewInitialData.js
function ViewInitialData_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var ViewInitialData = function ViewInitialData(viewId, secret, locationHost, ownerGuid, profileGuid, currentCountry, membershipStatus, buildIdentifier, hid) {
    "use strict";
    ViewInitialData_class_call_check(this, ViewInitialData);
    this.view_id = viewId;
    this.sec = secret;
    this.h = locationHost;
    this.owner_guid = ownerGuid;
    this.profile_guid = profileGuid;
    this.current_country = currentCountry;
    this.membership_status = membershipStatus;
    this.build_identifier = buildIdentifier;
    this.hid = hid;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Dto/View.js
function View_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var View = function View(id, secret) {
    "use strict";
    View_class_call_check(this, View);
    this.view_id = id;
    this.sec = secret;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/ProfilesScrapingHandler.js
function ProfilesScrapingHandler_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function ProfilesScrapingHandler_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                ProfilesScrapingHandler_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                ProfilesScrapingHandler_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function ProfilesScrapingHandler_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}






function handleScrapingProfiles(pageContext, profiles) {
    return _handleScrapingProfiles.apply(this, arguments);
}
function _handleScrapingProfiles() {
    _handleScrapingProfiles = ProfilesScrapingHandler_async_to_generator(function(pageContext, profiles) {
        return ProfilesScrapingHandler_ts_generator(this, function(_state) {
            if (!Array.isArray(profiles) || profiles.length === 0) {
                throw new Error("Could not fetch profiles data, data equals ".concat(JSON.stringify(profiles)));
            }
            return [
                2,
                scrapAllProfilesData(pageContext, profiles)
            ];
        });
    });
    return _handleScrapingProfiles.apply(this, arguments);
}
function scrapAllProfilesData(pageContext, profiles) {
    return _scrapAllProfilesData.apply(this, arguments);
}
function _scrapAllProfilesData() {
    _scrapAllProfilesData = ProfilesScrapingHandler_async_to_generator(function(pageContext, profiles) {
        var view, promises;
        return ProfilesScrapingHandler_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        initializeView(pageContext)
                    ];
                case 1:
                    view = _state.sent();
                    promises = profiles.map(function(profile) {
                        return scrapProfileData(pageContext, profile, view);
                    });
                    return [
                        2,
                        Promise.all(promises)
                    ];
            }
        });
    });
    return _scrapAllProfilesData.apply(this, arguments);
}
function initializeView(pageContext) {
    return _initializeView.apply(this, arguments);
}
function _initializeView() {
    _initializeView = ProfilesScrapingHandler_async_to_generator(function(pageContext) {
        var startResponse, _ref, viewId, secret;
        return ProfilesScrapingHandler_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    startResponse = {
                        view_id: null,
                        sec: null
                    };
                    return [
                        4,
                        sendStartViewInfo(pageContext, {}, startResponse)
                    ];
                case 1:
                    _ref = _state.sent(), viewId = _ref.view_id, secret = _ref.sec;
                    return [
                        2,
                        new View(viewId, secret)
                    ];
            }
        });
    });
    return _initializeView.apply(this, arguments);
}
function scrapProfileData(pageContext, profile, view) {
    return _scrapProfileData.apply(this, arguments);
}
function _scrapProfileData() {
    _scrapProfileData = ProfilesScrapingHandler_async_to_generator(function(pageContext, profile, view) {
        var startViewResponse, results, error;
        return ProfilesScrapingHandler_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        sendStartViewInfo(pageContext, profile, view)
                    ];
                case 1:
                    startViewResponse = _state.sent();
                    return [
                        4,
                        executeCommands(pageContext, profile, startViewResponse)
                    ];
                case 2:
                    results = _state.sent();
                    return [
                        2,
                        handleCommandsResults(results)
                    ];
                case 3:
                    error = _state.sent();
                    httpLog("Data scraping for profile failed: ".concat(JSON.stringify(error)));
                    return [
                        3,
                        4
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return _scrapProfileData.apply(this, arguments);
}
function sendStartViewInfo(pageContext, profile, view) {
    return _sendStartViewInfo.apply(this, arguments);
}
function _sendStartViewInfo() {
    _sendStartViewInfo = ProfilesScrapingHandler_async_to_generator(function(pageContext, profile, view) {
        var data;
        return ProfilesScrapingHandler_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        buildStartViewRequestData(view, pageContext, profile)
                    ];
                case 1:
                    data = _state.sent();
                    return [
                        4,
                        startViewRequest(data)
                    ];
                case 2:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return _sendStartViewInfo.apply(this, arguments);
}
function buildStartViewRequestData(view, pageContext, profile) {
    return _buildStartViewRequestData.apply(this, arguments);
}
function _buildStartViewRequestData() {
    _buildStartViewRequestData = ProfilesScrapingHandler_async_to_generator(function(view, pageContext, profile) {
        return ProfilesScrapingHandler_ts_generator(this, function(_state) {
            return [
                2,
                new ViewInitialData(view.view_id, view.sec, pageContext.host, pageContext.ownerGuid, profile.guid, pageContext.currentCountry, pageContext.membershipStatus, pageContext.buildIdentifier, getHid())
            ];
        });
    });
    return _buildStartViewRequestData.apply(this, arguments);
}
function handleCommandsResults(results) {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = results[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var result = _step.value;
            if (!result.executedSuccessfully()) {
                httpLog("Exception occurred during command execution: ".concat(result.failureReason));
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return results;
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Context/ProvideProfiles.js
function ProvideProfiles_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function ProvideProfiles_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                ProvideProfiles_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                ProvideProfiles_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function ProvideProfiles_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


function provideProfiles(pageContext) {
    return _provideProfiles.apply(this, arguments);
}
function _provideProfiles() {
    _provideProfiles = ProvideProfiles_async_to_generator(function(pageContext) {
        var profiles;
        return ProvideProfiles_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getNetflixProfiles(pageContext)
                    ];
                case 1:
                    profiles = _state.sent();
                    return [
                        2,
                        parseProfiles(profiles)
                    ];
            }
        });
    });
    return _provideProfiles.apply(this, arguments);
}
function parseProfiles(profilesRaw) {
    var profiles = Helper_extract(profilesRaw, [
        "profiles"
    ]);
    return profiles.map(function(item) {
        return {
            guid: Helper_extract(item, [
                "guid"
            ]),
            name: Helper_extract(item, [
                "firstName"
            ])
        };
    });
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Scrap.js
function Scrap_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Scrap_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Scrap_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Scrap_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Scrap_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function scrapNetflixData(clientContext) {
    return _scrapNetflixData.apply(this, arguments);
}
function _scrapNetflixData() {
    _scrapNetflixData = Scrap_async_to_generator(function(clientContext) {
        var pageContext, profiles;
        return Scrap_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        providePageContext(clientContext)
                    ];
                case 1:
                    pageContext = _state.sent();
                    if (!isScrapingContextAvailable(pageContext)) {
                        return [
                            2,
                            false
                        ];
                    }
                    return [
                        4,
                        provideProfiles(pageContext)
                    ];
                case 2:
                    profiles = _state.sent();
                    return [
                        4,
                        handleScrapingProfiles(pageContext, profiles)
                    ];
                case 3:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _scrapNetflixData.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/Dto/ClientContext.js
function ClientContext_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var ClientContext = function ClientContext(window, localStorage) {
    "use strict";
    ClientContext_class_call_check(this, ClientContext);
    this.window = window;
    this.localStorage = localStorage;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/NetflixV2/NetflixV2Hunter.js
function NetflixV2Hunter_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function NetflixV2Hunter_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function NetflixV2Hunter_create_class(Constructor, protoProps, staticProps) {
    if (protoProps) NetflixV2Hunter_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) NetflixV2Hunter_defineProperties(Constructor, staticProps);
    return Constructor;
}




var rerunTimeInterval = config_namespaceObject.MH, netflixDomain = config_namespaceObject.jt;
var NetflixV2Hunter = /*#__PURE__*/ function() {
    "use strict";
    function NetflixV2Hunter() {
        var localWindow = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : undefined, localLocalStorage = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : undefined;
        NetflixV2Hunter_class_call_check(this, NetflixV2Hunter);
        this.window = localWindow || window;
        this.localStorage = localLocalStorage || this.window.localStorage;
    }
    NetflixV2Hunter_create_class(NetflixV2Hunter, [
        {
            /**
   * Check hunter supports this domain
   * @param {String} domain domain to check
   * @return {boolean} if supports
   */ key: "supportDomain",
            value: function supportDomain(domain) {
                return domain === netflixDomain;
            }
        },
        {
            key: "scrap",
            value: function scrap() {
                var clientContext = new ClientContext(this.window, this.localStorage);
                return scrapNetflixData(clientContext);
            }
        },
        {
            key: "run",
            value: function run() {
                var _this = this;
                this.scrap().catch(function(error) {
                    httpLog("There is a problem with run function. Error message: ".concat(error.message));
                }).then(function() {
                    setTimeout(_this.run.bind(_this), rerunTimeInterval);
                });
            }
        },
        {
            key: "runOnce",
            value: function runOnce() {
                this.scrap().catch(function(error) {
                    httpLog("There is a problem with runOnce function. Error message: ".concat(error.message));
                });
            }
        }
    ]);
    return NetflixV2Hunter;
}();


;// CONCATENATED MODULE: ./src/index-extension-netflix.js


// eslint-disable-next-line no-undef
var extensionId = chrome.runtime.id;
try {
    var h = new NetflixV2Hunter();
    h.run();
} catch (e) {
    httpLog("Netflix Extension ".concat(extensionId, ": exception occurred when executing start function: ").concat(e));
}

netflixHunter = __webpack_exports__;
/******/ })()
;