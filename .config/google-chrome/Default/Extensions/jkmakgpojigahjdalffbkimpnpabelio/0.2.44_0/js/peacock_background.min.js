/******/ (function() { // webpackBootstrap
var __webpack_exports__ = {};
/*global chrome*/
function signRequestInTab(url, options) {
  const chooseModuleId = () => {
    const START_ID = 2000000;
    const MAX_ID = 2010000;
    const existingIds = globalThis.chunkLoadingGlobal_main.map(m => m[0]).flat();
    for (let i = START_ID; i <= MAX_ID; i++) {
      if (existingIds.indexOf(i) === -1) {
        return i;
      }
    }
    throw new Error('unable to choose module id');
  };
  const checkModuleExists = expectedId =>
    globalThis.chunkLoadingGlobal_main.find(module => {
      try {
        return Object.keys(module[1]).find(moduleId => {
          try {
            return parseInt(moduleId) === expectedId;
          } catch (error) {
            return undefined;
          }
        });
      } catch (error) {
        return undefined;
      }
    }) !== undefined;

  return new Promise((resolve, reject) => {
    try {
      const mysteriousModuleId = 94362;
      const moduleWithNowId = 38536;
      const moduleWithNowV2Id = 33117;

      if (
        !checkModuleExists(mysteriousModuleId) ||
        !(checkModuleExists(moduleWithNowId) || checkModuleExists(moduleWithNowV2Id))
      ) {
        throw new Error('modules check failed');
      }

      // eslint-disable-next-line no-inner-declarations
      function onModuleLoad(a) {
        try {
          if (!a) {
            resolve({ success: false, error: 'invalid load argument' });
            return;
          }

          const mysteriousModule = a(mysteriousModuleId);
          let moduleWithNow = null;
          try {
            const moduleWithNowV2 = a(moduleWithNowV2Id);
            if (moduleWithNowV2.j8) {
              moduleWithNow = moduleWithNowV2;
            }
          } catch (error) {
            // eslint-disable-line no-empty
          }

          if (!moduleWithNow) {
            moduleWithNow = a(moduleWithNowId);
          }

          if (!mysteriousModule || !moduleWithNow) {
            resolve({ success: false, error: 'could not load modules' });
            return;
          }

          const getRequestOptions = mysteriousModule.getRequestOptions;
          const now = moduleWithNow.j8;

          if (!getRequestOptions || !now) {
            resolve({ success: false, error: 'could not get functions from modules' });
            return;
          }

          const signedRequest = getRequestOptions(
            {
              ...options,
              url,
            },
            {
              client: 'NBCU-WEB-v8',
              version: '1.0',
              now: now,
            },
          );
          resolve({
            success: true,
            params: {
              url: signedRequest.url,
              options: signedRequest,
            },
          });
        } catch (error) {
          resolve({ success: false, error: error.toString() });
        }
      }

      globalThis.chunkLoadingGlobal_main.push([[chooseModuleId()], {}, onModuleLoad]);
    } catch (error) {
      resolve({ success: false, error: error.toString() });
    }
  });
}

const executeSigningInTab = async (tabId, url, options) => {
  try {
    const injection = await chrome.scripting.executeScript({
      func: signRequestInTab,
      args: [url, options],
      world: chrome.scripting.ExecutionWorld.MAIN,
      target: { tabId: tabId },
    });
    if (injection.length !== 1) {
      return {
        success: false,
        error: 'script execution returned invalid array',
      };
    }
    return injection[0].result;
  } catch (error) {
    return {
      success: false,
      error: error,
    };
  }
};

const signRequest = async (tabId, msg, sendResponse) => {
  try {
    const result = await executeSigningInTab(tabId, msg.params.url, msg.params.options);
    sendResponse(result);
  } catch (error) {
    const result = {
      success: false,
      error: error,
    };
    sendResponse(result);
  }
};

chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
  if (msg.op === 'sign_request') {
    signRequest(sender.tab.id, msg, sendResponse);
    return true;
  }
  return false;
});

/******/ })()
;