/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 270:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": function() { return /* binding */ getExtensionVersion; },
/* harmony export */   "z": function() { return /* binding */ getDist; }
/* harmony export */ });
/* harmony import */ var _config_config_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(626);
/*global chrome*/ 
var getDist = function() {
    var dist = _config_config_json__WEBPACK_IMPORTED_MODULE_0__/* .dist */ .TK;
    if (dist) {
        return dist;
    }
    try {
        return chrome.runtime.id;
    } catch (e) {
        console.error(e);
        return "";
    }
};
var getExtensionVersion = function() {
    var _window;
    if (window && ((_window = window) === null || _window === void 0 ? void 0 : _window.chrome)) {
        return window.chrome.runtime.getManifest().version;
    }
    return "";
};


/***/ }),

/***/ 519:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CQ": function() { return /* binding */ loggerBuilder; },
/* harmony export */   "gp": function() { return /* binding */ httpNodeLog; }
/* harmony export */ });
/* unused harmony exports httpLog, http, requestJson, requestDocument */
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(626);
/* harmony import */ var _Helper_Dist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(270);
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(147);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



var BASE_ROUTE = _config_config__WEBPACK_IMPORTED_MODULE_0__/* .rootUrl */ .Wd, revision = _config_config__WEBPACK_IMPORTED_MODULE_0__/* .revision */ .LB, nodeRootUrl = _config_config__WEBPACK_IMPORTED_MODULE_0__/* .nodeRootUrl */ ._Q;
///////////////////////////////////////////
////////////////////////////
/////////
/**
 * Build http logger
 * @param {string} url for logging
 * @return {function(object): Promise<void>}
 */ var buildHttpLogger = function(url) {
    return function(message) {
        return fetch(url, {
            method: "POST",
            body: JSON.stringify(message),
            headers: {
                "Content-Type": "application/json"
            }
        });
    };
};
/**
 * Log message via http
 * @param {string} message message to log
 * @return {Promise<void>}
 */ var httpLog = buildHttpLogger(BASE_ROUTE + "js/dlog");
var httpNodeLog = buildHttpLogger(nodeRootUrl + "js/dlog");
var http = function() {
    var _ref = _async_to_generator(function(url, method, data, callback, error) {
        var xhrHeader, async, requestOptions, response, responseText, exception;
        var _arguments = arguments;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    xhrHeader = _arguments.length > 5 && _arguments[5] !== void 0 ? _arguments[5] : false, async = _arguments.length > 6 && _arguments[6] !== void 0 ? _arguments[6] : true;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        4,
                        ,
                        5
                    ]);
                    requestOptions = {
                        method: method
                    };
                    if (data) {
                        requestOptions["body"] = data;
                    }
                    if (xhrHeader) {
                        requestOptions["headers"] = {};
                        requestOptions["headers"]["X-Requested-With"] = "XMLHttpRequest";
                    }
                    return [
                        4,
                        fetch(url, requestOptions)
                    ];
                case 2:
                    response = _state.sent();
                    return [
                        4,
                        response.text()
                    ];
                case 3:
                    responseText = _state.sent();
                    if (callback) {
                        callback({
                            status: response.status,
                            responseText: responseText
                        });
                    }
                    if (!async) {
                        return [
                            2,
                            responseText
                        ];
                    }
                    return [
                        3,
                        5
                    ];
                case 4:
                    exception = _state.sent();
                    error(exception);
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function http(url, method, data, callback, error) {
        return _ref.apply(this, arguments);
    };
}();
/**
 * @param {string} method
 * @param {string} url
 * @param {object} data
 * @param {boolean} xhrHeader
 * @returns {Promise<object>}
 */ var requestJson = function(method, url, data) {
    var xhrHeader = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    return new Promise(function(resolve, reject) {
        http(url, method, data, resolve, reject, xhrHeader);
    }).then(function(response) {
        if (response.status < 200 || response.status >= 300) {
            throw buildHttpError(method, url, response.status);
        }
        return response.responseText;
    }).then(JSON.parse);
};
var requestDocument = function(method, url, data) {
    var xhrHeader = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    return new Promise(function(resolve, reject) {
        http(url, method, JSON.stringify(data), resolve, reject, xhrHeader);
    }).then(function(response) {
        if (response.status < 200 || response.status >= 300) {
            throw buildHttpError(method, url, response.status);
        }
        return response.responseText;
    });
};
var loggerBuilder = function(resolver) {
    return function(namespace, message) {
        return httpNodeLog({
            dist: (0,_Helper_Dist__WEBPACK_IMPORTED_MODULE_1__/* .getDist */ .z)(),
            revision: revision,
            namespace: namespace,
            extVer: (0,_Helper_Dist__WEBPACK_IMPORTED_MODULE_1__/* .getExtensionVersion */ .P)(),
            dhVer: _package_json__WEBPACK_IMPORTED_MODULE_2__/* .version */ .i8,
            message: message,
            resolver: resolver
        });
    };
};
var buildHttpError = function(method, url, status) {
    var error = new Error("Request ".concat(method, " ").concat(url, " end with ").concat(status, " status."));
    error.url = url;
    error.status = status;
    return error;
};


/***/ }),

/***/ 784:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ ParamountHunter; }
});

;// CONCATENATED MODULE: ./config/config_paramount.json
var config_paramount_namespaceObject = JSON.parse('{"lG":"https://www.paramountplus.com/","Sd":300000}');
// EXTERNAL MODULE: ./config/config.json
var config = __webpack_require__(626);
// EXTERNAL MODULE: ./src/Http/Http.js
var Http = __webpack_require__(519);
;// CONCATENATED MODULE: ./src/Http/PlainJsonRequest.js
///////////////////////////////////////////
////////////////////////////
/////////
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var postPlainJsonRequest = function() {
    var _ref = _async_to_generator(function(url, payload) {
        var response;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(url, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(payload)
                        })
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        4,
                        response.json()
                    ];
                case 2:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function postPlainJsonRequest(url, payload) {
        return _ref.apply(this, arguments);
    };
}();
var postRequest = function() {
    var _ref = _async_to_generator(function(url, payload) {
        var response;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(url, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(payload)
                        })
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        4,
                        response
                    ];
                case 2:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function postRequest(url, payload) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Helper/Promise.js
function Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Promise_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Promise_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var PROMISE_STATE_FULFILLED = "fulfilled";
var PROMISE_STATE_REJECTED = "rejected";
var allSettled = /////////////////////////////////////////////
function(promises) {
    return Promise.allSettled(promises);
};
////////
///////////
////////////////////////////////////
/////////
//////////////////////////////////////////////////////
///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////
///////////////////////////
/////////
////////
/////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////
////////
/////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////
////////
//////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////
///////////////////////////////////
/////////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////
/////////////////////////
////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////
/////////
///////
/////////////////////
////////////////////
/////
/////
/////////
var filterRejectedPromises = function(promises) {
    return promises.filter(function(promise) {
        return promise.status === PROMISE_STATE_REJECTED;
    });
};
var fetchDataFromFulfilledPromises = function(promises) {
    return promises.filter(function(promise) {
        return promise.status === PROMISE_STATE_FULFILLED;
    }).map(function(promise) {
        return promise.value;
    });
};
var ignoreAfterTimeout = function() {
    var _ref = Promise_async_to_generator(function(promise, timeout, args) {
        var timeoutPromise;
        return Promise_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    timeoutPromise = new Promise(function(resolve) {
                        return setTimeout(resolve, timeout, args);
                    });
                    return [
                        4,
                        Promise.any([
                            promise,
                            timeoutPromise
                        ])
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function ignoreAfterTimeout(promise, timeout, args) {
        return _ref.apply(this, arguments);
    };
}();

// EXTERNAL MODULE: ./src/Helper/Dist.js
var Dist = __webpack_require__(270);
// EXTERNAL MODULE: ./package.json
var package_0 = __webpack_require__(147);
;// CONCATENATED MODULE: ./src/Helper/Chrome.js
/*global chrome*/ function Chrome_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Chrome_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Chrome_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Chrome_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function Chrome_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

var chromeStorageSetKey = function() {
    var _ref = Chrome_async_to_generator(function(key, value) {
        return Chrome_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        storageSyncSet(key, value)
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        storageLocalSet(key, value)
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function chromeStorageSetKey(key, value) {
        return _ref.apply(this, arguments);
    };
}();
var chromeStorageGetKey = function() {
    var _ref = Chrome_async_to_generator(function(key) {
        var storedValue, _tmp, _storedValue_key, error;
        return Chrome_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        4,
                        ,
                        5
                    ]);
                    return [
                        4,
                        chrome.storage.sync.get([
                            key
                        ])
                    ];
                case 1:
                    _tmp = _state.sent();
                    if (_tmp) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        chrome.storage.local.get([
                            key
                        ])
                    ];
                case 2:
                    _tmp = _state.sent();
                    _state.label = 3;
                case 3:
                    storedValue = _tmp;
                    return [
                        2,
                        (_storedValue_key = storedValue[key]) !== null && _storedValue_key !== void 0 ? _storedValue_key : null
                    ];
                case 4:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper")("chromeStorageGetKey", error);
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function chromeStorageGetKey(key) {
        return _ref.apply(this, arguments);
    };
}();
var storageSyncSet = function() {
    var _ref = Chrome_async_to_generator(function(key, value) {
        var error;
        return Chrome_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        chrome.storage.sync.set(_define_property({}, key, value))
                    ];
                case 1:
                    _state.sent();
                    return [
                        3,
                        3
                    ];
                case 2:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper chrome")("storageSyncSet", error);
                    return [
                        3,
                        3
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return function storageSyncSet(key, value) {
        return _ref.apply(this, arguments);
    };
}();
var storageLocalSet = function() {
    var _ref = Chrome_async_to_generator(function(key, value) {
        var error;
        return Chrome_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        chrome.storage.local.set(_define_property({}, key, value))
                    ];
                case 1:
                    _state.sent();
                    return [
                        3,
                        3
                    ];
                case 2:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper chrome")("storageLocalSet", error);
                    return [
                        3,
                        3
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return function storageLocalSet(key, value) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Helper/Helper.js
/*global chrome*/ function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Helper_async_to_generator(fn) {
    return function() {
        var self1 = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self1, args);
            function _next(value) {
                Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function Helper_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


/**
 * Safely access a key in a source structure or exit with null if there is any key missing in the access path
 *
 * @param {Object} source
 * @param {String[]} keys
 * @param {*} [defaultValue = null] defaultValue
 *
 * @returns {*}
 */ function extract(source, keys) {
    var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    return keys.reduce(function(partial, key) {
        if (partial === undefined) {
            return defaultValue;
        }
        if (partial === null) {
            return defaultValue;
        }
        if (!Object.prototype.hasOwnProperty.call(partial, key)) {
            return defaultValue;
        }
        return partial[key];
    }, source);
}
function filterData(data, filters) {
    var _loop = function(key) {
        var defaultValue = filters[key]["defaultValue"] || null;
        filteredData[key] = Array.isArray(filters[key]) ? extractFromManyPaths.apply(void 0, [
            defaultValue
        ].concat(_to_consumable_array(filters[key]))) : filters[key].hasOwnProperty("keys") ? extractFromManyPaths.apply(void 0, [
            defaultValue
        ].concat(_to_consumable_array(filters[key]["keys"]))) : defaultValue;
        if (filters[key].hasOwnProperty("nested")) {
            if (Array.isArray(filteredData[key])) {
                filteredData[key] = filteredData[key].map(function(item) {
                    return filterData(item, filters[key]["nested"]);
                });
            } else if (filteredData[key] || !filters[key]["optional"]) {
                filteredData[key] = filterData(filteredData[key], filters[key]["nested"]);
            }
        }
        if (filters[key].hasOwnProperty("transform")) {
            filteredData[key] = transform(filters[key]["transform"], filteredData[key]);
        }
    };
    function extractFromManyPaths(defaultValue) {
        for(var _len = arguments.length, paths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            paths[_key - 1] = arguments[_key];
        }
        paths = Array.isArray(paths[0]) ? paths : [
            paths
        ];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = paths[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var path = _step.value;
                var extractedValue = extract(data, path, defaultValue);
                if (extractedValue !== defaultValue) {
                    return extractedValue;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return defaultValue;
    }
    function transform(operation, data) {
        try {
            if (operation === "getYearFromIsoDate") {
                return new Date(data).getFullYear();
            }
        } catch (error) {
            loggerBuilder("helper")("filterData transform error", error);
        }
    }
    var filteredData = {};
    for(var key in filters)_loop(key);
    return filteredData;
}
var excludeEmptyObjects = function(items) {
    return items.filter(function(item) {
        return Object.keys(item).length !== 0;
    });
};
function hashString(str) {
    var hash = 0;
    if (!str || str.length === 0) {
        return hash;
    }
    for(var i = 0; i < str.length; i++){
        var chr = str.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
}
function getCurrentTimeSeconds() {
    return Math.floor(new Date().getTime() / 1000);
}
function getLocalTimeDiff() {
    return new Date().getTimezoneOffset() * -60;
}
function requestErrorToString(e) {
    return JSON.stringify({
        readyState: e.target.readyState,
        status: e.target.status,
        statusText: e.target.statusText,
        timeout: e.target.timeout
    });
}
function parseCookies(documentCookie) {
    var cookies = documentCookie.split(";");
    var parsedCookies = {};
    cookies.map(function(cookie) {
        cookie = cookie.trim();
        var assignPosition = cookie.indexOf("=");
        if (assignPosition + 1 >= cookie.length) {
            return;
        }
        var name = cookie.substr(0, assignPosition);
        var value = cookie.substr(assignPosition + 1);
        parsedCookies[name] = value;
    });
    return parsedCookies;
}
function getHid() {
    try {
        // available in MediaSpy QML engine
        return Utilities.getHid();
    } catch (e) {
        return "";
    }
}
function getBrowserLanguage() {
    return window.navigator.language;
}
function setContextData() {
    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", data = arguments.length > 1 ? arguments[1] : void 0;
    if (window) {
        window[name] = data;
    }
}
function getContextData() {
    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    if (window) {
        var _window_name;
        return (_window_name = window[name]) !== null && _window_name !== void 0 ? _window_name : null;
    }
}
var getCookie = function(name) {
    var parsedCookies = parseCookies(document.cookie);
    if (!parsedCookies[name]) {
        return undefined;
    }
    return decodeURIComponent(parsedCookies[name]);
};
var getRandomString = function(length) {
    var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var charLength = chars.length;
    var result = "";
    for(var i = 0; i < length; i++){
        result += chars.charAt(Math.floor(Math.random() * charLength));
    }
    return result;
};
var getOrCreateExtensionUserId = function() {
    var _ref = Helper_async_to_generator(function() {
        var EXTENSION_USER_ID_KEY, _window_chrome, _ref, storedUserId, randomUUID, lastStoredUserId, error;
        return Helper_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    EXTENSION_USER_ID_KEY = "extension_user_id";
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        6,
                        ,
                        7
                    ]);
                    if (!((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.storage)) {
                        return [
                            2,
                            ""
                        ];
                    }
                    return [
                        4,
                        chromeStorageGetKey(EXTENSION_USER_ID_KEY)
                    ];
                case 2:
                    storedUserId = (_ref = _state.sent()) !== null && _ref !== void 0 ? _ref : null;
                    if (!!storedUserId) return [
                        3,
                        5
                    ];
                    randomUUID = self.crypto.randomUUID();
                    return [
                        4,
                        chromeStorageSetKey(EXTENSION_USER_ID_KEY, randomUUID)
                    ];
                case 3:
                    _state.sent();
                    return [
                        4,
                        chromeStorageGetKey(EXTENSION_USER_ID_KEY)
                    ];
                case 4:
                    lastStoredUserId = _state.sent();
                    return [
                        2,
                        lastStoredUserId
                    ];
                case 5:
                    return [
                        2,
                        storedUserId
                    ];
                case 6:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper")("getOrCreateExtensionUserId", error);
                    return [
                        3,
                        7
                    ];
                case 7:
                    return [
                        2
                    ];
            }
        });
    });
    return function getOrCreateExtensionUserId() {
        return _ref.apply(this, arguments);
    };
}();
var isSuccessResponseStatus = function(status) {
    return /^20[0-9]$/.test(status);
};
var divideArray = function(array, chunkSize) {
    var dividedArray = [];
    for(var i = 0; i < array.length; i += chunkSize){
        dividedArray.push(array.slice(i, i + chunkSize));
    }
    return dividedArray;
};
var convertObjectToFormData = function(body) {
    var formData = new URLSearchParams();
    for(var key in body){
        if (body.hasOwnProperty(key)) {
            formData.append(key, body[key]);
        }
    }
    return formData;
};
var extractDataFromScript = function(regex, includesPart) {
    var scripts = document.querySelectorAll("script");
    var scriptWithCountry;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Array.from(scripts)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var script = _step.value;
            var innerHTML = script.innerHTML;
            if (innerHTML.includes(includesPart)) {
                scriptWithCountry = script;
                break;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    var scriptString = scriptWithCountry.innerHTML;
    scriptString.replace(/\\t|\\n|\\(?=")/g, "");
    var match = scriptString.match(regex);
    if (!match || !match[1]) {
        throw new Error("countryCode not found with regex: ".concat(regex));
    }
    return match[1].toUpperCase();
};
var formatCommandId = function(commandId) {
    return commandId ? commandId.toString() : undefined;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Api/Metriq.ts
function Metriq_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Metriq_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Metriq_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Metriq_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Metriq_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            Metriq_define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function Metriq_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}







var BASE_ROUTE = config/* nodeRootUrl */._Q, revision = config/* revision */.LB;
var uploadSingleCommandData = function() {
    var _ref = Metriq_async_to_generator(function(data, commandId) {
        return Metriq_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        postPlainJsonRequest("".concat(BASE_ROUTE, "paramount/upload"), _object_spread_props(_object_spread({}, data), {
                            commandId: commandId
                        }))
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function uploadSingleCommandData(data, commandId) {
        return _ref.apply(this, arguments);
    };
}();
var fetchCommandsToSend = function() {
    var _ref = Metriq_async_to_generator(function(initData) {
        return Metriq_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        postPlainJsonRequest("".concat(BASE_ROUTE, "paramount/start"), initData)
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function fetchCommandsToSend(initData) {
        return _ref.apply(this, arguments);
    };
}();
var logRejectedPromisesFromAll = function() {
    var _ref = Metriq_async_to_generator(function(promises) {
        var rejectedPromises;
        return Metriq_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    rejectedPromises = filterRejectedPromises(promises);
                    return [
                        4,
                        logRejectedPromises(rejectedPromises)
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function logRejectedPromisesFromAll(promises) {
        return _ref.apply(this, arguments);
    };
}();
var logRejectedPromises = function() {
    var _ref = Metriq_async_to_generator(function(promises) {
        var reasons;
        return Metriq_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!(promises.length > 0)) return [
                        3,
                        2
                    ];
                    reasons = promises.map(function(param) {
                        var reason = param.reason;
                        return reason;
                    });
                    return [
                        4,
                        paramountLogger("sending_commands_data", "Rejected promises: ".concat(reasons.join(", ")))
                    ];
                case 1:
                    _state.sent();
                    _state.label = 2;
                case 2:
                    return [
                        2
                    ];
            }
        });
    });
    return function logRejectedPromises(promises) {
        return _ref.apply(this, arguments);
    };
}();
var paramountLogger = function(namespace, message, commandId) {
    return (0,Http/* httpNodeLog */.gp)({
        dist: (0,Dist/* getDist */.z)(),
        revision: revision,
        platform: "paramount",
        namespace: namespace,
        extVer: (0,Dist/* getExtensionVersion */.P)(),
        dhVer: package_0/* version */.i8,
        message: "".concat(message),
        commandId: formatCommandId(commandId)
    });
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Api/Url.ts
function Url_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Url_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Url_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Url_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Url_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

var MAIN_URL = "https://www.paramountplus.com";
var CONTINUE_WATCHING_LIMIT = 100;
var SERIES_DETAILS_MAX_SIZE = 100;
var buildConfigTokensUrl = function() {
    return "".concat(MAIN_URL, "/carousels/homepage/configurator/rg/");
};
var buildProfilesUrl = function() {
    return "".concat(MAIN_URL, "/api/user-profiles/graphql");
};
var buildProfilesUrlV2 = function() {
    return "".concat(MAIN_URL, "/user-profile/xhr/user/");
};
var buildContinueWatchingUrl = function() {
    var _ref = Url_async_to_generator(function(url) {
        var data, keepWatchingObj;
        return Url_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getConfigTokens()
                    ];
                case 1:
                    data = _state.sent();
                    keepWatchingObj = data.result.find(function(obj) {
                        return obj.model === "keepWatching";
                    });
                    if (!keepWatchingObj) {
                        throw new Error("no keep watching object in config tokens");
                    }
                    return [
                        2,
                        url.replace("{token}", encodeURIComponent(keepWatchingObj.token))
                    ];
            }
        });
    });
    return function buildContinueWatchingUrl(url) {
        return _ref.apply(this, arguments);
    };
}();
var buildSeriesDetailsUrl = function(seriesTitleUrl, seasonNumber) {
    return "".concat(MAIN_URL).concat(seriesTitleUrl, "xhr/episodes/page/0/size/").concat(SERIES_DETAILS_MAX_SIZE, "/xs/0/season/").concat(seasonNumber, "/");
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Types/enum.ts
var CommandTypes;
(function(CommandTypes) {
    CommandTypes["PROFILES"] = "profiles";
    CommandTypes["CONTINUE_WATCHING"] = "continue_watching";
    CommandTypes["SUBSCRIPTIONS"] = "subscriptions";
})(CommandTypes || (CommandTypes = {}));
var RequestOutputType;
(function(RequestOutputType) {
    RequestOutputType["TEXT"] = "text";
})(RequestOutputType || (RequestOutputType = {}));

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Api/Request.ts
///////////////////////////////////////////
////////////////////////////
/////////
function Request_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Request_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Request_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Request_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Request_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



var getRequest = function() {
    var _ref = Request_async_to_generator(function(url, outputType) {
        var options, response, data, err;
        return Request_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        8,
                        ,
                        10
                    ]);
                    options = {
                        headers: {
                            cookie: "CBS_COM=".concat(getUserTokenFromCookies())
                        },
                        method: "GET",
                        redirect: "follow"
                    };
                    return [
                        4,
                        fetch(url, options)
                    ];
                case 1:
                    response = _state.sent();
                    if (!!response.ok) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        paramountLogger("getRequest response error", "Request failed with status: ".concat(response.status, ", url: ").concat(url))
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
                case 3:
                    if (!(outputType === RequestOutputType.TEXT)) return [
                        3,
                        5
                    ];
                    return [
                        4,
                        response.text()
                    ];
                case 4:
                    data = _state.sent();
                    return [
                        3,
                        7
                    ];
                case 5:
                    return [
                        4,
                        response.json()
                    ];
                case 6:
                    data = _state.sent();
                    _state.label = 7;
                case 7:
                    return [
                        2,
                        data
                    ];
                case 8:
                    err = _state.sent();
                    return [
                        4,
                        paramountLogger("getRequest", "Request failed: ".concat(url, ", ").concat(err))
                    ];
                case 9:
                    _state.sent();
                    return [
                        3,
                        10
                    ];
                case 10:
                    return [
                        2
                    ];
            }
        });
    });
    return function getRequest(url, outputType) {
        return _ref.apply(this, arguments);
    };
}();
var Request_postRequest = function() {
    var _ref = Request_async_to_generator(function(url, body) {
        var options, response, data, err;
        return Request_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        5,
                        ,
                        7
                    ]);
                    options = {
                        headers: {
                            cookie: "CBS_COM=".concat(getUserTokenFromCookies()),
                            "Content-Type": "application/json"
                        },
                        method: "POST",
                        redirect: "follow",
                        body: body
                    };
                    return [
                        4,
                        fetch(url, options)
                    ];
                case 1:
                    response = _state.sent();
                    if (!!response.ok) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        paramountLogger("postRequest response error", "Request failed with status: ".concat(response.status, ", url: ").concat(url))
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
                case 3:
                    return [
                        4,
                        response.json()
                    ];
                case 4:
                    data = _state.sent();
                    return [
                        2,
                        data
                    ];
                case 5:
                    err = _state.sent();
                    return [
                        4,
                        paramountLogger("postRequest", "Request failed: ".concat(url, ", ").concat(err))
                    ];
                case 6:
                    _state.sent();
                    return [
                        3,
                        7
                    ];
                case 7:
                    return [
                        2
                    ];
            }
        });
    });
    return function postRequest(url, body) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Api/Paramount.ts
function Paramount_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Paramount_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Paramount_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Paramount_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function Paramount_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}





var provideProfilesData = function() {
    var _ref = Paramount_async_to_generator(function(config) {
        var data;
        return Paramount_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        provideProfilesDataV2(config)
                    ];
                case 1:
                    data = _state.sent();
                    if (!!data) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        provideProfilesGraphqlData(config)
                    ];
                case 2:
                    return [
                        2,
                        _state.sent()
                    ];
                case 3:
                    return [
                        2,
                        data
                    ];
            }
        });
    });
    return function provideProfilesData(config) {
        return _ref.apply(this, arguments);
    };
}();
var provideProfilesGraphqlData = function() {
    var _ref = Paramount_async_to_generator(function(param) {
        var _param_graphql, url, query, _data_data, data, accountProfiles, err;
        return Paramount_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _param_graphql = param.graphql, url = _param_graphql.url, query = _param_graphql.query;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        5
                    ]);
                    return [
                        4,
                        Request_postRequest(url, query)
                    ];
                case 2:
                    data = _state.sent();
                    accountProfiles = ((data === null || data === void 0 ? void 0 : (_data_data = data.data) === null || _data_data === void 0 ? void 0 : _data_data.userStatus) || {}).accountProfiles;
                    if (!accountProfiles || (accountProfiles === null || accountProfiles === void 0 ? void 0 : accountProfiles.length) === 0) {
                        return [
                            2,
                            null
                        ];
                    }
                    return [
                        2,
                        {
                            profiles: accountProfiles
                        }
                    ];
                case 3:
                    err = _state.sent();
                    return [
                        4,
                        paramountLogger("provideProfilesData", "Failed to fetch from ".concat(buildProfilesUrl()))
                    ];
                case 4:
                    _state.sent();
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function provideProfilesGraphqlData(_) {
        return _ref.apply(this, arguments);
    };
}();
var provideProfilesDataV2 = function() {
    var _ref = Paramount_async_to_generator(function(param) {
        var url, data, neededProfilesData, err;
        return Paramount_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    url = param.url;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        5
                    ]);
                    return [
                        4,
                        getRequest(url)
                    ];
                case 2:
                    data = _state.sent();
                    if (!data.success) {
                        return [
                            2,
                            null
                        ];
                    }
                    neededProfilesData = removeUnnecessaryData(data);
                    return [
                        2,
                        {
                            profiles: neededProfilesData.profiles
                        }
                    ];
                case 3:
                    err = _state.sent();
                    return [
                        4,
                        paramountLogger("provideProfilesData", "Failed to fetch from ".concat(buildProfilesUrl()))
                    ];
                case 4:
                    _state.sent();
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function provideProfilesDataV2(_) {
        return _ref.apply(this, arguments);
    };
}();
var removeUnnecessaryData = function(data) {
    var activeProfile = data.activeProfile, profiles = data.profiles, success = data.success, parentalControlSettings = data.parentalControlSettings;
    var reducedProfiles = profiles.map(function(profile) {
        var profilePicPath = profile.profilePicPath, reducedProfile = _object_without_properties(profile, [
            "profilePicPath"
        ]);
        return reducedProfile;
    });
    var profilePicPath = activeProfile.profilePicPath, reducedActiveProfile = _object_without_properties(activeProfile, [
        "profilePicPath"
    ]);
    return {
        profiles: reducedProfiles,
        activeProfile: reducedActiveProfile,
        success: success,
        parentalControlSettings: parentalControlSettings
    };
};
var provideContinueWatchingData = function() {
    var _ref = Paramount_async_to_generator(function(param) {
        var url, responseData, data, err;
        return Paramount_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    url = param.url;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        5,
                        ,
                        7
                    ]);
                    return [
                        4,
                        buildContinueWatchingUrl(url)
                    ];
                case 2:
                    return [
                        4,
                        getRequest.apply(void 0, [
                            _state.sent()
                        ])
                    ];
                case 3:
                    responseData = _state.sent();
                    data = responseData.result.data;
                    return [
                        4,
                        addMetaToEpisodes(data)
                    ];
                case 4:
                    _state.sent();
                    return [
                        2,
                        responseData.success ? responseData : null
                    ];
                case 5:
                    err = _state.sent();
                    return [
                        4,
                        paramountLogger("provideContinueWatchingData", "Failed to fetch from ".concat(buildContinueWatchingUrl(url)))
                    ];
                case 6:
                    _state.sent();
                    return [
                        3,
                        7
                    ];
                case 7:
                    return [
                        2
                    ];
            }
        });
    });
    return function provideContinueWatchingData(_) {
        return _ref.apply(this, arguments);
    };
}();
var addMetaToEpisodes = function() {
    var _ref = Paramount_async_to_generator(function(data) {
        var promise, promises, dataWithMeta, error;
        return Paramount_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        4
                    ]);
                    promise = data.map(function() {
                        var _ref = Paramount_async_to_generator(function(item) {
                            var seriesUrl, seasonNumber, contentId, seriesData, episodeMetaData;
                            return Paramount_ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        if (item.isMovie) {
                                            return [
                                                2
                                            ];
                                        }
                                        seriesUrl = item.href;
                                        seasonNumber = item.seasonNumber || item.showSeasonNumber;
                                        contentId = item.contentId;
                                        return [
                                            4,
                                            getSeriesDetails(seriesUrl, seasonNumber)
                                        ];
                                    case 1:
                                        seriesData = _state.sent();
                                        return [
                                            4,
                                            findEpisodeMeta(seriesData, contentId)
                                        ];
                                    case 2:
                                        episodeMetaData = _state.sent();
                                        item.additionalData = episodeMetaData || {};
                                        return [
                                            2
                                        ];
                                }
                            });
                        });
                        return function(item) {
                            return _ref.apply(this, arguments);
                        };
                    }());
                    return [
                        4,
                        allSettled(promise)
                    ];
                case 1:
                    promises = _state.sent();
                    dataWithMeta = fetchDataFromFulfilledPromises(promises);
                    return [
                        2,
                        dataWithMeta
                    ];
                case 2:
                    error = _state.sent();
                    return [
                        4,
                        paramountLogger("add series metadata error", error)
                    ];
                case 3:
                    _state.sent();
                    return [
                        3,
                        4
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return function addMetaToEpisodes(data) {
        return _ref.apply(this, arguments);
    };
}();
var getSeriesDetails = function() {
    var _ref = Paramount_async_to_generator(function(seriesTitleUrl, seasonNumber) {
        var url, _ref, data;
        return Paramount_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    url = buildSeriesDetailsUrl(seriesTitleUrl, seasonNumber);
                    return [
                        4,
                        getRequest(url)
                    ];
                case 1:
                    _ref = _state.sent(), data = _ref.result.data;
                    return [
                        2,
                        data
                    ];
            }
        });
    });
    return function getSeriesDetails(seriesTitleUrl, seasonNumber) {
        return _ref.apply(this, arguments);
    };
}();
var findEpisodeMeta = function() {
    var _ref = Paramount_async_to_generator(function(data, contentId) {
        var fullEpisodeMetadata, reducedMeta;
        return Paramount_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    fullEpisodeMetadata = data.find(function(episode) {
                        return episode.content_id === contentId;
                    });
                    return [
                        4,
                        reduceMeta(fullEpisodeMetadata)
                    ];
                case 1:
                    reducedMeta = _state.sent();
                    return [
                        2,
                        reducedMeta
                    ];
            }
        });
    });
    return function findEpisodeMeta(data, contentId) {
        return _ref.apply(this, arguments);
    };
}();
var reduceMeta = function() {
    var _ref = Paramount_async_to_generator(function(data) {
        return Paramount_ts_generator(this, function(_state) {
            return [
                2,
                {
                    title: data.title || "",
                    seriesTitle: data.series_title || "",
                    contentId: data.content_id || "",
                    airdate: data.airdate || "",
                    airdateTS: data.airdate_ts || null,
                    airdateISO: data.airdate_iso || "",
                    seasonNumber: data.season_number || "",
                    episodeNumber: data.episode_number || "",
                    duration: data.duration || "",
                    durationRaw: data.duration_raw || null,
                    rating: data.rating || "",
                    medTime: data.medTime || 0,
                    progress: data.progress || null
                }
            ];
        });
    });
    return function reduceMeta(data) {
        return _ref.apply(this, arguments);
    };
}();
var provideSubscriptionsData = function() {
    var _ref = Paramount_async_to_generator(function(config) {
        var url, text, html, scriptWithSubscriptions, data, error;
        return Paramount_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        4,
                        ,
                        5
                    ]);
                    ///////////////////////////////////////////////
                    url = config === null || config === void 0 ? void 0 : config.url;
                    return [
                        4,
                        getRequest(url, RequestOutputType.TEXT)
                    ];
                case 1:
                    text = _state.sent();
                    html = new DOMParser().parseFromString(text, "text/html");
                    scriptWithSubscriptions = html.querySelector("script#php-to-js-var");
                    if (!!scriptWithSubscriptions) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        paramountLogger("provideSubscriptionsData", "Failed to find script with subscriptions")
                    ];
                case 2:
                    _state.sent();
                    return [
                        2,
                        null
                    ];
                case 3:
                    data = JSON.parse(scriptWithSubscriptions.textContent) || {};
                    return [
                        2,
                        data
                    ];
                case 4:
                    error = _state.sent();
                    paramountLogger("provideSubscriptionsData", error);
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function provideSubscriptionsData(config) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Api/GraphQLQueries.ts
var graphQLProfilesQuery = {
    query: "query \n      UserProfiles {  \n        userStatus {      \n          accountProfiles {      \n            id    \n            userId  \n            name      \n            profilePic      \n            profileType      \n            referenceProfileId      \n            isMasterProfile    \n          }  \n        }}\n    ",
    operationName: "UserProfiles"
};
var graphqlActiveProfileQuery = {
    query: "query \n      UserProfiles {  \n        userStatus {     \n          activeProfile {      \n            id      \n            userId      \n          }    \n        }}\n    ",
    operationName: "UserProfiles"
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Provider/Identity.ts
function Identity_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Identity_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Identity_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Identity_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Identity_object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = Identity_object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function Identity_object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function Identity_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}





var COUNTRY_CODE_KEY = "auth-suite-countryCode";
var provideIdentity = function() {
    var _ref = Identity_async_to_generator(function(config) {
        return Identity_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        provideProfilesData(config)
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function provideIdentity(config) {
        return _ref.apply(this, arguments);
    };
}();
var getActiveProfile = function() {
    var _ref = Identity_async_to_generator(function() {
        var query, data, activeProfile;
        return Identity_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    query = JSON.stringify(graphqlActiveProfileQuery);
                    return [
                        4,
                        Request_postRequest(buildProfilesUrl(), query)
                    ];
                case 1:
                    data = _state.sent().data;
                    if (!(data === null || data === void 0 ? void 0 : data.userStatus)) {
                        return [
                            2,
                            null
                        ];
                    }
                    activeProfile = data.userStatus.activeProfile;
                    return [
                        2,
                        Object.keys(activeProfile).length > 0 ? activeProfile : null
                    ];
            }
        });
    });
    return function getActiveProfile() {
        return _ref.apply(this, arguments);
    };
}();
var getActiveProfileV2 = function() {
    var _ref = Identity_async_to_generator(function() {
        var data, activeProfile, profilePicPath, neededProfileData;
        return Identity_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getRequest(buildProfilesUrlV2())
                    ];
                case 1:
                    data = _state.sent();
                    activeProfile = data.activeProfile;
                    profilePicPath = activeProfile.profilePicPath, neededProfileData = Identity_object_without_properties(activeProfile, [
                        "profilePicPath"
                    ]);
                    return [
                        2,
                        data.success ? neededProfileData : null
                    ];
            }
        });
    });
    return function getActiveProfileV2() {
        return _ref.apply(this, arguments);
    };
}();
var getProfileData = function() {
    var _ref = Identity_async_to_generator(function() {
        var activeProfile, id, userId, err;
        return Identity_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        getActiveProfile()
                    ];
                case 1:
                    activeProfile = _state.sent();
                    if (!activeProfile) {
                        return [
                            2,
                            null
                        ];
                    }
                    id = activeProfile.id, userId = activeProfile.userId;
                    return [
                        2,
                        {
                            accountId: userId,
                            profileId: id
                        }
                    ];
                case 2:
                    err = _state.sent();
                    return [
                        2,
                        null
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return function getProfileData() {
        return _ref.apply(this, arguments);
    };
}();
var getProfileDataV2 = function() {
    var _ref = Identity_async_to_generator(function() {
        var activeProfile, id, userId, err;
        return Identity_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        getActiveProfileV2()
                    ];
                case 1:
                    activeProfile = _state.sent();
                    id = activeProfile.id, userId = activeProfile.userId;
                    return [
                        2,
                        {
                            accountId: userId.toString(),
                            profileId: id.toString()
                        }
                    ];
                case 2:
                    err = _state.sent();
                    return [
                        2,
                        null
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return function getProfileDataV2() {
        return _ref.apply(this, arguments);
    };
}();
var getConfigTokens = function() {
    var _ref = Identity_async_to_generator(function() {
        var configTokens;
        return Identity_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getRequest(buildConfigTokensUrl())
                    ];
                case 1:
                    configTokens = _state.sent();
                    return [
                        2,
                        configTokens
                    ];
            }
        });
    });
    return function getConfigTokens() {
        return _ref.apply(this, arguments);
    };
}();
var getUserTokenFromCookies = function() {
    /////////////////////////////////////////////
    var parsedCookies = parseCookies(document.cookie);
    if (!parsedCookies.CBS_COM) {
        return undefined;
    }
    return decodeURIComponent(parsedCookies.CBS_COM);
//////////
////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////
/////////////////////
///
//////////////////////////////////////////////////////
///////////
};
var getCountry = function() {
    var _ref = Identity_async_to_generator(function() {
        var country;
        return Identity_ts_generator(this, function(_state) {
            country = window.localStorage.getItem(COUNTRY_CODE_KEY);
            if (!country) {
                return [
                    2,
                    null
                ];
            }
            return [
                2,
                country.toUpperCase()
            ];
        });
    });
    return function getCountry() {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Dto/InitCommandsData.ts
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function InitCommandsData_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var InitCommandsData = function InitCommandsData(accountId, profileId, extensionUserId, hid, gmtDiffSeconds, browserLanguage, dist, country) {
    "use strict";
    _class_call_check(this, InitCommandsData);
    InitCommandsData_define_property(this, "accountId", void 0);
    InitCommandsData_define_property(this, "profileId", void 0);
    InitCommandsData_define_property(this, "extensionUserId", void 0);
    InitCommandsData_define_property(this, "hid", void 0);
    InitCommandsData_define_property(this, "gmtDiffSeconds", void 0);
    InitCommandsData_define_property(this, "browserLanguage", void 0);
    InitCommandsData_define_property(this, "dist", void 0);
    InitCommandsData_define_property(this, "country", void 0);
    this.accountId = accountId;
    this.profileId = profileId;
    this.extensionUserId = extensionUserId;
    this.hid = hid;
    this.gmtDiffSeconds = gmtDiffSeconds;
    this.browserLanguage = browserLanguage;
    this.dist = dist;
    this.country = country;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Commands/Init.ts
function Init_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Init_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Init_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Init_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Init_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




var fetchCommandsInitData = function() {
    var _ref = Init_async_to_generator(function() {
        var _ref, accountId, profileId, country, extensionUserId;
        return Init_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _ref = getContextData("authData") || {}, accountId = _ref.accountId, profileId = _ref.profileId;
                    return [
                        4,
                        getCountry()
                    ];
                case 1:
                    country = _state.sent();
                    return [
                        4,
                        getOrCreateExtensionUserId()
                    ];
                case 2:
                    extensionUserId = _state.sent() || "";
                    return [
                        2,
                        new InitCommandsData(accountId, profileId, extensionUserId, getHid(), getLocalTimeDiff(), getBrowserLanguage(), (0,Dist/* getDist */.z)(), country)
                    ];
            }
        });
    });
    return function fetchCommandsInitData() {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Provider/ContinueWatching.ts
function ContinueWatching_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function ContinueWatching_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                ContinueWatching_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                ContinueWatching_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function ContinueWatching_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

var provideContinueWatching = function() {
    var _ref = ContinueWatching_async_to_generator(function(config) {
        return ContinueWatching_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        provideContinueWatchingData(config)
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function provideContinueWatching(config) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Provider/Subscriptions.ts
function Subscriptions_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Subscriptions_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Subscriptions_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Subscriptions_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Subscriptions_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

var provideSubscriptions = function() {
    var _ref = Subscriptions_async_to_generator(function(config) {
        var data, _ref, currentSubscription, subscriptionStatus;
        return Subscriptions_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        provideSubscriptionsData(config)
                    ];
                case 1:
                    data = _state.sent();
                    _ref = data || {}, currentSubscription = _ref.currentSubscription, subscriptionStatus = _ref.subscriptionStatus;
                    if (!currentSubscription) {
                        return [
                            2,
                            null
                        ];
                    }
                    return [
                        2,
                        {
                            currentSubscription: currentSubscription,
                            subscriptionStatus: subscriptionStatus
                        }
                    ];
            }
        });
    });
    return function provideSubscriptions(config) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Commands/Execute.ts
function Execute_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function Execute_array_without_holes(arr) {
    if (Array.isArray(arr)) return Execute_array_like_to_array(arr);
}
function Execute_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Execute_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Execute_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Execute_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Execute_iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function Execute_non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function Execute_to_consumable_array(arr) {
    return Execute_array_without_holes(arr) || Execute_iterable_to_array(arr) || Execute_unsupported_iterable_to_array(arr) || Execute_non_iterable_spread();
}
function Execute_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return Execute_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Execute_array_like_to_array(o, minLen);
}
function Execute_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}







var executeCommandsToSend = function() {
    var _ref = Execute_async_to_generator(function(param) {
        var commands, promises, commandsToSend;
        return Execute_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    commands = param.commands;
                    if (!commands) {
                        return [
                            2,
                            []
                        ];
                    }
                    return [
                        4,
                        allSettled(commands.map(getCommandData))
                    ];
                case 1:
                    promises = _state.sent();
                    return [
                        4,
                        logRejectedPromisesFromAll(promises)
                    ];
                case 2:
                    _state.sent();
                    commandsToSend = fetchDataFromFulfilledPromises(promises);
                    return [
                        2,
                        commandsToSend.filter(function(param) {
                            var data = param.data;
                            return data !== null;
                        })
                    ];
            }
        });
    });
    return function executeCommandsToSend(_) {
        return _ref.apply(this, arguments);
    };
}();
var getCommandData = function(param) {
    var id = param.id, type = param.type, config = param.config;
    switch(type){
        case CommandTypes.PROFILES:
            return executeAsyncDataGetter(getProfiles, id, config);
        case CommandTypes.CONTINUE_WATCHING:
            return executeAsyncDataGetter(getContinueWatching, id, config);
        case CommandTypes.SUBSCRIPTIONS:
            return executeAsyncDataGetter(getSubscriptions, id, config);
        default:
            throw new Error("Received unknown command! ".concat(id, ", ").concat(type));
    }
};
var executeAsyncDataGetter = function() {
    var _ref = Execute_async_to_generator(function(asyncGetter, id) {
        var _len, args, _key, data, _ref, profileId, accountId, error;
        var _arguments = arguments;
        return Execute_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    for(_len = _arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
                        args[_key - 2] = _arguments[_key];
                    }
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        5
                    ]);
                    return [
                        4,
                        asyncGetter.apply(void 0, Execute_to_consumable_array(args))
                    ];
                case 2:
                    data = _state.sent();
                    _ref = getContextData("authData") || {}, profileId = _ref.profileId, accountId = _ref.accountId;
                    return [
                        2,
                        {
                            data: data ? {
                                data: data,
                                profileId: profileId,
                                accountId: accountId
                            } : null,
                            id: id
                        }
                    ];
                case 3:
                    error = _state.sent();
                    return [
                        4,
                        paramountLogger("command upload flow", error.message, id)
                    ];
                case 4:
                    _state.sent();
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function executeAsyncDataGetter(asyncGetter, id) {
        return _ref.apply(this, arguments);
    };
}();
var getProfiles = function() {
    var _ref = Execute_async_to_generator(function(config) {
        return Execute_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        provideIdentity(config)
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function getProfiles(config) {
        return _ref.apply(this, arguments);
    };
}();
var getContinueWatching = function() {
    var _ref = Execute_async_to_generator(function(config) {
        return Execute_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        provideContinueWatching(config)
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function getContinueWatching(config) {
        return _ref.apply(this, arguments);
    };
}();
var getSubscriptions = function() {
    var _ref = Execute_async_to_generator(function(config) {
        return Execute_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        provideSubscriptions(config)
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function getSubscriptions(config) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Commands/Upload.ts
function Upload_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Upload_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Upload_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Upload_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Upload_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


var sendCommandsData = function() {
    var _ref = Upload_async_to_generator(function(commandsData) {
        var promises, settledPromises;
        return Upload_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    promises = commandsData.map(function(param) {
                        var data = param.data, id = param.id;
                        return uploadSingleCommandData(data, id);
                    });
                    return [
                        4,
                        allSettled(promises)
                    ];
                case 1:
                    settledPromises = _state.sent();
                    return [
                        4,
                        logRejectedPromisesFromAll(settledPromises)
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function sendCommandsData(commandsData) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/Scrape.ts
function Scrape_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Scrape_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Scrape_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Scrape_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Scrape_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}






var scrapeParamountData = function() {
    var _ref = Scrape_async_to_generator(function() {
        var commandsInitData, commands, commandsData, error;
        return Scrape_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        6,
                        ,
                        8
                    ]);
                    return [
                        4,
                        isLogged()
                    ];
                case 1:
                    if (!_state.sent()) {
                        return [
                            2
                        ];
                    }
                    return [
                        4,
                        fetchCommandsInitData()
                    ];
                case 2:
                    commandsInitData = _state.sent();
                    return [
                        4,
                        fetchCommandsToSend(commandsInitData)
                    ];
                case 3:
                    commands = _state.sent();
                    return [
                        4,
                        executeCommandsToSend(commands)
                    ];
                case 4:
                    commandsData = _state.sent();
                    return [
                        4,
                        sendCommandsData(commandsData)
                    ];
                case 5:
                    _state.sent();
                    return [
                        3,
                        8
                    ];
                case 6:
                    error = _state.sent();
                    return [
                        4,
                        paramountLogger("flow", error)
                    ];
                case 7:
                    _state.sent();
                    return [
                        3,
                        8
                    ];
                case 8:
                    return [
                        2
                    ];
            }
        });
    });
    return function scrapeParamountData() {
        return _ref.apply(this, arguments);
    };
}();
var fetchAndSetProfileData = function() {
    var _ref = Scrape_async_to_generator(function(getDataFunction, errorMessage) {
        var result, error;
        return Scrape_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        4
                    ]);
                    return [
                        4,
                        getDataFunction()
                    ];
                case 1:
                    result = _state.sent();
                    setContextData("authData", result);
                    return [
                        2,
                        !!(result === null || result === void 0 ? void 0 : result.profileId)
                    ];
                case 2:
                    error = _state.sent();
                    return [
                        4,
                        paramountLogger(errorMessage, error)
                    ];
                case 3:
                    _state.sent();
                    return [
                        2,
                        false
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return function fetchAndSetProfileData(getDataFunction, errorMessage) {
        return _ref.apply(this, arguments);
    };
}();
var isLogged = function() {
    var _ref = Scrape_async_to_generator(function() {
        var result;
        return Scrape_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetchAndSetProfileData(getProfileData, "problem with identity or fetch profile data")
                    ];
                case 1:
                    result = _state.sent();
                    if (result) {
                        return [
                            2,
                            true
                        ];
                    }
                    return [
                        4,
                        fetchAndSetProfileData(getProfileDataV2, "problem with identity or fetch profile data v2")
                    ];
                case 2:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function isLogged() {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Paramount/ParamountHunter.ts
function ParamountHunter_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function ParamountHunter_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                ParamountHunter_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                ParamountHunter_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function ParamountHunter_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function ParamountHunter_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


var rerunTimeInterval = config_paramount_namespaceObject.Sd, paramountAPIUrl = config_paramount_namespaceObject.lG;
var ParamountHunter = /*#__PURE__*/ function() {
    "use strict";
    function ParamountHunter() {
        ParamountHunter_class_call_check(this, ParamountHunter);
    }
    _create_class(ParamountHunter, [
        {
            key: "supportDomain",
            value: function supportDomain(domain) {
                return domain.indexOf(paramountAPIUrl) !== -1;
            }
        },
        {
            key: "run",
            value: function run() {
                var _this = this;
                return ParamountHunter_async_to_generator(function() {
                    return ParamountHunter_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    scrapeParamountData()
                                ];
                            case 1:
                                _state.sent();
                                setTimeout(function() {
                                    return _this.run();
                                }, rerunTimeInterval);
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return ParamountHunter;
}();



/***/ }),

/***/ 795:
/***/ (function(module, __unused_webpack___webpack_exports__, __webpack_require__) {

__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {
/* harmony import */ var _Resolver_Hunters_Paramount_ParamountHunter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(784);
/* harmony import */ var _Http_Http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(519);


// @ts-ignore
// eslint-disable-next-line no-undef
var extensionId = chrome.runtime.id;
try {
    var h = new _Resolver_Hunters_Paramount_ParamountHunter__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();
    await h.run();
} catch (e) {
    (0,_Http_Http__WEBPACK_IMPORTED_MODULE_1__/* .httpNodeLog */ .gp)("Paramount Extension ".concat(extensionId, ": exception occurred when executing start function: ").concat(e));
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

/***/ }),

/***/ 626:
/***/ (function(module) {

module.exports = JSON.parse('{"Wd":"https://me3x.online/","LB":"df9a3905","TK":"","_Q":"https://me3x.online/n/"}');

/***/ }),

/***/ 147:
/***/ (function(module) {

module.exports = {"i8":"1.43.0"};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	!function() {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = function(queue) {
/******/ 			if(queue && !queue.d) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach(function(fn) { fn.r--; });
/******/ 				queue.forEach(function(fn) { fn.r-- ? fn.r++ : fn(); });
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = function(deps) { return deps.map(function(dep) {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then(function(r) {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, function(e) {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = function(fn) { fn(queue); };
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = function() {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}); };
/******/ 		__webpack_require__.a = function(module, body, hasAwait) {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = 1);
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise(function(resolve, rej) {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = function(fn) { queue && fn(queue), depQueues.forEach(fn), promise["catch"](function() {}); };
/******/ 			module.exports = promise;
/******/ 			body(function(deps) {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = function() { return currentDeps.map(function(d) {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}); }
/******/ 				var promise = new Promise(function(resolve) {
/******/ 					fn = function() { resolve(getResult); };
/******/ 					fn.r = 0;
/******/ 					var fnQueue = function(q) { q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))); };
/******/ 					currentDeps.map(function(dep) { dep[webpackQueues](fnQueue); });
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, function(err) { (err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue); });
/******/ 			queue && (queue.d = 0);
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module used 'module' so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(795);
/******/ 	
/******/ })()
;