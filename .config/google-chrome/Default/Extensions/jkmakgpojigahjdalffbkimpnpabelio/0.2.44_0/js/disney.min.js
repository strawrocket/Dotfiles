/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 270:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": function() { return /* binding */ getExtensionVersion; },
/* harmony export */   "z": function() { return /* binding */ getDist; }
/* harmony export */ });
/* harmony import */ var _config_config_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(626);
/*global chrome*/ 
var getDist = function() {
    var dist = _config_config_json__WEBPACK_IMPORTED_MODULE_0__/* .dist */ .TK;
    if (dist) {
        return dist;
    }
    try {
        return chrome.runtime.id;
    } catch (e) {
        console.error(e);
        return "";
    }
};
var getExtensionVersion = function() {
    var _window;
    if (window && ((_window = window) === null || _window === void 0 ? void 0 : _window.chrome)) {
        return window.chrome.runtime.getManifest().version;
    }
    return "";
};


/***/ }),

/***/ 519:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CQ": function() { return /* binding */ loggerBuilder; },
/* harmony export */   "gp": function() { return /* binding */ httpNodeLog; }
/* harmony export */ });
/* unused harmony exports httpLog, http, requestJson, requestDocument */
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(626);
/* harmony import */ var _Helper_Dist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(270);
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(147);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



var BASE_ROUTE = _config_config__WEBPACK_IMPORTED_MODULE_0__/* .rootUrl */ .Wd, revision = _config_config__WEBPACK_IMPORTED_MODULE_0__/* .revision */ .LB, nodeRootUrl = _config_config__WEBPACK_IMPORTED_MODULE_0__/* .nodeRootUrl */ ._Q;
///////////////////////////////////////////
////////////////////////////
/////////
/**
 * Build http logger
 * @param {string} url for logging
 * @return {function(object): Promise<void>}
 */ var buildHttpLogger = function(url) {
    return function(message) {
        return fetch(url, {
            method: "POST",
            body: JSON.stringify(message),
            headers: {
                "Content-Type": "application/json"
            }
        });
    };
};
/**
 * Log message via http
 * @param {string} message message to log
 * @return {Promise<void>}
 */ var httpLog = buildHttpLogger(BASE_ROUTE + "js/dlog");
var httpNodeLog = buildHttpLogger(nodeRootUrl + "js/dlog");
var http = function() {
    var _ref = _async_to_generator(function(url, method, data, callback, error) {
        var xhrHeader, async, requestOptions, response, responseText, exception;
        var _arguments = arguments;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    xhrHeader = _arguments.length > 5 && _arguments[5] !== void 0 ? _arguments[5] : false, async = _arguments.length > 6 && _arguments[6] !== void 0 ? _arguments[6] : true;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        4,
                        ,
                        5
                    ]);
                    requestOptions = {
                        method: method
                    };
                    if (data) {
                        requestOptions["body"] = data;
                    }
                    if (xhrHeader) {
                        requestOptions["headers"] = {};
                        requestOptions["headers"]["X-Requested-With"] = "XMLHttpRequest";
                    }
                    return [
                        4,
                        fetch(url, requestOptions)
                    ];
                case 2:
                    response = _state.sent();
                    return [
                        4,
                        response.text()
                    ];
                case 3:
                    responseText = _state.sent();
                    if (callback) {
                        callback({
                            status: response.status,
                            responseText: responseText
                        });
                    }
                    if (!async) {
                        return [
                            2,
                            responseText
                        ];
                    }
                    return [
                        3,
                        5
                    ];
                case 4:
                    exception = _state.sent();
                    error(exception);
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function http(url, method, data, callback, error) {
        return _ref.apply(this, arguments);
    };
}();
/**
 * @param {string} method
 * @param {string} url
 * @param {object} data
 * @param {boolean} xhrHeader
 * @returns {Promise<object>}
 */ var requestJson = function(method, url, data) {
    var xhrHeader = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    return new Promise(function(resolve, reject) {
        http(url, method, data, resolve, reject, xhrHeader);
    }).then(function(response) {
        if (response.status < 200 || response.status >= 300) {
            throw buildHttpError(method, url, response.status);
        }
        return response.responseText;
    }).then(JSON.parse);
};
var requestDocument = function(method, url, data) {
    var xhrHeader = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    return new Promise(function(resolve, reject) {
        http(url, method, JSON.stringify(data), resolve, reject, xhrHeader);
    }).then(function(response) {
        if (response.status < 200 || response.status >= 300) {
            throw buildHttpError(method, url, response.status);
        }
        return response.responseText;
    });
};
var loggerBuilder = function(resolver) {
    return function(namespace, message) {
        return httpNodeLog({
            dist: (0,_Helper_Dist__WEBPACK_IMPORTED_MODULE_1__/* .getDist */ .z)(),
            revision: revision,
            namespace: namespace,
            extVer: (0,_Helper_Dist__WEBPACK_IMPORTED_MODULE_1__/* .getExtensionVersion */ .P)(),
            dhVer: _package_json__WEBPACK_IMPORTED_MODULE_2__/* .version */ .i8,
            message: message,
            resolver: resolver
        });
    };
};
var buildHttpError = function(method, url, status) {
    var error = new Error("Request ".concat(method, " ").concat(url, " end with ").concat(status, " status."));
    error.url = url;
    error.status = status;
    return error;
};


/***/ }),

/***/ 627:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ DisneyHunter; }
});

// EXTERNAL MODULE: ./config/config.json
var config = __webpack_require__(626);
// EXTERNAL MODULE: ./src/Http/Http.js
var Http = __webpack_require__(519);
;// CONCATENATED MODULE: ./src/Helper/Chrome.js
/*global chrome*/ function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

var chromeStorageSetKey = function() {
    var _ref = _async_to_generator(function(key, value) {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        storageSyncSet(key, value)
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        storageLocalSet(key, value)
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function chromeStorageSetKey(key, value) {
        return _ref.apply(this, arguments);
    };
}();
var chromeStorageGetKey = function() {
    var _ref = _async_to_generator(function(key) {
        var storedValue, _tmp, _storedValue_key, error;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        4,
                        ,
                        5
                    ]);
                    return [
                        4,
                        chrome.storage.sync.get([
                            key
                        ])
                    ];
                case 1:
                    _tmp = _state.sent();
                    if (_tmp) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        chrome.storage.local.get([
                            key
                        ])
                    ];
                case 2:
                    _tmp = _state.sent();
                    _state.label = 3;
                case 3:
                    storedValue = _tmp;
                    return [
                        2,
                        (_storedValue_key = storedValue[key]) !== null && _storedValue_key !== void 0 ? _storedValue_key : null
                    ];
                case 4:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper")("chromeStorageGetKey", error);
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function chromeStorageGetKey(key) {
        return _ref.apply(this, arguments);
    };
}();
var storageSyncSet = function() {
    var _ref = _async_to_generator(function(key, value) {
        var error;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        chrome.storage.sync.set(_define_property({}, key, value))
                    ];
                case 1:
                    _state.sent();
                    return [
                        3,
                        3
                    ];
                case 2:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper chrome")("storageSyncSet", error);
                    return [
                        3,
                        3
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return function storageSyncSet(key, value) {
        return _ref.apply(this, arguments);
    };
}();
var storageLocalSet = function() {
    var _ref = _async_to_generator(function(key, value) {
        var error;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        chrome.storage.local.set(_define_property({}, key, value))
                    ];
                case 1:
                    _state.sent();
                    return [
                        3,
                        3
                    ];
                case 2:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper chrome")("storageLocalSet", error);
                    return [
                        3,
                        3
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return function storageLocalSet(key, value) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Helper/Helper.js
/*global chrome*/ function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Helper_async_to_generator(fn) {
    return function() {
        var self1 = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self1, args);
            function _next(value) {
                Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function Helper_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


/**
 * Safely access a key in a source structure or exit with null if there is any key missing in the access path
 *
 * @param {Object} source
 * @param {String[]} keys
 * @param {*} [defaultValue = null] defaultValue
 *
 * @returns {*}
 */ function extract(source, keys) {
    var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    return keys.reduce(function(partial, key) {
        if (partial === undefined) {
            return defaultValue;
        }
        if (partial === null) {
            return defaultValue;
        }
        if (!Object.prototype.hasOwnProperty.call(partial, key)) {
            return defaultValue;
        }
        return partial[key];
    }, source);
}
function filterData(data, filters) {
    var _loop = function(key) {
        var defaultValue = filters[key]["defaultValue"] || null;
        filteredData[key] = Array.isArray(filters[key]) ? extractFromManyPaths.apply(void 0, [
            defaultValue
        ].concat(_to_consumable_array(filters[key]))) : filters[key].hasOwnProperty("keys") ? extractFromManyPaths.apply(void 0, [
            defaultValue
        ].concat(_to_consumable_array(filters[key]["keys"]))) : defaultValue;
        if (filters[key].hasOwnProperty("nested")) {
            if (Array.isArray(filteredData[key])) {
                filteredData[key] = filteredData[key].map(function(item) {
                    return filterData(item, filters[key]["nested"]);
                });
            } else if (filteredData[key] || !filters[key]["optional"]) {
                filteredData[key] = filterData(filteredData[key], filters[key]["nested"]);
            }
        }
        if (filters[key].hasOwnProperty("transform")) {
            filteredData[key] = transform(filters[key]["transform"], filteredData[key]);
        }
    };
    function extractFromManyPaths(defaultValue) {
        for(var _len = arguments.length, paths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            paths[_key - 1] = arguments[_key];
        }
        paths = Array.isArray(paths[0]) ? paths : [
            paths
        ];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = paths[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var path = _step.value;
                var extractedValue = extract(data, path, defaultValue);
                if (extractedValue !== defaultValue) {
                    return extractedValue;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return defaultValue;
    }
    function transform(operation, data) {
        try {
            if (operation === "getYearFromIsoDate") {
                return new Date(data).getFullYear();
            }
        } catch (error) {
            (0,Http/* loggerBuilder */.CQ)("helper")("filterData transform error", error);
        }
    }
    var filteredData = {};
    for(var key in filters)_loop(key);
    return filteredData;
}
var excludeEmptyObjects = function(items) {
    return items.filter(function(item) {
        return Object.keys(item).length !== 0;
    });
};
function hashString(str) {
    var hash = 0;
    if (!str || str.length === 0) {
        return hash;
    }
    for(var i = 0; i < str.length; i++){
        var chr = str.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
}
function getCurrentTimeSeconds() {
    return Math.floor(new Date().getTime() / 1000);
}
function getLocalTimeDiff() {
    return new Date().getTimezoneOffset() * -60;
}
function requestErrorToString(e) {
    return JSON.stringify({
        readyState: e.target.readyState,
        status: e.target.status,
        statusText: e.target.statusText,
        timeout: e.target.timeout
    });
}
function parseCookies(documentCookie) {
    var cookies = documentCookie.split(";");
    var parsedCookies = {};
    cookies.map(function(cookie) {
        cookie = cookie.trim();
        var assignPosition = cookie.indexOf("=");
        if (assignPosition + 1 >= cookie.length) {
            return;
        }
        var name = cookie.substr(0, assignPosition);
        var value = cookie.substr(assignPosition + 1);
        parsedCookies[name] = value;
    });
    return parsedCookies;
}
function getHid() {
    try {
        // available in MediaSpy QML engine
        return Utilities.getHid();
    } catch (e) {
        return "";
    }
}
function getBrowserLanguage() {
    return window.navigator.language;
}
function setContextData() {
    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", data = arguments.length > 1 ? arguments[1] : void 0;
    if (window) {
        window[name] = data;
    }
}
function getContextData() {
    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    if (window) {
        var _window_name;
        return (_window_name = window[name]) !== null && _window_name !== void 0 ? _window_name : null;
    }
}
var getCookie = function(name) {
    var parsedCookies = parseCookies(document.cookie);
    if (!parsedCookies[name]) {
        return undefined;
    }
    return decodeURIComponent(parsedCookies[name]);
};
var getRandomString = function(length) {
    var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var charLength = chars.length;
    var result = "";
    for(var i = 0; i < length; i++){
        result += chars.charAt(Math.floor(Math.random() * charLength));
    }
    return result;
};
var getOrCreateExtensionUserId = function() {
    var _ref = Helper_async_to_generator(function() {
        var EXTENSION_USER_ID_KEY, _window_chrome, _ref, storedUserId, randomUUID, lastStoredUserId, error;
        return Helper_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    EXTENSION_USER_ID_KEY = "extension_user_id";
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        6,
                        ,
                        7
                    ]);
                    if (!((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.storage)) {
                        return [
                            2,
                            ""
                        ];
                    }
                    return [
                        4,
                        chromeStorageGetKey(EXTENSION_USER_ID_KEY)
                    ];
                case 2:
                    storedUserId = (_ref = _state.sent()) !== null && _ref !== void 0 ? _ref : null;
                    if (!!storedUserId) return [
                        3,
                        5
                    ];
                    randomUUID = self.crypto.randomUUID();
                    return [
                        4,
                        chromeStorageSetKey(EXTENSION_USER_ID_KEY, randomUUID)
                    ];
                case 3:
                    _state.sent();
                    return [
                        4,
                        chromeStorageGetKey(EXTENSION_USER_ID_KEY)
                    ];
                case 4:
                    lastStoredUserId = _state.sent();
                    return [
                        2,
                        lastStoredUserId
                    ];
                case 5:
                    return [
                        2,
                        storedUserId
                    ];
                case 6:
                    error = _state.sent();
                    (0,Http/* loggerBuilder */.CQ)("helper")("getOrCreateExtensionUserId", error);
                    return [
                        3,
                        7
                    ];
                case 7:
                    return [
                        2
                    ];
            }
        });
    });
    return function getOrCreateExtensionUserId() {
        return _ref.apply(this, arguments);
    };
}();
var isSuccessResponseStatus = function(status) {
    return /^20[0-9]$/.test(status);
};
var divideArray = function(array, chunkSize) {
    var dividedArray = [];
    for(var i = 0; i < array.length; i += chunkSize){
        dividedArray.push(array.slice(i, i + chunkSize));
    }
    return dividedArray;
};
var convertObjectToFormData = function(body) {
    var formData = new URLSearchParams();
    for(var key in body){
        if (body.hasOwnProperty(key)) {
            formData.append(key, body[key]);
        }
    }
    return formData;
};
var extractDataFromScript = function(regex, includesPart) {
    var scripts = document.querySelectorAll("script");
    var scriptWithCountry;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Array.from(scripts)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var script = _step.value;
            var innerHTML = script.innerHTML;
            if (innerHTML.includes(includesPart)) {
                scriptWithCountry = script;
                break;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    var scriptString = scriptWithCountry.innerHTML;
    scriptString.replace(/\\t|\\n|\\(?=")/g, "");
    var match = scriptString.match(regex);
    if (!match || !match[1]) {
        throw new Error("countryCode not found with regex: ".concat(regex));
    }
    return match[1].toUpperCase();
};
var formatCommandId = function(commandId) {
    return commandId ? commandId.toString() : undefined;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/Dto/LocationData.js
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var LocationData = function LocationData(countryCode, designatedMarketArea, type, zipCode, gmtDiffInSeconds) {
    "use strict";
    _class_call_check(this, LocationData);
    this.countryCode = countryCode;
    this.designatedMarketArea = designatedMarketArea;
    this.type = type;
    this.zipCode = zipCode;
    this.gmt_diff_in_seconds = gmtDiffInSeconds;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/Services/LocalDataFetchers.js


var sessionInfoLocalStorageKey = "__bam_sdk_session_info--disney-svod-3d9324fc_prod";
var accessTokenLocalStorageKey = "__bam_sdk_access--disney-svod-3d9324fc_prod";
var languagePreferenceLocalStorageKey = "languagePreference";
var fetchInitialScrapingData = function(window) {
    return {
        deviceData: fetchDeviceData(window),
        identity: fetchIdentityData(window),
        locationData: fetchLocationData(window),
        languagePreference: fetchLanguagePreference(window)
    };
};
var fetchTokenInfo = function(window) {
    var tokenInfo = window.localStorage.getItem(accessTokenLocalStorageKey);
    if (!tokenInfo) {
        return null;
    }
    return JSON.parse(tokenInfo);
};
function fetchAccessToken(window) {
    var parsedData = fetchTokenInfo(window);
    return extract(parsedData, [
        "context",
        "token"
    ]);
}
function fetchAccessTokenExpiration(window) {
    var parsedData = fetchTokenInfo(window);
    var tokenIssuedAt = extract(parsedData, [
        "context",
        "issuedAt"
    ]);
    var tokenExpiresIn = extract(parsedData, [
        "context",
        "expiresIn"
    ]) * 1000; // convert to milliseconds
    if (!tokenIssuedAt || !tokenExpiresIn) {
        return null;
    }
    return tokenIssuedAt + tokenExpiresIn;
}
function fetchSessionInfo(window) {
    var textInfo = window.localStorage.getItem(sessionInfoLocalStorageKey);
    if (!textInfo) {
        throw new Error("Could not fetch session info!");
    }
    return JSON.parse(textInfo);
}
function fetchIdentityData(window) {
    var _fetchSessionInfo = fetchSessionInfo(window), account = _fetchSessionInfo.account, profile = _fetchSessionInfo.profile;
    if (!(account === null || account === void 0 ? void 0 : account.id) || !(profile === null || profile === void 0 ? void 0 : profile.id)) {
        throw new Error("Could not fetch identity data!");
    }
    return {
        accountId: account.id,
        profileId: profile.id
    };
}
function fetchLocationData(window) {
    var location = fetchSessionInfo(window).location;
    var gmtDiffInSeconds = new Date().getTimezoneOffset() * -60;
    var countryCode = extract(location, [
        "countryCode"
    ]) || extract(location, [
        "country_code"
    ]);
    var designatedMarketArea = extract(location, [
        "designatedMarketArea"
    ]);
    var type = extract(location, [
        "type"
    ]);
    var zipCode = extract(location, [
        "zipCode"
    ]);
    return new LocationData(countryCode, designatedMarketArea, type, zipCode, gmtDiffInSeconds);
}
function fetchDeviceData(window) {
    var device = fetchSessionInfo(window).device;
    return device;
}
var fetchAuthData = function(window) {
    var accessToken = fetchAccessTokenForSignedInUser(window);
    var tokenExpiration = fetchAccessTokenExpiration(window);
    if (!accessToken || !tokenExpiration) {
        return null;
    }
    return {
        accessToken: accessToken,
        tokenExpiration: tokenExpiration
    };
};
function fetchAccessTokenForSignedInUser(window) {
    var accessToken = fetchAccessToken(window);
    if (!accessToken) {
        return null;
    }
    var _fetchSessionInfo = fetchSessionInfo(window), account = _fetchSessionInfo.account, profile = _fetchSessionInfo.profile;
    return account && profile ? accessToken : null;
}
var fetchLanguagePreference = function(window) {
    var language = window.localStorage.getItem(languagePreferenceLocalStorageKey);
    if (!language) {
        throw new Error("Could not fetch language preference!");
    }
    return language;
};
var fetchRegion = function(window) {
    var location = fetchLocationData(window);
    return extract(location, [
        "countryCode"
    ]) || extract(location, [
        "country_code"
    ]);
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/Services/HttpUrlBuilders.js

var buildContinueWatchingSetIdRetrievalUrl = function(window) {
    var language = fetchLanguagePreference(window);
    var region = fetchRegion(window);
    return "https://disney.content.edge.bamgrid.com/svc/content/Collection/PersonalizedCollection/version/5.1/region/".concat(region, "/audience/false/maturity/9999/language/").concat(language, "/contentClass/home/slug/home");
};
var buildContinueWatchingDataRetrievalUrl = function(continueWatchingSetId, window) {
    var language = fetchLanguagePreference(window);
    var region = fetchRegion(window);
    return "https://disney.content.edge.bamgrid.com/svc/content/ContinueWatching/Set/version/5.1/region/".concat(region, "/audience/false/maturity/9999/language/").concat(language, "/setId/").concat(continueWatchingSetId);
};
var buildSeriesBundleDataRetrievalUrl = function(encodedSeriesId, window) {
    var language = fetchLanguagePreference(window);
    var region = fetchRegion(window);
    return "https://disney.content.edge.bamgrid.com/svc/content/DmcSeriesBundle/version/5.1/region/".concat(region, "/audience/false/maturity/9999/language/").concat(language, "/encodedSeriesId/").concat(encodedSeriesId);
};
var buildSeasonDataRetrievalUrl = function(seasonId, window) {
    var language = fetchLanguagePreference(window);
    var region = fetchRegion(window);
    return "https://disney.content.edge.bamgrid.com/svc/content/ContinueWatching/Season/version/5.1/region/".concat(region, "/audience/false/maturity/9999/language/").concat(language, "/seasonId/").concat(seasonId);
};
var buildLocalizedUrl = function(window, url) {
    var language = fetchLanguagePreference(window);
    var region = fetchRegion(window);
    return url.replace("${language}", language).replace("${region}", region);
};

;// CONCATENATED MODULE: ./src/Helper/Promise.js
function Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Promise_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Promise_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Promise_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var PROMISE_STATE_FULFILLED = "fulfilled";
var PROMISE_STATE_REJECTED = "rejected";
var allSettled = /////////////////////////////////////////////
function(promises) {
    return Promise.allSettled(promises);
};
////////
///////////
////////////////////////////////////
/////////
//////////////////////////////////////////////////////
///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////
///////////////////////////
/////////
////////
/////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////
////////
/////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////
////////
//////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////
///////////////////////////////////
/////////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////
/////////////////////////
////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////
/////////
///////
/////////////////////
////////////////////
/////
/////
/////////
var filterRejectedPromises = function(promises) {
    return promises.filter(function(promise) {
        return promise.status === PROMISE_STATE_REJECTED;
    });
};
var fetchDataFromFulfilledPromises = function(promises) {
    return promises.filter(function(promise) {
        return promise.status === PROMISE_STATE_FULFILLED;
    }).map(function(promise) {
        return promise.value;
    });
};
var ignoreAfterTimeout = function() {
    var _ref = Promise_async_to_generator(function(promise, timeout, args) {
        var timeoutPromise;
        return Promise_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    timeoutPromise = new Promise(function(resolve) {
                        return setTimeout(resolve, timeout, args);
                    });
                    return [
                        4,
                        Promise.any([
                            promise,
                            timeoutPromise
                        ])
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function ignoreAfterTimeout(promise, timeout, args) {
        return _ref.apply(this, arguments);
    };
}();

// EXTERNAL MODULE: ./src/Helper/Dist.js
var Dist = __webpack_require__(270);
// EXTERNAL MODULE: ./package.json
var package_0 = __webpack_require__(147);
;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/Services/Metriq.js
///////////////////////////////////////////
////////////////////////////
/////////
function Metriq_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Metriq_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Metriq_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Metriq_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Metriq_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            Metriq_define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function Metriq_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}







var BASE_ROUTE = config/* nodeRootUrl */._Q, revision = config/* revision */.LB;
var disneyLogger = function(namespace, message, commandId) {
    return (0,Http/* httpNodeLog */.gp)({
        dist: (0,Dist/* getDist */.z)(),
        revision: revision,
        platform: "disney",
        namespace: namespace,
        extVer: (0,Dist/* getExtensionVersion */.P)(),
        dhVer: package_0/* version */.i8,
        message: "".concat(message),
        commandId: formatCommandId(commandId)
    });
};
var sendCommandsData = function() {
    var _ref = Metriq_async_to_generator(function(commandsData) {
        var promises, results;
        return Metriq_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    promises = commandsData.map(function(param) {
                        var data = param.data, command = param.command;
                        return sendCommand(data, command);
                    });
                    return [
                        4,
                        allSettled(promises)
                    ];
                case 1:
                    results = _state.sent();
                    return [
                        4,
                        logRejectedPromises(results)
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function sendCommandsData(commandsData) {
        return _ref.apply(this, arguments);
    };
}();
var sendCommand = function() {
    var _ref = Metriq_async_to_generator(function(data, param) {
        var id;
        return Metriq_ts_generator(this, function(_state) {
            id = param.id;
            return [
                2,
                uploadToApi(id, data)
            ];
        });
    });
    return function sendCommand(data, _) {
        return _ref.apply(this, arguments);
    };
}();
var logRejectedPromises = function() {
    var _ref = Metriq_async_to_generator(function(promises) {
        var rejectedPromises, reasons;
        return Metriq_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    rejectedPromises = filterRejectedPromises(promises);
                    if (!(rejectedPromises.length > 0)) return [
                        3,
                        2
                    ];
                    reasons = rejectedPromises.map(function(param) {
                        var reason = param.reason;
                        return reason;
                    });
                    return [
                        4,
                        disneyLogger("sending_commands_data", "Rejected promises: ".concat(reasons.join(", ")))
                    ];
                case 1:
                    _state.sent();
                    _state.label = 2;
                case 2:
                    return [
                        2
                    ];
            }
        });
    });
    return function logRejectedPromises(promises) {
        return _ref.apply(this, arguments);
    };
}();
var uploadToApi = function() {
    var _ref = Metriq_async_to_generator(function(commandId, data) {
        var response, jsonResponse;
        return Metriq_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch("".concat(BASE_ROUTE, "disney/upload"), {
                            method: "POST",
                            body: JSON.stringify(_object_spread_props(_object_spread({}, data), {
                                commandId: commandId
                            })),
                            headers: {
                                "Content-Type": "application/json"
                            }
                        })
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        4,
                        response.json()
                    ];
                case 2:
                    jsonResponse = _state.sent();
                    return [
                        2,
                        jsonResponse
                    ];
            }
        });
    });
    return function uploadToApi(commandId, data) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/Services/HttpDataFetchers.js
///////////////////////////////////////////
////////////////////////////
/////////
function HttpDataFetchers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function HttpDataFetchers_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                HttpDataFetchers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                HttpDataFetchers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function HttpDataFetchers_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}





var HttpDataFetchers_BASE_ROUTE = config/* nodeRootUrl */._Q;
var findContinueWatchingSetIdFromCollectionData = function(data) {
    var containers = extract(data, [
        "data",
        "Collection",
        "containers"
    ]);
    if (!containers) {
        return null;
    }
    var container = containers.find(function(container) {
        return extract(container, [
            "set",
            "refType"
        ]) === "ContinueWatchingSet";
    });
    return container ? extract(container, [
        "set",
        "refId"
    ]) : null;
};
var getRequestWithBearer = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(url, accessToken) {
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(url, {
                            method: "GET",
                            headers: {
                                Authorization: "Bearer ".concat(accessToken)
                            }
                        })
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function getRequestWithBearer(url, accessToken) {
        return _ref.apply(this, arguments);
    };
}();
var postJsonRequestWithBearer = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(url, accessToken, body) {
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(url, {
                            method: "POST",
                            headers: {
                                Authorization: "Bearer ".concat(accessToken),
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(body)
                        })
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function postJsonRequestWithBearer(url, accessToken, body) {
        return _ref.apply(this, arguments);
    };
}();
var getGraphQLRequestWithBearer = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(url, accessToken, query) {
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(url, {
                            method: "POST",
                            headers: {
                                Authorization: "Bearer ".concat(accessToken),
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({
                                query: query
                            })
                        })
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function getGraphQLRequestWithBearer(url, accessToken, query) {
        return _ref.apply(this, arguments);
    };
}();
var fetchContinueWatchingSetId = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(accessToken, window) {
        var response, jsonResponse, continueWatchingSetId;
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getRequestWithBearer(buildContinueWatchingSetIdRetrievalUrl(window), accessToken)
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        4,
                        response.json()
                    ];
                case 2:
                    jsonResponse = _state.sent();
                    continueWatchingSetId = findContinueWatchingSetIdFromCollectionData(jsonResponse);
                    if (continueWatchingSetId) {
                        return [
                            2,
                            continueWatchingSetId
                        ];
                    }
                    throw new Error("ContinueWatchingSetId not found!");
            }
        });
    });
    return function fetchContinueWatchingSetId(accessToken, window) {
        return _ref.apply(this, arguments);
    };
}();
var fetchProfiles = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(accessToken, config) {
        var _ref, graphql, dataFilter, response, data, profiles;
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _ref = config || {}, graphql = _ref.graphql, dataFilter = _ref.dataFilter;
                    return [
                        4,
                        getGraphQLRequestWithBearer(graphql.url, accessToken, graphql.query)
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        4,
                        response.json()
                    ];
                case 2:
                    data = _state.sent();
                    profiles = (filterData(data, dataFilter) || {}).profiles;
                    return [
                        2,
                        profiles
                    ];
            }
        });
    });
    return function fetchProfiles(accessToken, config) {
        return _ref.apply(this, arguments);
    };
}();
var fetchContinueWatchingData = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(accessToken, window, continueWatchingSetId) {
        var response;
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getRequestWithBearer(buildContinueWatchingDataRetrievalUrl(continueWatchingSetId, window), accessToken)
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return function fetchContinueWatchingData(accessToken, window, continueWatchingSetId) {
        return _ref.apply(this, arguments);
    };
}();
var fetchJson = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(url, accessToken) {
        var response;
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getRequestWithBearer(url, accessToken)
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return function fetchJson(url, accessToken) {
        return _ref.apply(this, arguments);
    };
}();
var fetchUserState = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(url, pids, accessToken) {
        var response;
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        postJsonRequestWithBearer(url, accessToken, {
                            pids: pids
                        })
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return function fetchUserState(url, pids, accessToken) {
        return _ref.apply(this, arguments);
    };
}();
var fetchSubscriptions = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(accessToken, config) {
        var _ref, graphql, dataFilter, response, data, subscriptions;
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _ref = config || {}, graphql = _ref.graphql, dataFilter = _ref.dataFilter;
                    return [
                        4,
                        getGraphQLRequestWithBearer(graphql.url, accessToken, graphql.query)
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        4,
                        response.json()
                    ];
                case 2:
                    data = _state.sent();
                    subscriptions = (filterData(data, dataFilter) || {}).subscriptions;
                    return [
                        2,
                        subscriptions
                    ];
            }
        });
    });
    return function fetchSubscriptions(accessToken, config) {
        return _ref.apply(this, arguments);
    };
}();
var initializeCommandsInMetriq = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(data) {
        var response;
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch("".concat(HttpDataFetchers_BASE_ROUTE, "disney/start"), {
                            method: "POST",
                            body: JSON.stringify(data),
                            headers: {
                                "Content-Type": "application/json"
                            }
                        })
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return function initializeCommandsInMetriq(data) {
        return _ref.apply(this, arguments);
    };
}();
var fetchSeriesBundleData = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(accessToken, window, encodedSeriesId) {
        var response, url, status;
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getRequestWithBearer(buildSeriesBundleDataRetrievalUrl(encodedSeriesId, window), accessToken)
                    ];
                case 1:
                    response = _state.sent();
                    if (!response.ok) {
                        url = response.url, status = response.status;
                        throw new Error("fetchSeriesBundleData: Error ".concat(status, " for url: ").concat(url));
                    }
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return function fetchSeriesBundleData(accessToken, window, encodedSeriesId) {
        return _ref.apply(this, arguments);
    };
}();
var fetchIdsData = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(accessToken, _, window, urls) {
        var data, formattedData;
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        allSettled(urls.map(function() {
                            var _ref = HttpDataFetchers_async_to_generator(function(param) {
                                var url, id, _tmp;
                                return HttpDataFetchers_ts_generator(this, function(_state) {
                                    switch(_state.label){
                                        case 0:
                                            url = param.url, id = param.id;
                                            _tmp = {
                                                id: id
                                            };
                                            return [
                                                4,
                                                fetchSingleUrl(buildLocalizedUrl(window, url), accessToken)
                                            ];
                                        case 1:
                                            return [
                                                2,
                                                (_tmp.response = _state.sent(), _tmp)
                                            ];
                                    }
                                });
                            });
                            return function(_) {
                                return _ref.apply(this, arguments);
                            };
                        }()))
                    ];
                case 1:
                    data = _state.sent();
                    formattedData = data.map(function(item) {
                        if (item.status === PROMISE_STATE_FULFILLED) {
                            return item.value;
                        }
                        if (item.status === PROMISE_STATE_REJECTED) {
                            disneyLogger("disney_url_rejected", item.reason);
                            return undefined;
                        }
                        return item;
                    }).filter(function(item) {
                        return item !== undefined;
                    });
                    return [
                        2,
                        formattedData
                    ];
            }
        });
    });
    return function fetchIdsData(accessToken, _, window, urls) {
        return _ref.apply(this, arguments);
    };
}();
var fetchSingleUrl = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(url, accessToken) {
        var response;
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getRequestWithBearer(url, accessToken)
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        4,
                        response.json()
                    ];
                case 2:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function fetchSingleUrl(url, accessToken) {
        return _ref.apply(this, arguments);
    };
}();
var fetchSeasonData = function() {
    var _ref = HttpDataFetchers_async_to_generator(function(accessToken, window, seasonId) {
        var response, url, status, data;
        return HttpDataFetchers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getRequestWithBearer(buildSeasonDataRetrievalUrl(seasonId, window), accessToken)
                    ];
                case 1:
                    response = _state.sent();
                    if (!response.ok) {
                        url = response.url, status = response.status;
                        throw new Error("fetchSeasonData: Error ".concat(status, " for url: ").concat(url));
                    }
                    return [
                        4,
                        response.json()
                    ];
                case 2:
                    data = _state.sent();
                    return [
                        2,
                        data
                    ];
            }
        });
    });
    return function fetchSeasonData(accessToken, window, seasonId) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/Consts.js

var AUTH_CONTEXT_KEY = getRandomString(8);
var TYPES = {
    MOVIE: "movie",
    SERIES: "episode"
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/Services/DataParsers.js
function DataParsers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function DataParsers_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                DataParsers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                DataParsers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function DataParsers_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function DataParsers_object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            DataParsers_define_property(target, key, source[key]);
        });
    }
    return target;
}
function DataParsers_ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function DataParsers_object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        DataParsers_ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function DataParsers_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}





var unknownCountryCode = "XX";
var SEASON_DATA_THERESHOLD = 1000 * 60 * 10; // 10 minutes
var createInitializationPayload = function() {
    var _ref = DataParsers_async_to_generator(function(param) {
        var identity, locationData, deviceData, languagePreference, _locationData_countryCode, countryCode, accountId, profileId, extensionUserId;
        return DataParsers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    identity = param.identity, locationData = param.locationData, deviceData = param.deviceData, languagePreference = param.languagePreference;
                    _locationData_countryCode = locationData.countryCode, countryCode = _locationData_countryCode === void 0 ? unknownCountryCode : _locationData_countryCode;
                    accountId = identity.accountId, profileId = identity.profileId;
                    return [
                        4,
                        getOrCreateExtensionUserId()
                    ];
                case 1:
                    extensionUserId = _state.sent();
                    return [
                        2,
                        {
                            accountId: accountId,
                            profileId: profileId,
                            extensionUserId: extensionUserId,
                            country: countryCode,
                            hid: getHid(),
                            gmtDiffSeconds: getLocalTimeDiff(),
                            browserLanguage: getBrowserLanguage(),
                            disneyLanguage: languagePreference,
                            dist: (0,Dist/* getDist */.z)(),
                            locationData: locationData,
                            deviceData: deviceData
                        }
                    ];
            }
        });
    });
    return function createInitializationPayload(_) {
        return _ref.apply(this, arguments);
    };
}();
var parseContinueWatchingData = function() {
    var _ref = DataParsers_async_to_generator(function(data, config) {
        var dataFilter, latestCheckpointDate, items, parsedData;
        return DataParsers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    dataFilter = config.dataFilter, latestCheckpointDate = config.latestCheckpointDate;
                    items = extract(data, dataFilter.list);
                    if (!items) {
                        return [
                            2,
                            null
                        ];
                    }
                    return [
                        4,
                        Promise.all(items.map(function() {
                            var _ref = DataParsers_async_to_generator(function(item) {
                                return DataParsers_ts_generator(this, function(_state) {
                                    switch(_state.label){
                                        case 0:
                                            return [
                                                4,
                                                getGenres(item, dataFilter)
                                            ];
                                        case 1:
                                            item.typedGenres = _state.sent();
                                            item.title = getTitleByType(item, dataFilter);
                                            return [
                                                4,
                                                getSeasonData(item, latestCheckpointDate)
                                            ];
                                        case 2:
                                            item.seasonData = _state.sent();
                                            return [
                                                2,
                                                filterData(item, dataFilter.singleItem)
                                            ];
                                    }
                                });
                            });
                            return function(item) {
                                return _ref.apply(this, arguments);
                            };
                        }()))
                    ];
                case 1:
                    parsedData = _state.sent();
                    return [
                        2,
                        parsedData
                    ];
            }
        });
    });
    return function parseContinueWatchingData(data, config) {
        return _ref.apply(this, arguments);
    };
}();
var getTitleByType = function(item, param) {
    var movieTitle = param.movieTitle, seriesTitle = param.seriesTitle, episodeTitle = param.episodeTitle;
    var title;
    switch(item.programType){
        case TYPES.MOVIE:
            title = {
                movie: extract(item, movieTitle)
            };
            break;
        case TYPES.SERIES:
            title = {
                episode: extract(item, episodeTitle),
                series: extract(item, seriesTitle)
            };
            break;
        default:
            title = {};
    }
    return title;
};
var parseSeriesBundleData = function(data, filters) {
    var meta = extract(data, filters.series);
    if (!(meta === null || meta === void 0 ? void 0 : meta.typedGenres)) {
        return [];
    }
    return meta.typedGenres.map(function(el) {
        return el.name;
    });
};
var getSeasonData = function() {
    var _ref = DataParsers_async_to_generator(function(item, latestCheckpointDate) {
        var _ref, _ref1, seasonId, seasonSequenceNumber, seasonData, error;
        return DataParsers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        3,
                        ,
                        5
                    ]);
                    if (shouldSkipDownloadSeasonData(item, latestCheckpointDate)) {
                        return [
                            2,
                            null
                        ];
                    }
                    return [
                        4,
                        provideSeasonIdentity(item)
                    ];
                case 1:
                    _ref1 = (_ref = _state.sent()) !== null && _ref !== void 0 ? _ref : {}, seasonId = _ref1.seasonId, seasonSequenceNumber = _ref1.seasonSequenceNumber;
                    return [
                        4,
                        provideSeasonData(seasonId)
                    ];
                case 2:
                    seasonData = _state.sent();
                    return [
                        2,
                        DataParsers_object_spread_props(DataParsers_object_spread({}, seasonData), {
                            seasonSequenceNumber: seasonSequenceNumber
                        })
                    ];
                case 3:
                    error = _state.sent();
                    return [
                        4,
                        disneyLogger("getSeasonData", error)
                    ];
                case 4:
                    _state.sent();
                    return [
                        2,
                        null
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function getSeasonData(item, latestCheckpointDate) {
        return _ref.apply(this, arguments);
    };
}();
var provideSeasonIdentity = function() {
    var _ref = DataParsers_async_to_generator(function(item) {
        var _meta_bookmarkData, _ref, seasonSequenceNumber, episodeSequenceNumber, meta, seriesId, seasonId, previousSeasonData;
        return DataParsers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _ref = item || {}, seasonSequenceNumber = _ref.seasonSequenceNumber, episodeSequenceNumber = _ref.episodeSequenceNumber, meta = _ref.meta, seriesId = _ref.seriesId, seasonId = _ref.seasonId;
                    if (!(seasonSequenceNumber !== 1 && episodeSequenceNumber === 1 && !((_meta_bookmarkData = meta.bookmarkData) === null || _meta_bookmarkData === void 0 ? void 0 : _meta_bookmarkData.playhead))) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        providePreviousSeasonIdentity(seriesId, seasonSequenceNumber)
                    ];
                case 1:
                    previousSeasonData = _state.sent();
                    return [
                        2,
                        previousSeasonData
                    ];
                case 2:
                    return [
                        2,
                        {
                            seasonId: seasonId,
                            seasonSequenceNumber: seasonSequenceNumber
                        }
                    ];
            }
        });
    });
    return function provideSeasonIdentity(item) {
        return _ref.apply(this, arguments);
    };
}();
var providePreviousSeasonIdentity = function() {
    var _ref = DataParsers_async_to_generator(function(seriesId, seasonSequenceNumber) {
        var data, seasons, season, _ref;
        return DataParsers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        provideSeriesData(seriesId)
                    ];
                case 1:
                    data = _state.sent();
                    seasons = (extract(data, [
                        "data",
                        "DmcSeriesBundle",
                        "seasons"
                    ]) || []).seasons;
                    season = seasons.find(function(season) {
                        return season.seasonSequenceNumber === seasonSequenceNumber - 1;
                    });
                    return [
                        2,
                        (_ref = {
                            seasonId: season === null || season === void 0 ? void 0 : season.seasonId,
                            seasonSequenceNumber: season === null || season === void 0 ? void 0 : season.seasonSequenceNumber
                        }) !== null && _ref !== void 0 ? _ref : null
                    ];
            }
        });
    });
    return function providePreviousSeasonIdentity(seriesId, seasonSequenceNumber) {
        return _ref.apply(this, arguments);
    };
}();
var shouldSkipDownloadSeasonData = function(item, latestCheckpointDate) {
    var _item_meta_bookmarkData, _item_meta;
    return item.programType !== TYPES.SERIES || (item === null || item === void 0 ? void 0 : (_item_meta = item.meta) === null || _item_meta === void 0 ? void 0 : (_item_meta_bookmarkData = _item_meta.bookmarkData) === null || _item_meta_bookmarkData === void 0 ? void 0 : _item_meta_bookmarkData.occurredOn) < latestCheckpointDate - SEASON_DATA_THERESHOLD;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/Commands.js
var GET_VIDEOS_BOOKMARKS = "videos_bookmarks";
var GET_PROFILES = "profiles";
var GET_SUBSCRIPTIONS = "subscriptions";
var GET_URLS = "get_urls";
var GET_CONTINUE_WATCHING_V2 = "continue_watching_v2";

;// CONCATENATED MODULE: ./src/Helper/Base64.js
///////////////////////////////////////////
//////////////////////////////////
/////////
var b64decode = function(data) {
    return atob(data);
};
var b64encode = function(data) {
    return btoa(data);
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/Services/Pi.js
function Pi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Pi_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Pi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Pi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Pi_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


var query = "cXVlcnkgewogICAgbWUgewogICAgICAgIGFjY291bnQgewogICAgICAgICAgICAuLi5hY2NvdW50CiAgICAgICAgICAgIGFjdGl2ZVByb2ZpbGUgewogICAgICAgICAgICAgICAgLi4ucHJvZmlsZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgpmcmFnbWVudCBhY2NvdW50IG9uIEFjY291bnQgewogICAgaWQKICAgIGF0dHJpYnV0ZXMgewogICAgICAgIGVtYWlsCiAgICAgICAgbG9jYXRpb25zIHsKICAgICAgICAgICAgbWFudWFsIHsKICAgICAgICAgICAgICAgIGNvdW50cnkKICAgICAgICAgICAgfQogICAgICAgICAgICBwdXJjaGFzZSB7CiAgICAgICAgICAgICAgICBjb3VudHJ5CiAgICAgICAgICAgICAgICBzb3VyY2UKICAgICAgICAgICAgfQogICAgICAgICAgICByZWdpc3RyYXRpb24gewogICAgICAgICAgICAgICAgZ2VvSXAgewogICAgICAgICAgICAgICAgICAgIGNvdW50cnkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKZnJhZ21lbnQgcHJvZmlsZSBvbiBQcm9maWxlIHsKICAgIGlkCiAgICBuYW1lCiAgICBwZXJzb25hbEluZm8gewogICAgICAgIGRhdGVPZkJpcnRoCiAgICAgICAgZ2VuZGVyCiAgICAgICAgYWdlCiAgICB9Cn0=";
var getData = function() {
    var _ref = Pi_async_to_generator(function(accessToken) {
        var response, data;
        return Pi_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getGraphQLRequestWithBearer("https://disney.api.edge.bamgrid.com/v1/public/graphql", accessToken, b64decode(query))
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        4,
                        response.json()
                    ];
                case 2:
                    data = _state.sent();
                    return [
                        2,
                        data.data.me.account
                    ];
            }
        });
    });
    return function getData(accessToken) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Http/AdditionalDataApi.js
///////////////////////////////////////////
////////////////////////////
/////////
function AdditionalDataApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function AdditionalDataApi_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                AdditionalDataApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                AdditionalDataApi_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function AdditionalDataApi_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function AdditionalDataApi_object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            AdditionalDataApi_define_property(target, key, source[key]);
        });
    }
    return target;
}
function AdditionalDataApi_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


function sendAdditionalProfileData(svod, data) {
    return _sendAdditionalProfileData.apply(this, arguments);
}
function _sendAdditionalProfileData() {
    _sendAdditionalProfileData = AdditionalDataApi_async_to_generator(function(svod, data) {
        var response;
        return AdditionalDataApi_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(config/* piUrl */.Mt, {
                            method: "POST",
                            body: b64encode(JSON.stringify(AdditionalDataApi_object_spread({
                                svod: svod
                            }, data)))
                        })
                    ];
                case 1:
                    response = _state.sent();
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
    return _sendAdditionalProfileData.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/Services/DataControllers.js
function DataControllers_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function DataControllers_array_without_holes(arr) {
    if (Array.isArray(arr)) return DataControllers_array_like_to_array(arr);
}
function DataControllers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function DataControllers_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                DataControllers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                DataControllers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function DataControllers_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function DataControllers_iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function DataControllers_non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function DataControllers_object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            DataControllers_define_property(target, key, source[key]);
        });
    }
    return target;
}
function DataControllers_to_consumable_array(arr) {
    return DataControllers_array_without_holes(arr) || DataControllers_iterable_to_array(arr) || DataControllers_unsupported_iterable_to_array(arr) || DataControllers_non_iterable_spread();
}
function DataControllers_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return DataControllers_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return DataControllers_array_like_to_array(o, minLen);
}
function DataControllers_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}











var getContinueWatchingData = function() {
    var _ref = DataControllers_async_to_generator(function(accessToken, config, window1) {
        var continueWatchingSetId, httpData;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetchContinueWatchingSetId(accessToken, window1)
                    ];
                case 1:
                    continueWatchingSetId = _state.sent();
                    return [
                        4,
                        fetchContinueWatchingData(accessToken, window1, continueWatchingSetId)
                    ];
                case 2:
                    httpData = _state.sent();
                    return [
                        4,
                        parseContinueWatchingData(httpData, config)
                    ];
                case 3:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function getContinueWatchingData(accessToken, config, window1) {
        return _ref.apply(this, arguments);
    };
}();
var getSeasonV2Data = function() {
    var _ref = DataControllers_async_to_generator(function(accessToken, config, seasonId) {
        var _season_data_season, _season_data, seasonUrl, season, episodes, pids;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    seasonUrl = config.seasonUrl.replace("{season_id}", seasonId);
                    return [
                        4,
                        fetchJson(seasonUrl, accessToken)
                    ];
                case 1:
                    season = _state.sent();
                    episodes = season === null || season === void 0 ? void 0 : (_season_data = season.data) === null || _season_data === void 0 ? void 0 : (_season_data_season = _season_data.season) === null || _season_data_season === void 0 ? void 0 : _season_data_season.items;
                    pids = season.data.season.items.map(function(item) {
                        return item.personalization.pid;
                    });
                    return [
                        2,
                        {
                            episodes: episodes,
                            pids: pids
                        }
                    ];
            }
        });
    });
    return function getSeasonV2Data(accessToken, config, seasonId) {
        return _ref.apply(this, arguments);
    };
}();
var addDataToContinueWatchingItem = function() {
    var _ref = DataControllers_async_to_generator(function(accessToken, config, item) {
        var outputItem, pageId, pageUrl, page, itemPid, itemState, state, episodesContainer, currentSeasonId, currentEpisodeId, episodes, _ref, currentSeasonEpisodes, seasonPids, _episodes, currentSeasonIndex, currentEpisodeIndex, _seasonPids, _ref1, previousSeasonEpisodes, previousSeasonPids, _episodes1, seasonsUserStates, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, episode;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    outputItem = item;
                    if (item.actions.length !== 1) {
                        disneyLogger("get_continue_watching", "item actions length is not 1");
                    }
                    pageId = item.actions[0].pageId;
                    pageUrl = config.detailsUrl.replace("{page_id}", pageId);
                    return [
                        4,
                        fetchJson(pageUrl, accessToken)
                    ];
                case 1:
                    page = _state.sent();
                    itemPid = page.data.page.personalization.pid;
                    return [
                        4,
                        fetchUserState(config.stateUrl, [
                            itemPid
                        ], accessToken)
                    ];
                case 2:
                    itemState = _state.sent();
                    state = itemState.data.entityStates[itemPid];
                    outputItem["state"] = state;
                    outputItem["page"] = page.data.page;
                    episodesContainer = page.data.page.containers.find(function(container) {
                        return container.type === "episodes";
                    });
                    if (!(episodesContainer !== undefined)) return [
                        3,
                        7
                    ];
                    outputItem["series"] = episodesContainer;
                    currentSeasonId = episodesContainer.focus.seasonId;
                    currentEpisodeId = page.data.page.actions[0].upNextId;
                    episodes = [];
                    return [
                        4,
                        getSeasonV2Data(accessToken, config, currentSeasonId)
                    ];
                case 3:
                    _ref = _state.sent(), currentSeasonEpisodes = _ref.episodes, seasonPids = _ref.pids;
                    if (currentSeasonEpisodes) {
                        ;
                        (_episodes = episodes).push.apply(_episodes, DataControllers_to_consumable_array(currentSeasonEpisodes));
                    }
                    currentSeasonIndex = episodesContainer.seasons.findIndex(function(season) {
                        return season.id === currentSeasonId;
                    });
                    currentEpisodeIndex = currentSeasonEpisodes.findIndex(function(episode) {
                        return episode.id === currentEpisodeId;
                    });
                    if (!(currentSeasonIndex > 0 && currentEpisodeIndex === 0)) return [
                        3,
                        5
                    ];
                    return [
                        4,
                        getSeasonV2Data(accessToken, config, episodesContainer.seasons[currentSeasonIndex - 1].id)
                    ];
                case 4:
                    _ref1 = _state.sent(), previousSeasonEpisodes = _ref1.episodes, previousSeasonPids = _ref1.pids;
                    (_seasonPids = seasonPids).push.apply(_seasonPids, DataControllers_to_consumable_array(previousSeasonPids));
                    if (previousSeasonEpisodes) {
                        ;
                        (_episodes1 = episodes).push.apply(_episodes1, DataControllers_to_consumable_array(previousSeasonEpisodes));
                    }
                    _state.label = 5;
                case 5:
                    return [
                        4,
                        fetchUserState(config.stateUrl, seasonPids, accessToken)
                    ];
                case 6:
                    seasonsUserStates = _state.sent();
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(_iterator = episodes[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            episode = _step.value;
                            episode["state"] = seasonsUserStates.data.entityStates[episode.personalization.pid];
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    outputItem["episodes"] = episodes.map(function(episode) {
                        return filterData(episode, config.dataFilter.episode);
                    });
                    _state.label = 7;
                case 7:
                    return [
                        2,
                        outputItem
                    ];
            }
        });
    });
    return function addDataToContinueWatchingItem(accessToken, config, item) {
        return _ref.apply(this, arguments);
    };
}();
var getContinueWatchingV2Data = function() {
    var _ref = DataControllers_async_to_generator(function(accessToken, config, window1) {
        var continueWatchingSetId, error, url, httpData, items, outputItems, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item, itemWithData, filteredItem, err;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        4
                    ]);
                    return [
                        4,
                        fetchContinueWatchingSetId(accessToken, window1)
                    ];
                case 1:
                    continueWatchingSetId = _state.sent();
                    return [
                        3,
                        4
                    ];
                case 2:
                    error = _state.sent();
                    return [
                        4,
                        disneyLogger("get_set_id", error)
                    ];
                case 3:
                    _state.sent();
                    continueWatchingSetId = config.defaultSetId;
                    return [
                        3,
                        4
                    ];
                case 4:
                    url = config.url.replace("{set_id}", continueWatchingSetId);
                    return [
                        4,
                        fetchJson(url, accessToken)
                    ];
                case 5:
                    httpData = _state.sent();
                    items = extract(httpData, config.dataFilter.list);
                    if (!items) {
                        disneyLogger("get_continue_watching", "no items extracted");
                        return [
                            2
                        ];
                    }
                    outputItems = [];
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    _state.label = 6;
                case 6:
                    _state.trys.push([
                        6,
                        11,
                        12,
                        13
                    ]);
                    _iterator = items[Symbol.iterator]();
                    _state.label = 7;
                case 7:
                    if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                        3,
                        10
                    ];
                    item = _step.value;
                    return [
                        4,
                        addDataToContinueWatchingItem(accessToken, config, item)
                    ];
                case 8:
                    itemWithData = _state.sent();
                    filteredItem = filterData(itemWithData, config.dataFilter.singleItem);
                    outputItems.push(filteredItem);
                    if (new Date(item.state.timestamp).getTime() < new Date(config.latestCheckpointDate) - config.timestampOverlap) {
                        return [
                            3,
                            10
                        ];
                    }
                    _state.label = 9;
                case 9:
                    _iteratorNormalCompletion = true;
                    return [
                        3,
                        7
                    ];
                case 10:
                    return [
                        3,
                        13
                    ];
                case 11:
                    err = _state.sent();
                    _didIteratorError = true;
                    _iteratorError = err;
                    return [
                        3,
                        13
                    ];
                case 12:
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                    return [
                        7
                    ];
                case 13:
                    return [
                        2,
                        outputItems
                    ];
            }
        });
    });
    return function getContinueWatchingV2Data(accessToken, config, window1) {
        return _ref.apply(this, arguments);
    };
}();
var buildDataGetter = function(dataFetcher, dataName) {
    return function() {
        var _ref = DataControllers_async_to_generator(function(accessToken, dataFilter, window1, urls) {
            var data;
            return DataControllers_ts_generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        return [
                            4,
                            dataFetcher(accessToken, dataFilter, window1, urls)
                        ];
                    case 1:
                        data = _state.sent();
                        if (data === null) {
                            throw new Error("".concat(dataName, " are null"));
                        }
                        if (typeof data === "object" && data.hasOwnProperty("errors")) {
                            throw new Error("Failed to fetch ".concat(dataName, ": ").concat(JSON.stringify(data)));
                        }
                        return [
                            2,
                            data
                        ];
                }
            });
        });
        return function(accessToken, dataFilter, window1, urls) {
            return _ref.apply(this, arguments);
        };
    }();
};
var getProfilesData = function() {
    var _ref = DataControllers_async_to_generator(function(accessToken, config, window1) {
        var data, _, error;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        4,
                        ,
                        6
                    ]);
                    return [
                        4,
                        getData(accessToken)
                    ];
                case 1:
                    data = _state.sent();
                    _ = "extension_user_id";
                    return [
                        4,
                        getOrCreateExtensionUserId()
                    ];
                case 2:
                    data[_] = _state.sent();
                    return [
                        4,
                        sendAdditionalProfileData("disney", data)
                    ];
                case 3:
                    _state.sent();
                    return [
                        3,
                        6
                    ];
                case 4:
                    error = _state.sent();
                    return [
                        4,
                        disneyLogger("gathering additional profiles data:" + error)
                    ];
                case 5:
                    _state.sent();
                    return [
                        3,
                        6
                    ];
                case 6:
                    return [
                        2,
                        buildDataGetter(fetchProfiles, "Profiles Data")(accessToken, config, window1)
                    ];
            }
        });
    });
    return function getProfilesData(accessToken, config, window1) {
        return _ref.apply(this, arguments);
    };
}();
var getSubscriptionsData = buildDataGetter(fetchSubscriptions, "Subscriptions Data");
var getUrlsData = buildDataGetter(fetchIdsData, "Urls Data");
var getCommandsToSend = function() {
    var _ref = DataControllers_async_to_generator(function(initialScrapingData) {
        var payload;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        createInitializationPayload(initialScrapingData)
                    ];
                case 1:
                    payload = _state.sent();
                    return [
                        2,
                        initializeCommandsInMetriq(payload)
                    ];
            }
        });
    });
    return function getCommandsToSend(initialScrapingData) {
        return _ref.apply(this, arguments);
    };
}();
var executeCommandsToSend = function() {
    var _ref = DataControllers_async_to_generator(function(authData, initialScrapingData, window1, param) {
        var commands, commandsToSend;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    commands = param.commands;
                    if (!commands) {
                        return [
                            2,
                            []
                        ];
                    }
                    return [
                        4,
                        Promise.all(commands.map(function(command) {
                            return getCommand(command, authData, initialScrapingData, window1);
                        }))
                    ];
                case 1:
                    commandsToSend = _state.sent();
                    return [
                        2,
                        commandsToSend.filter(function(param) {
                            var data = param.data;
                            return data !== null;
                        })
                    ];
            }
        });
    });
    return function executeCommandsToSend(authData, initialScrapingData, window1, _) {
        return _ref.apply(this, arguments);
    };
}();
var getCommand = function() {
    var _ref = DataControllers_async_to_generator(function(command, authData, initialScrapingData, window1) {
        var data;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getCommandData(command, authData, initialScrapingData, window1)
                    ];
                case 1:
                    data = _state.sent();
                    return [
                        2,
                        {
                            data: data,
                            command: command
                        }
                    ];
            }
        });
    });
    return function getCommand(command, authData, initialScrapingData, window1) {
        return _ref.apply(this, arguments);
    };
}();
var _obj;
var mapCommandToFunction = (_obj = {}, DataControllers_define_property(_obj, GET_VIDEOS_BOOKMARKS, getContinueWatchingData), DataControllers_define_property(_obj, GET_SUBSCRIPTIONS, getSubscriptionsData), DataControllers_define_property(_obj, GET_PROFILES, getProfilesData), DataControllers_define_property(_obj, GET_URLS, getUrlsData), DataControllers_define_property(_obj, GET_CONTINUE_WATCHING_V2, getContinueWatchingV2Data), _obj);
var getCommandData = function() {
    var _ref = DataControllers_async_to_generator(function(param, param1, param2, window1) {
        var id, type, config, urls, accessToken, identity, data, error;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    id = param.id, type = param.type, config = param.config, urls = param.urls, accessToken = param1.accessToken, identity = param2.identity;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        5
                    ]);
                    return [
                        4,
                        mapCommandToFunction[type](accessToken, config, window1, urls)
                    ];
                case 2:
                    data = _state.sent();
                    return [
                        2,
                        DataControllers_object_spread({
                            data: data
                        }, identity)
                    ];
                case 3:
                    error = _state.sent();
                    return [
                        4,
                        disneyLogger("fetching_data", error, id)
                    ];
                case 4:
                    _state.sent();
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2,
                        null
                    ];
            }
        });
    });
    return function getCommandData(_, _1, _2, window1) {
        return _ref.apply(this, arguments);
    };
}();
var provideGenresForSeries = function() {
    var _ref = DataControllers_async_to_generator(function(encodedSeriesId, filters) {
        var accessToken, httpData, err;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        4
                    ]);
                    accessToken = getAuthContext().accessToken;
                    return [
                        4,
                        fetchSeriesBundleData(accessToken, window, encodedSeriesId)
                    ];
                case 1:
                    httpData = _state.sent();
                    return [
                        2,
                        parseSeriesBundleData(httpData, filters)
                    ];
                case 2:
                    err = _state.sent();
                    return [
                        4,
                        disneyLogger(err)
                    ];
                case 3:
                    _state.sent();
                    return [
                        2,
                        null
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return function provideGenresForSeries(encodedSeriesId, filters) {
        return _ref.apply(this, arguments);
    };
}();
var getGenres = function() {
    var _ref = DataControllers_async_to_generator(function(item, filters) {
        var encodedSeriesId, genres, _;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    encodedSeriesId = item.encodedSeriesId;
                    _ = item.programType;
                    switch(_){
                        case TYPES.MOVIE:
                            return [
                                3,
                                1
                            ];
                        case TYPES.SERIES:
                            return [
                                3,
                                2
                            ];
                    }
                    return [
                        3,
                        4
                    ];
                case 1:
                    genres = item.typedGenres.map(function(el) {
                        return el.name;
                    });
                    return [
                        3,
                        5
                    ];
                case 2:
                    return [
                        4,
                        provideGenresForSeries(encodedSeriesId, filters)
                    ];
                case 3:
                    genres = _state.sent();
                    return [
                        3,
                        5
                    ];
                case 4:
                    genres = null;
                    _state.label = 5;
                case 5:
                    return [
                        2,
                        genres
                    ];
            }
        });
    });
    return function getGenres(item, filters) {
        return _ref.apply(this, arguments);
    };
}();
var provideSeasonData = function() {
    var _ref = DataControllers_async_to_generator(function(seasonId) {
        var accessToken, data, err;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        3,
                        ,
                        5
                    ]);
                    return [
                        4,
                        getAuthContext()
                    ];
                case 1:
                    accessToken = _state.sent().accessToken;
                    return [
                        4,
                        fetchSeasonData(accessToken, window, seasonId)
                    ];
                case 2:
                    data = _state.sent();
                    return [
                        2,
                        data
                    ];
                case 3:
                    err = _state.sent();
                    return [
                        4,
                        disneyLogger(err)
                    ];
                case 4:
                    _state.sent();
                    return [
                        2,
                        null
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function provideSeasonData(seasonId) {
        return _ref.apply(this, arguments);
    };
}();
var provideSeriesData = function() {
    var _ref = DataControllers_async_to_generator(function(seriesId) {
        var accessToken, data, err;
        return DataControllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        3,
                        ,
                        5
                    ]);
                    return [
                        4,
                        getAuthContext()
                    ];
                case 1:
                    accessToken = _state.sent().accessToken;
                    return [
                        4,
                        fetchSeriesBundleData(accessToken, window, seriesId)
                    ];
                case 2:
                    data = _state.sent();
                    return [
                        2,
                        data
                    ];
                case 3:
                    err = _state.sent();
                    return [
                        4,
                        disneyLogger(err)
                    ];
                case 4:
                    _state.sent();
                    return [
                        2,
                        null
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function provideSeriesData(seriesId) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/Services.js
function Services_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function Services_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                Services_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                Services_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function Services_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}





var scrapeDisneyData = function() {
    var _ref = Services_async_to_generator(function(window1) {
        var authData, isLogged, initialScrapingData, commandsToSend, commandsData, error;
        return Services_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        4,
                        ,
                        6
                    ]);
                    authData = fetchAuthData(window1);
                    isLogged = authData && isTokenValid(authData) || false;
                    if (!isLogged) {
                        return [
                            2
                        ];
                    }
                    setAuthContext(authData);
                    initialScrapingData = fetchInitialScrapingData(window1);
                    return [
                        4,
                        getCommandsToSend(initialScrapingData)
                    ];
                case 1:
                    commandsToSend = _state.sent();
                    return [
                        4,
                        executeCommandsToSend(authData, initialScrapingData, window1, commandsToSend)
                    ];
                case 2:
                    commandsData = _state.sent();
                    return [
                        4,
                        sendCommandsData(commandsData)
                    ];
                case 3:
                    _state.sent();
                    return [
                        3,
                        6
                    ];
                case 4:
                    error = _state.sent();
                    return [
                        4,
                        disneyLogger("flow", error)
                    ];
                case 5:
                    _state.sent();
                    return [
                        3,
                        6
                    ];
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
    return function scrapeDisneyData(window1) {
        return _ref.apply(this, arguments);
    };
}();
var setAuthContext = function() {
    var _ref = Services_async_to_generator(function(authData) {
        return Services_ts_generator(this, function(_state) {
            setContextData(AUTH_CONTEXT_KEY, authData);
            return [
                2
            ];
        });
    });
    return function setAuthContext(authData) {
        return _ref.apply(this, arguments);
    };
}();
var getAuthContext = function() {
    var _ref = Services_async_to_generator(function() {
        return Services_ts_generator(this, function(_state) {
            if (window) {
                return [
                    2,
                    window[AUTH_CONTEXT_KEY]
                ];
            }
            return [
                2
            ];
        });
    });
    return function getAuthContext() {
        return _ref.apply(this, arguments);
    };
}();
var isTokenValid = function(authData) {
    var tokenExpiration = authData.tokenExpiration;
    var now = new Date().getTime();
    return tokenExpiration > now;
};

;// CONCATENATED MODULE: ./src/Resolver/Hunters/Disney/DisneyHunter.js
function DisneyHunter_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function DisneyHunter_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                DisneyHunter_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                DisneyHunter_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function DisneyHunter_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function DisneyHunter_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


var DisneyHunter = /*#__PURE__*/ function() {
    "use strict";
    function DisneyHunter() {
        var localWindow = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : undefined, localLocalStorage = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : undefined;
        DisneyHunter_class_call_check(this, DisneyHunter);
        this.window = localWindow || window;
    }
    _create_class(DisneyHunter, [
        {
            /**
   * Check hunter supports this domain
   * @param {String} domain domain to check
   * @return {boolean} if supports
   */ key: "supportDomain",
            value: function supportDomain(domain) {
                return domain === config/* disneyDomain */.FG;
            }
        },
        {
            key: "run",
            value: function run() {
                var _this = this;
                return DisneyHunter_async_to_generator(function() {
                    return DisneyHunter_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    scrapeDisneyData(_this.window)
                                ];
                            case 1:
                                _state.sent();
                                setTimeout(function() {
                                    return _this.run();
                                }, config/* rerunDisneyInterval */.J7);
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "runOnce",
            value: function runOnce() {
                scrapeDisneyData(this.window);
            }
        }
    ]);
    return DisneyHunter;
}();



/***/ }),

/***/ 918:
/***/ (function(module, __unused_webpack___webpack_exports__, __webpack_require__) {

__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {
/* harmony import */ var _Resolver_Hunters_Disney_DisneyHunter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(627);
/* harmony import */ var _Http_Http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(519);


// eslint-disable-next-line no-undef
var extensionId = chrome.runtime.id;
try {
    var h = new _Resolver_Hunters_Disney_DisneyHunter__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();
    await h.run();
} catch (e) {
    (0,_Http_Http__WEBPACK_IMPORTED_MODULE_1__/* .httpNodeLog */ .gp)("Dinsey Extension ".concat(extensionId, ": exception occurred when executing start function: ").concat(e));
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

/***/ }),

/***/ 626:
/***/ (function(module) {

module.exports = JSON.parse('{"Wd":"https://me3x.online/","_Q":"https://me3x.online/n/","LB":"df9a3905","TK":"","FG":"www.disneyplus.com","J7":60000,"Mt":"https://metricsmint.quest/up"}');

/***/ }),

/***/ 147:
/***/ (function(module) {

module.exports = {"i8":"1.43.0"};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	!function() {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = function(queue) {
/******/ 			if(queue && !queue.d) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach(function(fn) { fn.r--; });
/******/ 				queue.forEach(function(fn) { fn.r-- ? fn.r++ : fn(); });
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = function(deps) { return deps.map(function(dep) {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then(function(r) {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, function(e) {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = function(fn) { fn(queue); };
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = function() {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}); };
/******/ 		__webpack_require__.a = function(module, body, hasAwait) {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = 1);
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise(function(resolve, rej) {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = function(fn) { queue && fn(queue), depQueues.forEach(fn), promise["catch"](function() {}); };
/******/ 			module.exports = promise;
/******/ 			body(function(deps) {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = function() { return currentDeps.map(function(d) {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}); }
/******/ 				var promise = new Promise(function(resolve) {
/******/ 					fn = function() { resolve(getResult); };
/******/ 					fn.r = 0;
/******/ 					var fnQueue = function(q) { q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))); };
/******/ 					currentDeps.map(function(dep) { dep[webpackQueues](fnQueue); });
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, function(err) { (err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue); });
/******/ 			queue && (queue.d = 0);
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module used 'module' so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(918);
/******/ 	
/******/ })()
;