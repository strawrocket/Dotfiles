import{r as p,j as P}from"./constants-e5712b98.js";import{E as m,W as u,B as n}from"./index-5ad58ea9.js";import{v as I}from"./v4-4a60fe23.js";const M=p.createContext({getFromBackground:async()=>{throw new Error("MessageContext not initialized")},storageId:null}),O=({children:w,isWebpage:E=!1})=>{let a=null;const f={getFromBackground:p.useCallback(async(i,c,l)=>{if(E){let t;try{if((await chrome.runtime.sendMessage(m,{action:"PING"})).action==="PONG")t=chrome.runtime.connect(m);else throw new Error("Extension not installed")}catch{if((await chrome.runtime.sendMessage(u,{action:"PING"})).action==="PONG")t=chrome.runtime.connect(u);else throw new Error("Extension not installed")}return await new Promise(e=>{t.postMessage({action:i,from:c,payload:l}),t.onMessage.addListener(function(o){t.disconnect(),e(o)})})}else return new Promise((t,d)=>{const e=`getFromBackground-${I()}`;a=e;const o={action:i,from:c,id:e,payload:l,status:"pending"};n.storage.local.set({[e]:o}).then(()=>{const r=async(g,h)=>{if(h==="local"&&g[e]){const{newValue:s,oldValue:x}=g[e];s&&s!==x&&s.hasOwnProperty("response")&&(n.storage.onChanged.removeListener(r),s.status==="fulfilled"&&await n.storage.local.remove(s.id),t(s.response))}};n.storage.onChanged.addListener(r)}).catch(r=>{d(r)})})},[]),storageId:a};return P.jsx(M.Provider,{value:f,children:w})};export{O as M,M as a};
